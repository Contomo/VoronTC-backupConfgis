#
# This file is dedicated to loading your tool shapers or default from a save variables file or from the tool parameters.
# It is meant to work universally always loading the correct ones.
# 
# you should not need to change this.
#
# 🟦─────────────────────────────────────────────────────────────────────────────#
#                    INPUT SHAPER CONFIGURATION & AUTO-DETECTION               #
# 🟦─────────────────────────────────────────────────────────────────────────────#
# This section defines default shaper values that can be used for all tools
# when no tool-specific overrides are found.
# 
# 🧠 These values are only used if:
#    - No per-tool save_variables ('shapers_t0', 'shapers_t1', etc.) are defined
#    - No tool-specific or toolchanger params override them
# 
# 🔍 The macro LOAD_SHAPERS checks for valid shaper values in the following order:
#    (highest priority first — first valid match is used)
# 
#  1️⃣ 'save_variables.shapers_tX' → e.g., 'shapers_t1 = {"freq_x":..., "damp_y":...}'
#  2️⃣ '[tool T⬜️]' section params → e.g., 'params_input_shaper_freq_x = 47.5'
#  3️⃣ '[toolchanger]' section params → inherited by all tools unless overridden
#  4️⃣ 'save_variables.shapers_default' → fallback shared dictionary
#  5️⃣ '[input_shaper]' (this section) → ultimate fallback
# 
# 📌 Required keys must include:
#     - "freq" (for frequency)
#     - "damp" (for damping)
#     - "x" / "y" (axis specifiers)
#
# Example valid names:
#     ✅ shaper_freq_x, damping_ratio_y, input_shaper_freq_x, etc.
#     ❌ Avoid ambiguous keys like "shaper_x" (not detected) or misinterpreted
#
# You may customize or comment out values here — they will be ignored if higher
# priority sources are found and valid.
# 🟦─────────────────────────────────────────────────────────────────────────────#

[gcode_macro LOAD_SHAPERS]
description: "Loads shaper values from [save_variables] or [tool] or [input_shaper] sections.. 
variable_lastshapers: {}
variable_macro_html: "?tLoads shaper values from [save_variables] or [tool] or [input_shaper] sections.?p_LOAD_SHAPERS "
gcode:

  {% set msg = macro_html %}
  {% set p = printer %}
  {% set svf = p.save_variables.variables %}
  {% set actn = p.tool_probe_endstop.active_tool_number|int %}
  {% set ns = namespace(tns = "") %}
  {% if "input_shaper" in p.configfile.config %}

    # ──────| Get out tool/toolnumber (paramamter) |──────
    {% if rawparams %}
        {% set param0 = rawparams.split()[0] %}
        {% set ns.tns = "" %}
        {% for c in param0 %} {% set ns.tns = ns.tns ~ c if "0" <= c <= "9" %} {% endfor %}
        {% if ns.tns|length > 0 %}
              {% set tool_name = p.toolchanger.tool_names[ns.tns|int] %}
              {% set msg = msg ~ "?tTool: " ~ (tool_name|replace('tool ', '', 1)) ~ " (extracted from parameter " ~ param0 ~ ")" %}
        {% else %} {% set msg = msg ~ "?tFirst parameter provided should contain toolnumber, valid examples would be:?nABC=1?nTN=2?nT=T1?nTOOL='tool TX1'?nT=3?netc....?m?s2Provided '?c" ~ param0 ~ "?c' does not contain a valid tool number." %} {% endif %}
    {% endif %}

    # ──────| Get out tool/toolnumber (active tool) |──────
    {% if ns.tns|length == 0 and actn != -1 %}
        {% set tool_name = p.toolchanger.tool_names[actn] %}
        {% set msg = msg ~ "?tTool: " ~ tool_name|replace('tool ', '', 1) ~ " used (active tool)" %}
    {% elif ns.tns|length == 0 and actn == -1 %} {% set msg = msg ~ "?m?s3No tool parameter provided and no active tool available." %} {% endif %}
    #|────────────────────────────────────────────────────────────────────────────────────────|#
    # ──────| If we found one, load shapers from tool or config. |──────
    {% if tool_name %}
      {% set sk = ['freq_x', 'freq_y', 'damp_x', 'damp_y'] %} # names used internally here
      #🟨────────────────────────────────────────────────────────────────────────────────────────#
      #🟨 Define the sources for shaper values. 
      #🟨 feel free to add your own. dunno where else youd have them tho.
      #🟨────────────────────────────────────────────────────────────────────────────────────────#
      {% set sources = {
        "svf_tool": {"priority": 5,"data": svf.get("shapers_" ~ tool_name|replace('tool ', '', 1)|lower, {})},
        "tool_params": {"priority": 4,"data": p[tool_name]},
        "toolchanger_params": {"priority": 3,"data": p['toolchanger']},
        "svf_default": {"priority": 2,"data": svf.get("shapers_default", {})},
        "shaper_config": {"priority": 0,"data": p.configfile.config.get("input_shaper", {})}
      } %}
      # We search for keywords like shap and x and y, to map them to our values
      #🟨────────────────────────────────────────────────────────────────────────────────────────#
      #🟨 feel free to edit the ["freq", "x"] search terms.
      #🟨 do note however that terms like 'shaper' will likely result in issues if present in 
      #🟨 dampning ratio and frequency names.
      #🟨────────────────────────────────────────────────────────────────────────────────────────#
      {% set target_keys = {
        sk[0]:["freq", "x"],
        sk[1]:["freq", "y"],
        sk[2]:["damp", "x"],
        sk[3]:["damp", "y"]
      } %}

      # ──────| Build our dicts with priority. |──────
      {% set ns = namespace(available_shapers = {}, best = None, has_all=false, best_label = "", highest = -1) %}

      {% for label, obj in sources.items() %}
        {% set tmp = {"priority": obj.priority} %}
        {% for key in obj.data.keys() %}
          {% set val = obj.data.get(key, 0)|float %}
          {% for target, terms in target_keys.items() %}
            {% if terms[0] in key and terms[1] in key %}
              {% set _ = tmp.update({target: val}) %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {% if tmp|length > 1 %} # ───| means it contains at least 1 value beyond priority
          {% set _ = ns.available_shapers.update({label: tmp}) %}
        {% endif %}
      {% endfor %}
      # ---------------------------------------------------------------------- #
      # ──────| Sort our dicts for best valid found. |──────
      {% for label, entry in ns.available_shapers.items() %}
        {% set ns.has_all = true %}
        # set has_all false if its missing some (here we are just checking 0 and 1, so freq_x and freq_y)
        {% for rk in [sk[0], sk[1]] %}   
          {% if entry.get(rk, 0)|float == 0 %} {% set ns.has_all = false %} {% endif %}
        {% endfor %}
        # update the best one if its priority is higher.
        {% if ns.has_all and entry["priority"] > ns.highest %}
          {% set ns.best = entry %}
          {% set ns.best_label = label %}
          {% set ns.highest = entry["priority"] %}
        {% endif %}
      {% endfor %}

      {% if ns.best %}
        # ──────| damping to 0.1 if 0 |──────
        {% if ns.best[sk[2]]|default(0)|float == 0 %} {% set _ = ns.best.update({sk[2]: 0.1}) %} {% endif %}
        {% if ns.best[sk[3]]|default(0)|float == 0 %} {% set _ = ns.best.update({sk[3]: 0.1}) %} {% endif %}


        {% if lastshapers != ns.best %}
          {% set msg = msg ~ "?t?s0?tUpdate Status: Shaper values updated." %}
          SET_GCODE_VARIABLE MACRO=LOAD_SHAPERS VARIABLE=lastshapers VALUE="{ns.best}"
          SET_INPUT_SHAPER SHAPER_FREQ_X={ns.best[sk[0]]} SHAPER_FREQ_Y={ns.best[sk[1]]} DAMPING_RATIO_X={ns.best[sk[2]]} DAMPING_RATIO_Y={ns.best[sk[3]]}
        {% else %}
          {% set msg = msg ~ "?t?s0?tUpdate Status: Shaper values unchanged." %}
        {% endif %}
        {% set msg = msg ~ "?tFinal Values:" ~ "?n" ~ sk[0] ~ ": " ~ ns.best[sk[0]] ~ "   " ~ sk[1] ~ ": " ~ ns.best[sk[1]] ~ "?n" ~ sk[2] ~ ": " ~ ns.best[sk[2]] ~ "   " ~ sk[3] ~ ": " ~ ns.best[sk[3]] ~ "?nsource: " ~ ns.best_label|string %}
        {% set msg = msg ~ "?s0?mLoaded?c" ~ tool_name|replace('tool ', '', 1) ~ "?cshaper values from?c" ~ ns.best_label|string ~ "?c" %}
        #{% set msg = msg ~ "?D" ~ sk[0] ~ ": " ~ ns.best[sk[0]] ~ "?D" ~ sk[1] ~ ": " ~ ns.best[sk[1]] ~ "?D" ~ sk[2] ~ ": " ~ ns.best[sk[2]] ~ "?D" ~ sk[3] ~ ": " ~ ns.best[sk[3]] ~ "?Dsource: " ~ ns.best_label|string %}
      {% else %}
        {% set msg = msg ~ "?tSearched in:?n" ~ (sources.keys()|list|join('?n')) ~ "?s3?mNo valid shaper values found!" %}
      {% endif %}
    {% endif %} # i toolname
  {% else %}
    {% set msg = msg ~ "?tplease define '[input_shaper]' in order to load shapers. ?s3?m?c[input_shaper]?csection in printer is undefined." %}
  {% endif %}

  {% if params.SILENT is not defined and macro_html != msg %}
    {% if 'gcode_macro _UNIFIED_RESPOND' in printer %}
      _UNIFIED_RESPOND MSG="{msg}"
    {% else %}
      RESPOND {% if ('?s0' or '?s1') in msg %} TYPE='echo' {% else %} TYPE='error' {% endif %} MSG="{((msg|replace('?n','<br>')|replace('?m','<br>')|replace('?p','CUT_HERE')|replace('?t','<br>')|replace('?s0','')|replace('?s1','')|replace('?s2','!?')|replace('?s3','!')|replace('?s4','!!')|replace('?s5','!!!')|replace('?b',' !')|replace('?c',' *')).split('CUT_HERE'))[-1]}"
    {% endif %}
  {% endif %}


