#########################################################################################
#    _TC_ADJUST_HOME_OFFSET    ##########################################################
#########################################################################################
[gcode_macro _TC_ADJUST_HOME_OFFSET]
description: Depending on the selected tool at the time of homing, the physical Z endstop position is offset. This corrects for that using current tool offset.
variable_macro_html: "?tCorrects for the missing gcode offset at the time of probing (homing z).?nDrives to Z10 and setting kinematic position to Z(10 + probe + z offset)?p_TC_ADJUST_HOME_OFFSET "
variable_current_applied_offset: ""
gcode:
  {% set msg = macro_html %}
  {% set p = printer %}
  {% set tc = p.toolchanger %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set actn = p.tool_probe_endstop.active_tool_number|int %}
  G90
  G0 Z10 F1000
  {% if tc.status != "ready" or tc.tool_number != actn or actn == -1 %} 
    INITIALIZE_TOOLCHANGER 
  {% endif %}

  {% set msg = msg ~ "?ttoolchangers tool (" ~ tc.tool_number ~ ") is not the currently detected tool. (" ~ actn ~ ")?s2?mToolchanger is desynced from current state, ?breinitializing!?b" if tc.tool_number != actn else msg %}

  # Get the active tool
  {% set tool = p[tc.tool_names[actn]] %}
  {% if tool %}
    # svf key loading stuffs
    {% set svf = printer.save_variables.variables %}
    {% set tool_name_clean = tool.name|replace('tool ', '', 1)|lower %}
    {% set offset_key = 'offsets_' ~ tool_name_clean %}
    {% set cur_tool_probe_z = printer.tool_probe_endstop.active_tool_probe_z_offset|float %}
    # ----------------------------------------------------------------------------------------
    # Offset loading from tool or SVF
    # ----------------------------------------------------------------------------------------
    {% set offsets_tool = svf.get(offset_key, {}) %}
    {% set tool_off_z = offsets_tool.get('z', 0)|float %}
    {% set probe_offset = offsets_tool.get('probe', 0)|float %}
    {% set msg = msg ~ "?tSVF key " ~ offset_key ~ " not found.?mFalling back to default offsets.?s1" if offset_key not in svf else msg %}


    {% set probe_offset = cur_tool_probe_z if probe_offset == 0 else probe_offset %}
    {% set tool_off_z = tool.gcode_z_offset if tool_off_z == 0 else tool_off_z %}

    # ----------------------------------------------------------------------------------------
    # Warn if z offset is 0
    # ----------------------------------------------------------------------------------------
    {% if "0" not in tool.name and (tool_off_z|round(3)) == 0 %} # use get
      {% set msg = msg ~ "?s3?tgcode z offset for " ~ tool.name|replace('tool ', '', 1) ~ " appears to be 0, though it is not T0.?mPlease verify your offsets!" %}
    {% endif %}
    # ----------------------------------------------------------------------------------------
    # Warn if z probe offset offset is 0, default to -1
    # ----------------------------------------------------------------------------------------
    {% if probe_offset|round(2) == 0 %} # use get
      {% set msg = msg ~ "?tProbe offset is 0. Defaulting to -1.0 as a safety measure.?n" ~ tool_off ~ "?s4?mProbe offset is ?c0?c!" %}
      {% set _ = tool_off.update({"probe": -1.0000}) %}
    {% endif %}
    # ----------------------------------------------------------------------------------------
    # Get total home offset, warn if out of bounds.
    # ----------------------------------------------------------------------------------------
    {% set total_offset = (tool_off_z|float + probe_offset|float)|round(2) %}
    {% if total_offset > (tcs.get('max_allowed_offsets', 999) * 2) or total_offset < (tcs.get('max_allowed_offsets', 999) * -2) %}
      {% set msg = msg ~ "?s5?tCalculated total offset (" ~ total_offset ~ "mm) seems unusual. Please check tool offsets.?m" %}
    {% endif %}
    # ----------------------------------------------------------------------------------------
    # Report back on offsets used. and total applied.
    # ----------------------------------------------------------------------------------------
    {% set msg = msg ~ "?tapplied " ~ tool.name|replace('tool ', '', 1) ~ " offsets: " ~ total_offset ~ "mm (z: " ~ tool_off_z|float|round(2) ~ " + probe_z: " ~ probe_offset|float|round(2) ~ ")" %}

    {% set msg = msg ~ "?nUsing stored offsets for " ~ tool.name ~ "?nOffsets found in SVF: " ~ svf.offset_key if offsets_tool.get('probe', 0) != 0 and offsets_tool.get('z', 0) != 0 else msg %}
    {% set msg = msg ~ "?nProbe offset for " ~ tool.name ~ " not found or 0 in SVF: " ~ svf.offset_key ~ " using cur_tool_probe_z of '" ~ cur_tool_probe_z ~ "'" if offsets_tool.get('probe', 0) == 0 else msg %}
    {% set msg = msg ~ "?nTools Z offset for " ~ tool.name ~ " not found or 0 in SVF: '" ~ svf.offset_key ~ "' using tool.gcode_z_offset of '" ~ tool.gcode_z_offset ~ "'" if offsets_tool.get('z', 0) == 0 else msg %}
    
    {% set msg = msg ~ "?s0?mHome shifted by: ?c" ~ total_offset ~ "mm?c" %}

    # Actually apply the offsets now lol
    M400
    SET_KINEMATIC_POSITION Z={10.0 + total_offset}
    SET_GCODE_VARIABLE MACRO=_TC_ADJUST_HOME_OFFSET VARIABLE=current_applied_offset VALUE={total_offset}
  {% else %}
    # Falls kein aktives Tool gefunden wurde, gib eine Fehlermeldung aus 
    {% set tool_state = printer.toolchanger.tool %}
    {% set msg = "?tERROR: No tool selected. Run DETECT_ACTIVE_TOOL_PROBE to fix this.?s3?mprinter.toolchanger.tool is ?c" ~ tool_state ~ "?c" %}
  {% endif %}
  
  _UNIFIED_RESPOND MSG="{msg}"




#########################################################################################
# BED MESHING # 
#########################################################################################
[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 10, 25
mesh_max: 340, 350
probe_count: 6, 6

#------------------------------------------------------------------------------------------

[exclude_object]
# BED_MESH_CALIBRATE PROFILE=<name> METHOD=[manual | automatic | scan | rapid_scan]
# [<probe_parameter>=<value>] [<mesh_parameter>=<value>] [ADAPTIVE=[0|1] [ADAPTIVE_MARGIN=<value>]

# BED_MESH_CLEAR
# BED_MESH_PROFILE SAVE=<name> LOAD=<name> REMOVE=<name>
[gcode_macro TOOL_BED_MESH_CALIBRATE] # todo havent even looked at this yet.
# todo apparently you only need to BED_MESH_OFFSET [X=<value>] [Y=<value>] [ZFADE=<value>]
gcode:
      {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
      G90 ; absolute mode
      G0 Z10 F1000
      # Bed mesh knows about the probe offset, but not about the tool offset.
      # fix bed mesh might not know the probe offset, substract the one from SVF if the one in tool probe isnt used
      M400
      SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
      BED_MESH_CALIBRATE
      G0 Z10 F1000
      SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}

      








      