
#[gcode_macro M106]
#rename_existing: M106.1
#description: Override "M106" to account for multiple extruders.
#gcode:
#    {% set raw_speed = params.S|default(255)|float %}
#    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
#    {% set fan_tool = 0 if (printer.toolchanger.tool_number|string) == "-1" else printer.toolchanger.tool_number|string %}
#    {% if (params.P) is defined %}
#      {% set P_fan = "part_fan_t" + params.P|string %}
#      SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
#    {% else %}
#      SET_FAN_SPEED FAN="part_fan_t{fan_tool}" SPEED={fan_speed}
#    {% endif %}

#[gcode_macro M107]
#rename_existing: M107.1
#description: Override "M107" to account for multiple extruders.
#gcode:
#    # If we specified a fan, turn it off
#    {% if (params.P) is defined %}
#      M106 S0 P{params.P}
#    {% else %}
#      # Otherwise, turn off all part cooling fans
#      {% set num_tools = printer.toolchanger.tool_numbers|length|int %}
#      # Loop through the tools.
#      {% for i in range(num_tools) %}
#        # Turn off the fans
#        M106 S0 P{i}
#      {% endfor %}
#    {% endif %}





      #ROUNDED_G0 X={cur_pos.x + off.x} Y={safe_y//2} Z={cur_pos.z + off.z+5} F={fast} D=60#30 #todo change +10 to max limited
      #ROUNDED_G0 Y={safe_y//2} Z={cur_pos.z + off.z+10} F={fast} D=50


      #ROUNDED_G0 Y={safe_y} Z={cur_pos.z + off.z} F={fast} D=90
      # suicide {% if 'Z' in rp and 'Y' in rp and 'X' in rp %} ROUNDED_G0 X={rp.X} Y={rp.Y} Z={(rp.Z + cur_pos.z) / 2} F={fast} D=200 {% endif %}
      # suicide {% if 'Z' in rp and 'Y' in rp and 'X' in rp %} ROUNDED_G0 X={rp.X} Y={rp.Y} Z={rp.Z + 5} F={fast} D=5 {% endif %}
      # suicide {% if 'Z' in rp and 'Y' in rp and 'X' in rp %} ROUNDED_G0 X={rp.X} Y={rp.Y} Z={rp.Z} F={fast//5} D=0 {% endif %}
      
      #_DEBUG_RESPOND MSG="$RESTORE_POSITION$ | ROUNDED_G0 Z={rp.Z} F={fast//5} D=0"
      #_DEBUG_RESPOND MSG="$RESTORE_POSITION$ | ROUNDED_G0 Z={((rp.Z + cur_pos.z) // 2)|round(3)} F={fast} D=70"
      #_DEBUG_RESPOND MSG="$RESTORE_POSITION$ | ROUNDED_G0 Y={rp.Y|round(3)} F={fast} D=50"
      #_DEBUG_RESPOND MSG="$RESTORE_POSITION$ | ROUNDED_G0 X={rp.X|round(3)} F={fast} D=1000"
      #_DEBUG_RESPOND MSG="$RESTORE_POSITION$ | ROUNDED_G0 Y={safe_y//2} Z={cur_pos.z + off.z+10} F={fast} D=50"
      #_DEBUG_RESPOND MSG="$RESTORE_POSITION$ | ROUNDED_G0 Y={safe_y} F={fast} D=90"

#ROUNDED_G0 X={cur_pos.x + off.x} Y={safe_y} Z={cur_pos.z + off.z} F={fast} D=50 
#
#{% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z+1} F={fast} D=150 {% endif %}
#{% if 'X' in rp %} ROUNDED_G0 X={rp.X|round(3)} F={fast} D=1000 {% endif %}
#{% if 'Y' in rp %} ROUNDED_G0 Y={rp.Y|round(3)} F={fast} D=50 {% endif %}
#{% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z|round(3)} F={fast} D=5 {% endif %}
#
#{% if 'Z' in rp %} G0 Z{rp.Z} F{fast//5} {% endif %}

#
#ROUNDED_G0 Y=100 D=20
#ROUNDED_G0 Y=210 Z=350 D=100
#ROUNDED_G0 X=175 Y=175 Z=100 D=200
#ROUNDED_G0 X=175 Y=175 Z=10 D=0
#ROUNDED_G0 Y=175 X=175 D=500











#################################################################################################################
# _DETECT_OFFSET_TEMPLATE #######################################################################################
#################################################################################################################
[gcode_macro _DETECT_OFFSET_TEMPLATE]
description: "Detect common offset variable patterns and inconsistencies"
gcode:
    {% set ns = namespace(
        keys = printer|list,
        patterns = [],
        counts = [],
        zeroed = []
    ) %}

    {% for key in ns.keys %}
        {% if "_offset_" in key %}
            {% set parts = key.split('_') %}
            {% if parts|length >= 3 %}
                {% set templ = parts[0][:1] ~ '*_' ~ parts[1] ~ '_' ~ parts[2] %}
                {% set val = printer[key] %}
                {% set idx = -1 %}
                {% for i in range(ns.patterns|length) %}
                    {% if ns.patterns[i] == templ %}
                        {% set idx = i %}
                    {% endif %}
                {% endfor %}
                {% if idx == -1 %}
                    {% set ns.patterns = ns.patterns + [templ] %}
                    {% set ns.counts = ns.counts + [1 if val != 0 else 0] %}
                {% else %}
                    {% set ns.counts = ns.counts[:idx] + [ns.counts[idx] + (1 if val != 0 else 0)] + ns.counts[idx+1:] %}
                {% endif %}
                {% if val == 0 %}
                    {% set ns.zeroed = ns.zeroed + [key] %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if ns.patterns|length > 0 %}
        {% set max_idx = 0 %}
        {% for i in range(1, ns.counts|length) %}
            {% if ns.counts[i] > ns.counts[max_idx] %}
                {% set max_idx = i %}
            {% endif %}
        {% endfor %}
        RESPOND TYPE=echo MSG="Most common offset pattern: {ns.patterns[max_idx]}"
        {% for i in range(ns.patterns|length) %}
            RESPOND TYPE=echo MSG="{ns.patterns[i]} → {ns.counts[i]} offset(s)"
        {% endfor %}
    {% else %}
        RESPOND TYPE=echo MSG="No offset-style variables found."
    {% endif %}

    {% if ns.zeroed %}
        RESPOND TYPE=echo MSG="Zero (undefined) offsets: {ns.zeroed|join(', ')}"
    {% endif %}




#################################################################################################################
# _GCODE_OFFSET_AUTODETECT ######################################################################################
#################################################################################################################
[gcode_macro _GCODE_OFFSET_AUTODETECT]
description: Autodetects offset source (tool config vs save_variables) and reports issues.
variable_gcode_offsets_in_tools: 0
variable_gcode_offsets_in_safe_vars: 0
gcode:

   {% set tool_names = printer.toolchanger.tool_names %}
    {% set svf = printer.save_variables.variables if "save_variables" in printer.configfile.config else {} %}
    {% set ns = namespace(
        config_offsets=[], svf_offsets=[], both_offsets=[], partial_svf=[], no_offsets=[]
    ) %}

    {% for tool_name in tool_names %}
        {% set tool = printer[tool_name] %}
        {% set tn = tool_name|string|replace('tool ', '', 1)|lower %}

        {% set config_has_offset = tool.gcode_x_offset != 0 or tool.gcode_y_offset != 0 or tool.gcode_z_offset != 0 %}
        {% set svf_x = tn ~ '_offset_x' %}
        {% set svf_y = tn ~ '_offset_y' %}
        {% set svf_z = tn ~ '_offset_z' %}
        {% set svf_has_all = svf_x in svf and svf_y in svf and svf_z in svf %}
        {% set svf_has_any = svf_x in svf or svf_y in svf or svf_z in svf %}

        {% if config_has_offset and not svf_has_any %}
            {% set ns.config_offsets = ns.config_offsets + [tool_name] %}
        {% elif svf_has_all and not config_has_offset %}
            {% set ns.svf_offsets = ns.svf_offsets + [tool_name] %}
        {% elif config_has_offset and svf_has_all %}
            {% set ns.both_offsets = ns.both_offsets + [tool_name] %}
        {% elif svf_has_any and not svf_has_all %}
            {% set ns.partial_svf = ns.partial_svf + [tool_name] %}
        {% else %}
            {% set ns.no_offsets = ns.no_offsets + [tool_name] %}
        {% endif %}
    {% endfor %}

    ; Report Results
    {% if ns.config_offsets %}
        _VALID_RESPOND MSG="$_GCODE_OFFSET_AUTODETECT$ | Offsets from config for: {ns.config_offsets|join(', ')}"
    {% endif %}
    {% if ns.svf_offsets %}
        _VALID_RESPOND MSG="$_GCODE_OFFSET_AUTODETECT$ | Offsets from save_variables for: {ns.svf_offsets|join(', ')}"
    {% endif %}
    {% if ns.both_offsets %}
        _WARNING_RESPOND MSG="$_GCODE_OFFSET_AUTODETECT$ | Conflict: Both config and save_variables offsets for: {ns.both_offsets|join(', ')}"
    {% endif %}
    {% if ns.partial_svf %}
        _WARNING_RESPOND MSG="$_GCODE_OFFSET_AUTODETECT$ | Partial offsets in save_variables for: {ns.partial_svf|join(', ')}"
    {% endif %}
    {% if ns.no_offsets %}
        _DEBUG_RESPOND MSG="$_GCODE_OFFSET_AUTODETECT$ | No offsets found for: {ns.no_offsets|join(', ')}"
    {% endif %}
        # todo: if it's present in both, tell the user, if some are present in one and some in others, tell the user. Only one shall be used.
        # todo: crawl config to look for other definitions of tool name/number offsets and report custom
        




#[gcode_macro TC_LOAD_OFFSETS]
#variable_macro_html: "?tLoads offsets from [save_variables], may try to fall back to tool.gcode_?_offset.?nClamps each axis to ±max_off (2.5).?nProvide tool number as first param. Will use active tool if not provided.?pTC_LOAD_OFFSETS "
#description: "Loads offsets from save_variables. Clamps each axis to ±max_off. Provide tool as first param, will use active tool if not provided."
#gcode:
#    # Set the maximum allowed offset (max_off) and build the base message from macro_html.
#    {% set max_off = 2.5 %}
#    {% set msg = macro_html|replace('$mo$', max_off|string) %}
#    {% set global_z_offset = printer['gcode_macro TX'].global_z_offset|default(0)|float|round(3) %}
#    {% set svf = printer.save_variables.variables %}
#    {% set actn = printer.tool_probe_endstop.active_tool_number|int %}
#    {% set ns = namespace(tn="") %}
#    {% set offsets = {} %}
#    
#    # ----------------------------
#    # TOOL SELECTION BLOCK
#    # ----------------------------
#    {% if rawparams %}
#         {% set param0 = rawparams.split()[0] %}
#         {% set ns.tn = "" %}
#         {% for c in param0 %}
#             {% if "0" <= c <= "9" %}
#                 {% set ns.tn = ns.tn ~ c %}
#             {% endif %}
#         {% endfor %}
#         {% if ns.tn|length > 0 %}
#              {% set tool_name = printer.toolchanger.tool_names[ns.tn|int] %}
#              # Tooltip contains details; visible message is short (only the tool name) #}
#              {% set msg = msg ~ "?t(Provided tool: " ~ tool_name ~ " from param " ~ ns.tn ~ ")?m" ~ tool_name %}
#         {% else %}
#              {% set msg = msg ~ "?t(Tool Error: Invalid parameter)?mTool Error" %}
#         {% endif %}
#    {% elif actn != -1 %}
#         {% set tool_name = printer.toolchanger.tool_names[actn] %}
#         {% set msg = msg ~ "?t(No parameter provided; using active tool)?m" ~ tool_name %}
#    {% else %}
#         {% set msg = msg ~ "?t(Tool Error: None available)?mTool Error" %}
#    {% endif %}
#    
#    # ----------------------------
#    # OFFSET LOADING BLOCK
#    # ----------------------------
#    {% if tool_name is defined %}
#         {% set t = printer[tool_name] %}
#         {% set svf_key = "offsets_" ~ tool_name|replace("tool ", "", 1)|lower %}
#         {% if svf_key in svf %}
#              {% set offsets = svf[svf_key] %}
#              {% set msg = msg ~ "?t(Loaded offsets from SVF for " ~ tool_name ~ ": X=" ~ offsets.x ~ " | Y=" ~ offsets.y ~ " | Z=" ~ offsets.z ~ " | Global-Z=" ~ global_z_offset ~ ")?mLoaded offsets" %}
#         {% elif (t.gcode_x_offset != 0.0 or t.gcode_y_offset != 0.0 or t.gcode_z_offset != 0.0) %}
#              {% set offsets = {"x": t.gcode_x_offset|float, "y": t.gcode_y_offset|float, "z": t.gcode_z_offset|float} %}
#              {% set msg = msg ~ "?t(Fallback offsets for " ~ tool_name ~ ": X=" ~ offsets.x ~ " | Y=" ~ offsets.y ~ " | Z=" ~ offsets.z ~ " | Global-Z=" ~ global_z_offset ~ ")?mFallback offsets" %}
#         {% else %}
#              {% set msg = msg ~ "?t(Offsets not found for " ~ tool_name|replace("tool ", "", 1) ~ ")?mOffsets Error" %}
#         {% endif %}
#         
#         # ----------------------------
#         # VALIDATION & CLAMPING BLOCK
#         # ----------------------------
#         {% if offsets != {} and ("x" in offsets) and ("y" in offsets) and ("z" in offsets) %}
#              */ If the tool is not T0 and all offsets are zero, warn the user #}
#              {% if (tool_name|lower not in ["tool t0", "t0"]) and offsets.x|float == 0 and offsets.y|float == 0 and offsets.z|float == 0 %}
#                   {% set msg = msg ~ "?t(Warning: Offsets all zero for non-T0 tool)?mVerify your offsets!" %}
#              {% endif %}
#              # Clamp the offsets to ±max_off #}
#              {% set clamped_x = -max_off if offsets.x < -max_off else (max_off if offsets.x > max_off else offsets.x|round(3)) %}
#              {% set clamped_y = -max_off if offsets.y < -max_off else (max_off if offsets.y > max_off else offsets.y|round(3)) %}
#              {% set clamped_z = -max_off if offsets.z < -max_off else (max_off if offsets.z > max_off else offsets.z|round(3)) %}
#              {% if clamped_x != offsets.x|round(3) or clamped_y != offsets.y|round(3) or clamped_z != offsets.z|round(3) %}
#                   {% set msg = msg ~ "?t(Offsets clamped to ±" ~ max_off ~ ": X=" ~ clamped_x ~ " | Y=" ~ clamped_y ~ " | Z=" ~ clamped_z ~ ")?mClamp note" %}
#              {% endif %}
#              
#              # ----------------------------
#              # APPLY OFFSET BLOCK
#              # ----------------------------
#              {% if clamped_x != 0 or clamped_y != 0 or clamped_z != 0 or global_z_offset != 0 %}
#                   SET_GCODE_OFFSET X={clamped_x} Y={clamped_y} Z={clamped_z - global_z_offset} MOVE=0
#                   {% set msg = msg ~ "?t(SET_GCODE_OFFSET applied)?mAbsolute Home shifted by: <code>" ~ (clamped_z - global_z_offset)|string ~ "mm</code>" %}
#              {% else %}
#                   {% set msg = msg ~ "?t(No adjustment needed)?mAbsolute Home" %}
#              {% endif %}
#         {% endif %}
#    {% endif %}
#    _UNIFIED_RESPOND MSG="{msg}"


→


#################################################################################################################
# _SHAPER_CONFIG_CHECK ##########################################################################################
#################################################################################################################
[gcode_macro _SHAPER_CONFIG_CHECK]
description:"checks the input shaper configuration and reports back missing settings."
variable_first_run: 1
gcode:
    {% if first_run %}
        {% if "input_shaper" in printer.configfile.config %}
            {% set input_shaper_keys = ["shaper_freq_x","shaper_freq_y","damping_ratio_x","damping_ratio_y"] %}
            {% set shaper_config = printer.configfile.config["input_shaper"] %}
            {% for key in input_shaper_keys %}
                {% if key not in shaper_config %}
                    _WARNING_RESPOND MSG="$_SHAPER_CONFIG_CHECK$ | {key} missing in [input_shaper]"
                {% else %}
                    #_VALID_RESPOND MSG="$_SHAPER_CONFIG_CHECK$ | {key} defined in [input_shaper]"
                {% endif %}
            {% endfor %}
        {% else %}
            _WARNING_RESPOND MSG="$_SHAPER_CONFIG_CHECK$ | [input_shaper] section missing in printer.cfg"
        {% endif %}
        {% set required_keys = ["params_input_shaper_freq_x","params_input_shaper_freq_y","params_input_shaper_damping_ratio_x","params_input_shaper_damping_ratio_y"] %}
        {% for name in printer.toolchanger.tool_names %}
            {% set tool_obj = printer[name] %}
            {% for key in required_keys %}
                {% if key not in tool_obj %}
                    _WARNING_RESPOND MSG="$_SHAPER_CONFIG_CHECK$ | {key} missing in [{name}]"
                {% else %}
                    #_VALID_RESPOND MSG="$_SHAPER_CONFIG_CHECK$ | {key} defined in [{name}]"
                {% endif %}
            {% endfor %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=_SHAPER_CONFIG_CHECK VARIABLE=first_run VALUE=0
    {% endif %}
    #TODO ADD ABILITY TO ALSO CHECK FOR DEFINITIONS IN THE SAVE_VARIABLES FILE
    #TODO ALSO CHECK THE [toolchanger] OBJECT AS AN OPTION OTHER THAN THE [input_shaper]
    #TODO _WARNING_RESPOND MSG="$_SHAPER_CONFIG_CHECK$ | params_input_shaper_freq_x MUST BE EITHER DEFINED IN TOOLCHANGER OR shaper_freq_x IN INPUT SHAPER AS A FALLBACK


        
#[gcode_macro SHAPER_AUTODETECT_CHECK]
#description: "Deep analysis of shaper sources and per-tool overrides. HTML output and diagnostics."
#gcode:
#    {% set input_keys = ["shaper_freq_x", "shaper_freq_y", "damping_ratio_x", "damping_ratio_y"] %}
#    {% set param_keys = ["params_input_shaper_freq_x", "params_input_shaper_freq_y", "params_input_shaper_damping_ratio_x", "params_input_shaper_damping_ratio_y"] %}
#    {% set short_keys = ["SX", "SY", "DX", "DY"] %}
#    {% set sources = namespace(default={}, tools={}) %}
#    {% for sn in short_keys %}
#        {% set _ = sources.default.update({sn: []}) %}
#    {% endfor %}
#
#    {% if "input_shaper" in printer.configfile.config %}
#        {% for i in range(4) %}
#            {% set k = input_keys[i] %}
#            {% set sn = short_keys[i] %}
#            {% if k in printer.configfile.config["input_shaper"] %}
#                {% set found = sources.default[sn] + ["input_shaper"] %}
#                {% set _ = sources.default.update({sn: found}) %}
#            {% endif %}
#        {% endfor %}
#    {% endif %}
#
#    {% if "toolchanger" in printer.configfile.config %}
#        {% for i in range(4) %}
#            {% set k = param_keys[i] %}
#            {% set sn = short_keys[i] %}
#            {% if k in printer.configfile.config["toolchanger"] %}
#                {% set found = sources.default[sn] + ["toolchanger"] %}
#                {% set _ = sources.default.update({sn: found}) %}
#            {% endif %}
#        {% endfor %}
#    {% endif %}
#
#    {% if printer.save_variables.config is defined %}
#        {% for i in range(4) %}
#            {% set k = param_keys[i] %}
#            {% set sn = short_keys[i] %}
#            {% if k in printer.save_variables.config %}
#                {% set found = sources.default[sn] + ["save_variables"] %}
#                {% set _ = sources.default.update({sn: found}) %}
#            {% endif %}
#        {% endfor %}
#    {% endif %}
#
#    {% for tool in printer.toolchanger.tool_names %}
#        {% set section = "tool " ~ tool %}
#        {% if section in printer.configfile.config %}
#            {% set entries = {} %}
#            {% for i in range(4) %}
#                {% set k = param_keys[i] %}
#                {% set sn = short_keys[i] %}
#                {% if k in printer.configfile.config[section] %}
#                    {% set _ = entries.update({sn: section}) %}
#                {% endif %}
#            {% endfor %}
#            {% if entries|length > 0 %}
#                {% set _ = sources.tools.update({tool: entries}) %}
#            {% endif %}
#        {% endif %}
#    {% endfor %}
#
#    {% set detail = [] %}
#    {% set status_msgs = [] %}
#    {% set status_color = "rgb(0,255,0)" %}
#    {% for i in range(4) %}
#        {% set sn = short_keys[i] %}
#        {% set found = sources.default.get(sn, []) %}
#        {% if found|length == 0 %}
#            {% set color = "rgb(255,0,0)" %}
#            {% set hover = "No default value found" %}
#            {% set status_msgs = status_msgs + [sn ~ " missing"] %}
#            {% set status_color = "rgb(255,0,0)" %}
#        {% elif found|length == 1 %}
#            {% set color = "rgb(0,255,0)" %}
#            {% set hover = "Defined in: " ~ found[0] %}
#        {% else %}
#            {% set color = "rgb(255,165,0)" %}
#            {% set hover = "Duplicate definitions: " ~ found|join(", ") %}
#            {% if status_color != "rgb(255,0,0)" %}
#                {% set status_color = "rgb(255,165,0)" %}
#            {% endif %}
#        {% endif %}
#        {% set line = "<span style='color:" ~ color ~ "' title='" ~ hover ~ "'>" ~ sn ~ " default</span><br>" %}
#        {% set detail = detail + [line] %}
#    {% endfor %}
#
#    {% set tool_lines = [] %}
#    {% for tool, values in sources.tools.items() %}
#        {% for i in range(4) %}
#            {% set sn = short_keys[i] %}
#            {% if sn in values %}
#                {% set hover = "Found in [" ~ values[sn] ~ "]" %}
#                {% set line = "<span style='color:rgb(0,200,255)' title='" ~ hover ~ "'>" ~ tool ~ " → " ~ sn ~ "</span><br>" %}
#                {% set tool_lines = tool_lines + [line] %}
#            {% endif %}
#        {% endfor %}
#    {% endfor %}
#
#    {% if status_msgs|length == 0 %}
#        {% set summary_msg = "Shaper config OK" %}
#        {% set hover = "All default shapers defined correctly." %}
#    {% else %}
#        {% set summary_msg = "Shaper config issues" %}
#        {% set hover = status_msgs|join(" | ") %}
#    {% endif %}
#
#    {% set summary_line = "<span style='color:" ~ status_color ~ "' title='" ~ hover ~ "'>" ~ summary_msg ~ "</span>" %}
#    RESPOND MSG={summary_line}
#
#    {% set final_html = "<div style='line-height:1.4;font-family:monospace'>" 
#        ~ (detail|join("")) 
#        ~ "<hr>" 
#        ~ (tool_lines|join("")) 
#        ~ "</div>" %}
#    RESPOND MSG={final_html}
#






#################################################################################################################
# RESTORE_POSITION ##############################################################################################
#################################################################################################################
[gcode_macro RESTORE_POSITION]
description: "[X] [Y] [Z] (ABS(/GCODE/) X Y Z position)"
gcode:
  {% set actn = printer.tool_probe_endstop.active_tool_number|int %} 
  {% if actn != -1 %}
    {% set p = printer %}
    {% set svf = p.save_variables.variables %}
    # ----------------------------------------------------
    # Get old tool objects, offsets, and global z offset.
    # ----------------------------------------------------
    {% if p["gcode_macro TX"].old_tn|int != -1 %} # if no old tool, assume pos is already gcode.
      {% set old_tool = p[p.toolchanger.tool_names[p["gcode_macro TX"].old_tn|int]] %} # get from macro
      {% set old_key = 'offsets_' ~ old_tool.name|replace('tool ', '')|lower %}
      # get old offsets eiter from SVF or fallback to tool. 
      {% if old_key not in svf %} {% set old_off = {"x":old_tool.gcode_x_offset, "y":old_tool.gcode_y_offset, "z":old_tool.gcode_z_offset} %} _WARNING_RESPOND MSG="$RESTORE_POSITION$ | save variables key wasnt found, fallback to regular gcode offsets. This is highly UNRECOMMENDED!"
      {% else %} {% set old_off = svf[old_key]|default({"x":0, "y":0, "z":0}) %}{% endif %}
    {% else %} {% set old_off = {"x":0, "y":0, "z":0} %}
    {% endif %}
    {% set global_z_offset = p['gcode_macro TX'].global_z_offset|default(0)|float %}
    # -------------------------------------------------------------------------------------
    # Check if we want to restore to a different position. if not, use the values provided.
    # note that XYZ provided to the T calls should always be absolute space! 
    # absolute position is what you retrieve from printer.toolhead.position[0-2] anyways!
    # -------------------------------------------------------------------------------------
    # actual_position = restore_gcode_position - old_tool_offset + new_tool_offset
    # but since we already have new tool gcode offsets loaded here its
    # restore_gcode_position = actual_position - old_tool_offset
    # -------------------------------------------------------------------------------------
    {% set overwrite = printer["gcode_macro TX"].overwrite_next_restore_position %}
    {% set rp = dict() %}#todo figure out bed mesh stuff
    {% if overwrite and ('X' in overwrite) %}{% set _ = rp.update({'X': overwrite.X|float - old_off.x}) %}{% elif 'X' in params %}{% set _ = rp.update({'X': params.X|float - old_off.x}) %}{% endif %}
    {% if overwrite and ('Y' in overwrite) %}{% set _ = rp.update({'Y': overwrite.Y|float - old_off.y}) %}{% elif 'Y' in params %}{% set _ = rp.update({'Y': params.Y|float - old_off.y}) %}{% endif %}
    {% if overwrite and ('Z' in overwrite) %}{% set _ = rp.update({'Z': overwrite.Z|float - old_off.z - global_z_offset}) %}{% elif 'Z' in params %}{% set _ = rp.update({'Z': params.Z|float - old_off.z - global_z_offset}) %}{% endif %}
    {% if overwrite %}
      SET_GCODE_VARIABLE MACRO=TX VARIABLE=overwrite_next_restore_position VALUE="False"
    {% endif %}
    {% set new_tool = p[p.toolchanger.tool_names[actn]] %} # get from active
    {% set new_tool_fast = new_tool.params_fast_speed|float %}
    {% set new_tool_safe_y = new_tool.params_safe_y|float %}
    {% set new_tool_cur_pos = p.toolhead.position %}
    {% set new_tool_off = p.gcode_move.homing_origin %} #todo check if they are applied before we have to add them onto the restore pos
    
    # we have to move out of the docks no matter what (or else following G0 calls may rip docks)
    # note that if you add any X or Z movement before this, you should substract the current
    # gcode offsets, since tool dock space = absolute space
    # for example movement relative to the docks would be
    # G0 X{10 - new_tool_off[0]} would be absolute 10.
    ROUNDED_G0 Y={new_tool_safe_y} F={new_tool_fast} D=50
    # ----------------------------------
    # Actually restore the position now
    # ----------------------------------
    {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z+10} F={new_tool_fast} D=150 {% endif %}
    {% if 'X' in rp %} ROUNDED_G0 X={rp.X|round(3)} F={new_tool_fast} D=1000 {% endif %}
    {% if 'Y' in rp %} ROUNDED_G0 Y={rp.Y|round(3)} F={new_tool_fast} D=20 {% endif %}
    {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z} F={new_tool_fast//5} D=0 {% endif %}
    STATUS_READY
    ROUNDED_G0 D=0
  {% else %}
      _DEBUG_RESPOND MSG="$RESTORE_POSITION$ | cannot restore position, got no tool!"
  {% endif %}