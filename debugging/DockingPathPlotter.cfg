#PLOT_PATH PATH="[{'z':0, 'y':4}, {'z':0, 'y':0}, {'z':-12, 'y':0}]|[{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0, 'y':0}]|[{'y':9.5, 'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]|[{'z':5, 'y':60}, {'z':5, 'y':0}, {'z':0, 'y':0}, {'z':-6, 'y':0}, {'z':-6, 'y':10}]|[{'y':59, 'z':17.5}, {'y':5, 'z':17.5}, {'y':5, 'z':0.2}, {'y':0.5, 'z':0.1}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]|[{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0.5, 'y':2.5, 'f':0.5}, {'z':8, 'y':8}]|[{'z':-8, 'y':24}, {'z':-8}, {'f':0.5, 'verify':1}, {'y':3, 'z':3}]|[{'y':3, 'z':3}, {'f':0.5}, {'z':-8}, {'z':-8, 'y':24}]|[{'z':0, 'y':10}, {'z':0, 'y':0}, {'z':-8, 'y':0}, {'z':-9, 'y':3}]|[{'z':-9, 'y':3}, {'z':-8, 'y':0}, {'z':-4, 'y':0}, {'z':1, 'f':0.5, 'verify':1}, {'z':0}, {'y':10, 'z':0}]|[{'z':0, 'y':4}, {'z':0, 'y':0}, {'z':-7.3, 'y':0}, {'z':-11.2, 'y':3.5}, {'z':-13.2, 'y':8}]|[{'z':-13.2, 'y':8}, {'z':-11.2, 'y':3.5}, {'z':-7.3, 'y':0}, {'z':3, 'y':0, 'f':0.5, 'verify':1}, {'z':0, 'y':0}, {'z':0, 'y':4}]"

[gcode_macro PATH]
description: ""
# ───| Main SVG Stuffs
variable_svg_size:          "700"   # ───| SVG size (total, per plot)
variable_font_size:         "10"    # ───| font size of numbering
variable_edge_gap:          "10"    # ───| in %, area we keep empty to edge.
variable_subdivision:       "1.5"   # ───| in mm between each "step" (just for arrows rn)
# ───| Line Stuffs
variable_line_width:        "2.5"   # ───| Drawn line width
variable_arrow_size:        "6"     # ───| Size of the arrow marker
variable_arrow_opacity:     "0.9"  # ───| Opacity of arrow markers

# ───| Dot Stuffs
#variable_pickup_dot_color:  "pink"
#variable_dropoff_dot_color: "cyan"
#variable_dot_radius:        "3"
#variable_dot_stroke:        "white"
#variable_dot_stroke_width:  "1.2"
# ───
variable_debug: False
gcode:
  # ─────────| Unicode that evaluates in jinja to actual # and newline without having klipper snip it before jinja sees it |─────────
  {% set hash = '\u0023' %}
  #{% set nl = "\u0026\u0023\u0031\u0030\u003b" %}
  {% set nl = "<br>" %}

  {% set raw = params.PATH|default(printer.toolchanger.params_pickup_path ~ "|" ~  printer.toolchanger.params_dropoff_path) %}
  {% set paths = [] %} # ─| List of finished paths, will later contain an entry per path, with proper key value pair dict contents.
  #|────────────────────────────────────────────────────────────────────────────────────────|#
  # ──────| Extract the dickst and append it to list, basically cutting it up
  {% for path in raw.split("|") %} # ─| for each string, in the list of path strings
    {% set entries = [] %}
    {% set pp = namespace(cc='') %} # ─| path points cur chars
    {% for c in path %} # ─| for each char in the path string
      {% set pp.cc = pp.cc ~ c if ('{' or '}') in (pp.cc or c) else pp.cc %}
      {% set pp.cc = "" if ('{' and '}') in pp.cc and entries.append(pp.cc) is none else pp.cc %}
    {% endfor %}
    {% set path = [] %} #####| clear path string, so we can refill later as list.
    # ─| yeee we reconstruct that string, dont ask what happens when you have a typo tho!
    {% for dstr in entries %} # ─| for each dickstring ( "{'x': 1, 'y': 2}" )
      {% set parts = dstr[1:-1].split(",") %} # ─| cut to part ( "x': 1, 'y': 2" ) # ─| cut to parts "(x': 1),('y': 2)"
      {% set tmp = {} %}
      {% for item in parts %} # ─| for item: "(x': 1)"
        {% set pair = item.split(":", 1) %} # ─| cut to key value pair "(x'), ( 1)"
        {% if pair|length == 2 %}
          # ─| Detect value type
          {% set val_str = (pair[1].strip()).replace("'", "").replace('"', "") %}  # ─| " 1" -> "1"
          {% set c0 = val_str[0] if val_str|length > 0 else "" %} # fix does this cut away longer values to just first digit?
          {% set is_numberish = ("0" <= c0 <= "9") or c0 == "-" %}   # ─| yes if (-9, -8....0..2...3..9)
          {% set is_boolish = val_str|lower in ["true", "false"] %}
          {% set val = (true if val_str|lower == "true" else false) if is_boolish else val_str %}
          {% set val = val_str|float if is_numberish and "." in val_str else val_str|int if is_numberish else val_str %} # ─| int or float depending on 0, 1, 2 or 1.1, 2.3, -3.9... etc
          {% set _ = tmp.update({(pair[0].strip().replace("'", "").replace('"', "")): val}) %} # ─| update to tmp storage with proper dict: ( {'x': 1}, {'y..},{..}... )
        {% endif %}
      {% endfor %}
      {% set _ = path.append(tmp) %} #####| fill path list with results
    {% endfor %}
    # ─| shid out finished stuff for each path
    {% set _ = paths.append(path) %}  # ─|   [ [ {..}, {..}, {..} ] , [ {..}, {..}, {..} ] ]
  {% endfor %}
  {% if debug %} RESPOND TYPE=echo MSG="{"paths" ~ nl ~ paths|string}" {% endif %}

  #|────────────────────────────────────────────────────────────────────────────────────────|#
  # ─────────| Get all max and mins  |─────────
  {% set min = {} %}
  {% set max = {} %}
  {% for path in paths if paths|length > 0 %}
    {% for p in path %}
      {% for ax in p %}
        {% if ax != 'verify' and ax != 'f' %}
          {% if ax not in min or p[ax] < min[ax] %} {% set _ = min.update({ax: p[ax]}) %} {% endif %}
          {% if ax not in max or p[ax] > max[ax] %} {% set _ = max.update({ax: p[ax]}) %} {% endif %}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% else %}
    RESPOND TYPE=error MSG="{"couldnt get max min constraints!" ~ nl ~ "no path provided!" ~ nl ~ paths}
  {% endfor %}
  {% if debug %} RESPOND TYPE=echo MSG="{"max" ~ nl ~ max|string}" {% endif %}

  #|────────────────────────────────────────────────────────────────────────────────────────|#
  # ─────────| Subdivide Path  |─────────
  {% set subdivided = [] %}
  {% for path in paths %}
    {% set new_path = [] %}
    {% for i in range(path|length - 1) %}
      {% set cur = path[i] %}
      {% set nxt = path[i + 1] %}
      {% set _ = new_path.append(cur) %}
      {% set ns = namespace(max_dist=0) %}

      {% for key in cur %}
        {% if key in nxt and cur[key]|float is number and nxt[key]|float is number %}
          {% set d = (nxt[key]|float - cur[key]|float)|abs %}
          {% set ns.max_dist = d if d > ns.max_dist else ns.max_dist %}
        {% endif %}
      {% endfor %}

      {% set steps = (ns.max_dist / subdivision|float)|round(0, 'ceil')|int %}
      {% if steps > 1 %}
        {% for s in range(1, steps) %}
          {% set mid = {} %}
          {% for key in cur %}
            {% if key in nxt and cur[key]|float is number and nxt[key]|float is number %}
              {% set val = cur[key]|float + (nxt[key]|float - cur[key]|float) * (s / steps) %}
              {% set _ = mid.update({key: val}) %}
            {% endif %}
          {% endfor %}
          {% set _ = new_path.append(mid) %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    {% set _ = new_path.append(path[-1]) %}
    {% set _ = subdivided.append(new_path) %}
  {% endfor %}
  {% set paths = subdivided %}

  #|────────────────────────────────────────────────────────────────────────────────────────|#
  #|─── Plot logic ─────────────────────────────────────────────────────────────────────────|#
  # todo add rounded path 3D sim
  #|────────────────────────────────────────────────────────────────────────────────────────|#
  {% if max|length == 0 %}
    RESPOND TYPE=error MSG="{"Something is wrong with me or you, either way, not going to plot a 0 dimensional plot..." ~ nl ~ rawparams ~ nl ~ "used to be ns.dicts here?"}"
  {% elif max|length == 1 %}
    RESPOND TYPE=error MSG="{"Sorry man, cant plot a single axis:" ~ nl ~ "used to be ns.dicts here?"}"
  {% elif max|length == 2 %}
    #|────────────────────────────────────────────────────────────────────────────────────────|#
    {% set svg = {'start': None, 'defs': None, 'gridshit': None, 'foreground': None, 'plots': [], 'dots': []} %}
    #|────────────────────────────────────────────────────────────────────────────────────────|#
    #|────────────────────────────────────────────────────────────────────────────────────────|#
    # ─────────| add start/background
    {% set _ = svg.__setitem__('start', "<svg width='" ~ svg_size ~ "' height='" ~ svg_size ~ "' style='background:rgba(0, 0, 0, 0.1);'>") %}
    
    
    # ─────────| append arrow defs
    {% set arrow_half = (arrow_size|float / 2)|round %}
    {% set arrow_refx = arrow_size|float * 0.5 %}
    {% set arrow_path = "M0,0 L" ~ arrow_size ~ "," ~ arrow_half ~ " L0," ~ arrow_size ~ " Z" %}

    {% set colors = ["rgb(255, 0, 120)", "rgb(0, 220, 255)", "rgb(0, 0, 255)", "rgb(255, 0, 0)", "rgb(0, 255, 0)", "rgb(255, 255, 0)"] %}
    {% set _ = svg.__setitem__('defs', "<defs>") %}
    {% for i in range(colors|length) %}
      {% set _ = svg.__setitem__('defs', svg.defs ~
        "<marker id='arrow_" ~ i ~ "' markerWidth='" ~ arrow_size ~ "' markerHeight='" ~ arrow_size ~
        "' refX='" ~ arrow_refx|round(2) ~ "' refY='" ~ arrow_half|round(2) ~
        "' orient='auto' markerUnits='userSpaceOnUse'>" ~
        "<path d='" ~ arrow_path ~ "' fill='" ~ colors[i] ~ "' opacity='" ~ arrow_opacity ~ "' /></marker>"
      ) %}
    {% endfor %}
    {% set _ = svg.__setitem__('defs', svg.defs ~ "</defs>") %}



    # ─────────| calculate scaling  |─────────
    {% set axis_keys = max.keys()|list|sort %}
    {% set coord_x = axis_keys[0] %}# ─| define what we map
    {% set coord_y = axis_keys[1] %}# ─| to our xy image grid

    {% set span_x = max[coord_x] - min[coord_x] %}
    {% set span_y = max[coord_y] - min[coord_y] %}
    {% set span = span_x if span_x > span_y else span_y %}
    {% set scale = (svg_size|float * 0.9) / span %}
    {% set offset_x = (svg_size|float - (span_x * scale)) / 2 %}
    {% set offset_y = (svg_size|float - (span_y * scale)) / 2 %}
    {% if debug %} RESPOND TYPE=echo MSG="{"span_x: " ~ span_x ~ nl ~ "span_y: " ~ span_y ~ nl ~ "span: " ~ span ~ nl ~ "scale: " ~ scale ~ nl ~ "offset_x: " ~ offset_x ~ nl ~ "offset_y: " ~ offset_y }" {% endif %}
    
    # ─────────| axis label + background grid Drawing  |─────────
    {% for axis in ["x", "y"] %}

      {% set is_x = axis == "x" %}
      {% set min_val = min[coord_x] if is_x else min[coord_y] %}
      {% set max_val = max[coord_x] if is_x else max[coord_y] %}
      {% set offset = offset_x if is_x else offset_y %}

      {% if is_x %}
        {% set tick_start = ((0 - offset_x|float) / scale|float + min[coord_x]|float)|round(0, 'floor')|int %}
        {% set tick_end   = ((svg_size|float - offset_x|float) / scale|float + min[coord_x]|float)|round(0, 'ceil')|int %}
      {% else %}
        {% set tick_start = (max[coord_y]|float - (svg_size|float - offset_y|float) / scale|float)|round(0, 'floor')|int %}
        {% set tick_end   = (max[coord_y]|float - (0 - offset_y|float) / scale|float)|round(0, 'ceil')|int %}
      {% endif %}



      {% set axis_pos = (max[coord_y] - 0) * scale + offset_y if is_x else (0 - min[coord_x]) * scale + offset_x %}

      {% if is_x %}
        # ───| Main X-axis at y = 0
        {% set _ = svg.__setitem__('gridshit', svg.gridshit ~ "<line x1='0' y1='" ~ axis_pos|round ~ "' x2='" ~ svg_size ~ "' y2='" ~ axis_pos|round ~ "' stroke='rgba(200,200,200,0.7)' stroke-width='1.5' />") %}
        {% set _ = svg.__setitem__('gridshit', svg.gridshit ~ "<text x='" ~ (svg_size|float - 12)|round ~ "' y='" ~ (axis_pos - 12)|round ~ "' font-size='20' fill='blue' text-anchor='middle'>" ~ coord_x|upper ~ "</text>") %}
      {% else %}
        # ───| Main Y-axis at x = 0
        {% set _ = svg.__setitem__('gridshit', svg.gridshit ~ "<line x1='" ~ axis_pos|round ~ "' y1='0' x2='" ~ axis_pos|round ~ "' y2='" ~ svg_size ~ "' stroke='rgba(200,200,200,0.7)' stroke-width='1.5' />") %}
        {% set _ = svg.__setitem__('gridshit', svg.gridshit ~ "<text x='" ~ (axis_pos + 12)|round ~ "' y='12' font-size='20' fill='green' text-anchor='middle'>" ~ coord_y ~ "</text>") %}
      {% endif %}




      {% set AxisLabelGridLines = [] %}
      {% set AxisLabelNumbers = [] %}
      {% for val in range(tick_start, tick_end + 1) %}
        {% if is_x %}
          {% set pos = (val - min[coord_x]) * scale + offset_x %}
        {% else %}
          {% set pos = (max[coord_y] - val) * scale + offset_y %}
        {% endif %}

        {% set long = val % 5 == 0 %}
        {% set tick_size = 6 if long else 3 %}

        {% if is_x %}# ─────────| Grid lines
          {% if long %}
            {% set _ = AxisLabelGridLines.append("<line x1='" ~ pos ~ "' y1='0' x2='" ~ pos ~ "' y2='" ~ svg_size ~ "' stroke='rgba(255,255,255,0.1)' />") %}
          {% else %}
            {% set _ = AxisLabelGridLines.append("<line x1='" ~ pos ~ "' y1='0' x2='" ~ pos ~ "' y2='" ~ svg_size ~ "' stroke='rgba(255,255,255,0.05)' />") %}
          {% endif %}
        {% else %}
          {% if long %}
            {% set _ = AxisLabelGridLines.append("<line x1='0' y1='" ~ pos ~ "' x2='" ~ svg_size ~ "' y2='" ~ pos ~ "' stroke='rgba(255,255,255,0.1)' />") %}
          {% else %}
            {% set _ = AxisLabelGridLines.append("<line x1='0' y1='" ~ pos ~ "' x2='" ~ svg_size ~ "' y2='" ~ pos ~ "' stroke='rgba(255,255,255,0.05)' />") %}
          {% endif %}
        {% endif %}
        #
        {% if is_x %}# ─────────| Axis tick lines \/ |─────────
          {% set _ = AxisLabelGridLines.append("<line x1='" ~ pos ~ "' y1='" ~ (axis_pos - tick_size / 2)|round ~ "' x2='" ~ pos ~ "' y2='" ~ (axis_pos + tick_size / 2)|round ~ "' stroke='rgba(255,255,255,0.6)' />") %}
          {% if long %}# ─────────| Numbers \/ |─────────
            {% set _ = AxisLabelNumbers.append("<text x='" ~ pos ~ "' y='" ~ (axis_pos + 12)|round ~ "' font-size='" ~ font_size ~ "' fill='white' text-anchor='middle'>" ~ val ~ "</text>") %}
          {% endif %}
        {% else %}# ─────────| Axis tick lines \/ |─────────
          {% set _ = AxisLabelGridLines.append("<line x1='" ~ (axis_pos - tick_size / 2)|round ~ "' y1='" ~ pos ~ "' x2='" ~ (axis_pos + tick_size / 2)|round ~ "' y2='" ~ pos ~ "' stroke='rgba(255,255,255,0.6)' />") %}
          {% if long %}# ─────────| Numbers \/ |─────────
            {% set _ = AxisLabelNumbers.append("<text x='" ~ (axis_pos - 6)|round ~ "' y='" ~ (pos + 3)|round ~ "' font-size='" ~ font_size ~ "' fill='white' text-anchor='end'>" ~ val ~ "</text>") %}
          {% endif %}
        {% endif %}
      {% endfor %}
      {% set _ = svg.__setitem__('foreground', svg.foreground ~ AxisLabelNumbers|join('')) %}
      {% set _ = svg.__setitem__('gridshit', svg.gridshit ~ AxisLabelGridLines|join('')) %}
    {% endfor %}

    {% for path in paths %} # ───| for all paths
      {% set marker_id = "arrow_" ~ loop.index0 %}
      {% set lc = colors[loop.index0 % colors|length] %}
      {% set svg_block = [] %}
      {% set last = {} %}

      {% for i in range(1, path|length) %}  # ─────────|  Line Drawing  |─────────
        {% set prev = path[i-1] %}
        {% set p = path[i] %}
        {% set prev_x = prev[coord_x]|float if coord_x in prev else last[coord_x]|default(-100) %}
        {% set prev_y = prev[coord_y]|float if coord_y in prev else last[coord_y]|default(-100) %}
        {% set x = p[coord_x]|float if coord_x in p else prev_x %}
        {% set y = p[coord_y]|float if coord_y in p else prev_y %}

        {% set x1 = (prev_x - min[coord_x]) * scale + offset_x %}
        {% set y1 = (max[coord_y] - prev_y) * scale + offset_y %}
        {% set cx = (x - min[coord_x]) * scale + offset_x %}
        {% set cy = (max[coord_y] - y) * scale + offset_y %}

        {% set _ = last.update({coord_x: x, coord_y: y}) %}
        {% set _ = svg_block.append("<line x1='" ~ x1|round ~ "' y1='" ~ y1|round ~
          "' x2='" ~ cx|round ~ "' y2='" ~ cy|round ~
          "' stroke='" ~ lc ~ "' stroke-width='" ~ line_width ~
          "' marker-end='url(" ~ hash ~ marker_id ~ ")'§E§ />") %}
      {% endfor %}
      {% set _ = svg.plots.append(svg_block|join('')) %}
    {% endfor %}

    {% set display_list = [] %}
    {% for primary in range(paths|length) %}
      {% set svg_lines = [] %}

      {% set _ = svg_lines.append(svg.start) %}
      {% set _ = svg_lines.append(svg.defs) %}
      {% set _ = svg_lines.append(svg.gridshit) %}

      # First: draw all dimmed ones
      {% for i in range(paths|length) %}
        {% if i != primary %}
          {% set content = svg.plots[i] %}
          {% set _ = svg_lines.append(content|replace("§E§", " opacity='0.2'")) %}
        {% endif %}
      {% endfor %}

      # Then: draw the focused one last, on top
      {% set _ = svg_lines.append(svg.plots[primary]|replace("§E§", "")) %}


      {% set _ = svg_lines.append(svg.foreground ~ "</svg>") %}
      {% set one_svg = svg_lines|join('') %}
      {% set _ = display_list.append("<details><summary>Path " ~ (primary + 1) ~ "</summary>" ~ one_svg ~ "</details>") %}
    {% endfor %}
    RESPOND MSG="{display_list|join('')}"




  {% elif max|length == 3 %}
    RESPOND TYPE=error MSG="Whoah buddy, that's quite some axis — 3D maybe soon."
  {% elif max|length >= 4 %}
    RESPOND TYPE=error MSG="I can't even comprehend how to show a {present|length}D plot using console SVG wizardry..."
  {% endif %}







