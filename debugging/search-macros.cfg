[gcode_macro PRINT_PRINTER_PATH]
description: "prints the contents of printer.$PATH$, use FORCE=1 to print longer messages"
variable_cutoff: 80
variable_key_cutoff: 50

# Color scheme variables
variable_color_key: "primary--text text--lighten-5"
variable_color_value: "white"
variable_color_container: "warning--text text--darken-1"
variable_color_special: "success--text text--darken-1"
variable_color_text: "primary--text text--lighten-4"
variable_color_error: "error--text text--darken-1"
variable_color_hint: "secondary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_index: "info--text text--lighten-3"
variable_color_bool: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_number: "info--text text--lighten-1"
variable_color_string: "primary--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
gcode:
    {% set path_str = params.PATH|default("") %}

    {% set path_str = path_str.replace('["', '.') %}
    {% set path_str = path_str.replace("']['", '.') %}
    {% set path_str = path_str.replace("']", "") %}
    {% set path_str = path_str.replace('"]', "") %}
    {% set path_str = path_str.replace("[", ".") %}
    {% set path_str = path_str.replace("]", "") %}
    
    {% if (path_str|lower).startswith("printer.") %} {% set path_str = path_str[8:] %} {% endif %}
    {% if (path_str|lower).startswith("printer") %} {% set path_str = path_str[7:] %} {% endif %}

    {% set parts = path_str.split('.') %}
    
    {% set ns = namespace(current=printer, invalid=False, lines=[]) %}
    # Traverse each part of the path
    {% for part in parts %}
        {% if not ns.invalid %}
            {% set keys = ns.current|list %}
            {% if part in keys %}
                {% set ns.current = ns.current[part] %}
            {% else %}
                {% set part_escaped = part.replace("'", "&apos;").replace("\"", "&quot;") %}
                {% set original_path_escaped = (params.PATH|default(""))|replace("'", "&apos;")|replace("\"", "&quot;") %}
                {% set _ = ns.lines.append("<span class='" ~ color_error ~ "'>Invalid part &apos;" ~ part_escaped ~ "&apos; in path &apos;printer." ~ original_path_escaped ~ "&apos;</span>") %}
                {% set ns.invalid = True %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if not ns.invalid %}
        {% set type_str = ns.current.__class__.__name__ %}
        {% set val_str = ns.current|string %}
        # Escape path and values for HTML
        {% set path_escaped = path_str.replace("'", "&apos;").replace("\"", "&quot;") %}
        {% set val_escaped = val_str.replace("'", "&apos;").replace("\"", "&quot;") %}
        # If itâ€™s a simple type
        {% if type_str not in ('dict', 'list', 'tuple', 'set') %}
            {% set value_color = color_value %}
            {% if type_str == 'Coord' %}{% set value_color = color_special %}
            {% elif type_str == 'bool' %}{% if val_str == "True" %}{% set value_color = color_bool %}{% else %}{% set value_color = color_bool_false %}{% endif %}
            {% elif type_str in ['float', 'int'] %}{% set value_color = color_number %}
            {% elif type_str == 'str' %}{% set value_color = color_string %}
            {% elif type_str == 'NoneType' %}{% set value_color = color_none %}
            {% else %}{% set value_color = color_object %}{% endif %}
            {% set _ = ns.lines.append(
               "<span class='" ~ color_text ~ "'>Value at printer." ~ path_escaped ~ ":</span> " ~
               "<span class='" ~ value_color ~ "'>&apos;" ~ val_escaped ~ "&apos;</span> " ~
               "<span class='" ~ color_type ~ "'>(" ~ type_str ~ ")</span>"
            ) %}
        {% else %}
            # Container type (dict, list, etc.)
            {% set all_keys = ns.current|list %}
            {% if all_keys|length > 0 %}
                {% set _ = ns.lines.append(
                   "<span class='" ~ color_text ~ "'>Contents of:</span> <span class='" ~ color_key ~ "'>printer." ~ path_escaped ~ "</span>"
                ) %}
                {% if params.FORCE|default(false) in ["1","True","true"] %} {% set limited_keys = all_keys %} {% else %} {% set limited_keys = all_keys[:key_cutoff] %} {% endif %}
                {% for k in limited_keys %}
                    {% set raw_val = ns.current[k] %}
                    {% set val_type = raw_val.__class__.__name__ %}
                    {% set val_str2 = raw_val|string %}
                    {% set val_escaped2 = val_str2.replace("'", "&apos;").replace("\"", "&quot;") %}
                    {% set val_ns = namespace(trimmed=val_escaped2, truncated_chars=0) %}

                    {% if val_str2|length > cutoff and not (params.FORCE|default(false) in ["1","True","true"]) %}
                        {% set val_ns.trimmed = val_str2[:cutoff - 3] ~ "..."|replace("'", "&apos;")|replace("\"", "&quot;") %}
                        {% set val_ns.truncated_chars = val_str2|length - cutoff + 3 %}
                    {% endif %}
                    {% set prefix_color = color_key %}
                    {% set value_color = color_value %}
                    {% set type_color = color_type %}
                    {% set hint_color = color_hint %}
                    # Choose color by type
                    {% if val_type in ('dict', 'list', 'tuple', 'set') %}{% set value_color = color_container %}
                    {% elif val_type == 'Coord' %}{% set value_color = color_special %}
                    {% elif val_type == 'bool' %}{% if val_str2 == "True" %}{% set value_color = color_bool %}{% else %}{% set value_color = color_bool_false %}{% endif %}
                    {% elif val_type in ['float', 'int'] %}{% set value_color = color_number %}
                    {% elif val_type == 'str' %}{% set value_color = color_string %}
                    {% elif val_type == 'NoneType' %}{% set value_color = color_none %}
                    {% else %}{% set value_color = color_object %}{% endif %}
                    {% set k_escaped = k.replace("'", "&apos;").replace("\"", "&quot;") %}
                    {% if val_ns.trimmed != val_escaped2 %}
                        {% set _ = ns.lines.append(
                           "<span class='" ~ prefix_color ~ "'>" ~ k_escaped ~ ":</span> " ~
                           "<span class='" ~ value_color ~ "'>&apos;" ~ val_ns.trimmed ~ "&apos;</span> " ~
                           "<span class='" ~ type_color ~ "'>(" ~ val_type ~ ")</span> " ~
                           "<span class='" ~ hint_color ~ "'>(cut " ~ (val_ns.truncated_chars|string) ~ " chars)</span>"
                        ) %}
                    {% else %}
                        {% set _ = ns.lines.append(
                           "<span class='" ~ prefix_color ~ "'>" ~ k_escaped ~ ":</span> " ~
                           "<span class='" ~ value_color ~ "'>&apos;" ~ val_ns.trimmed ~ "&apos;</span> " ~
                           "<span class='" ~ type_color ~ "'>(" ~ val_type ~ ")</span>"
                        ) %}
                    {% endif %}
                    # If it's a Coord, show X/Y/Z/E
                    {% if val_type == 'Coord' and raw_val is defined %}
                        {% for axis in ['x','y','z','e'] %}
                            {% set val_axis = raw_val[axis]|default("n/a") %}
                            {% set val_axis_type = val_axis.__class__.__name__ %}
                            {% set val_axis_str = val_axis|string %}
                            {% set val_axis_escaped = val_axis_str.replace("'", "&apos;").replace("\"", "&quot;") %}
                            {% set val_color = color_value %}
                            {% if val_axis_type == 'bool' %}{% if val_axis_str == "True" %}{% set val_color = color_bool %}{% else %}{% set val_color = color_bool_false %}{% endif %}
                            {% elif val_axis_type in ['float', 'int'] %}{% set val_color = color_number %}
                            {% elif val_axis_type == 'str' %}{% set val_color = color_string %}
                            {% elif val_axis_type == 'NoneType' %}{% set val_color = color_none %}
                            {% else %}{% set val_color = color_object %}{% endif %}
                            {% set _ = ns.lines.append(
                               "<span class='" ~ color_index ~ "'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" ~ k_escaped ~ "." ~ axis ~ ":</span> " ~
                               "<span class='" ~ val_color ~ "'>" ~ val_axis_escaped ~ "</span> " ~
                               "<span class='" ~ color_type ~ "'>(" ~ val_axis_type ~ ")</span>"
                            ) %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
                {% if not (params.FORCE|default(false) in ["1","True","true"]) and all_keys|length > key_cutoff %}
                    {% set remaining = all_keys|length - key_cutoff %}
                    {% set _ = ns.lines.append("<span class='" ~ color_text ~ "'>... " ~ (remaining|string) ~ " keys. (Use FORCE=1 to print all.)</span>") %}
                {% endif %}
            {% else %}{% set _ = ns.lines.append("<span class='" ~ color_text ~ "'>printer." ~ path_escaped ~ " has no keys or contents.</span>") %}{% endif %}
        {% endif %}
    {% endif %}
    # Finally, if we have any lines to show, join them into one single response
    {% set joined_lines = ns.lines|join("<br>") %}
    {% if joined_lines %}
        RESPOND MSG="{joined_lines}"
    {% endif %}









[gcode_macro DUMP_VARIABLES_SEARCH]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    {% set out = [] %}
    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(out|join("\n"))}