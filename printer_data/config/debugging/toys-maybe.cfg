[gcode_macro _check_kinematic_limits]
gcode:
  {% set toolhead = printer.toolhead %}
  {% if params.X and (params.X|float < toolhead.axis_minimum.x or
                      params.X|float > toolhead.axis_maximum.x) %}
    {action_raise_error("X[%.3f] must be between %.3f and %.3f."
                        | format(params.X|float, toolhead.axis_minimum.x,
                                 toolhead.axis_maximum.x))}
  {% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or
                        params.Y|float > toolhead.axis_maximum.y) %}
    {action_raise_error("Y[%.3f] must be between %.3f and %.3f."
                        | format(params.Y|float, toolhead.axis_minimum.y,
                                 toolhead.axis_maximum.y))}
  {% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or
                        params.Z|float > toolhead.axis_maximum.z) %}
    {action_raise_error("Z[%.3f] must be between %.3f and %.3f."
                        | format(params.Z|float, toolhead.axis_minimum.z,
                                 toolhead.axis_maximum.z))}
  {% elif params.E and (params.E|float|abs > printer.configfile.settings[
                          "extruder"].max_extrude_only_distance) %}
    {action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."
       | format(params.E|float|abs, printer.configfile.settings[
                                      "extruder"].max_extrude_only_distance))}
  {% endif %}




  [gcode_macro _PATH_SUBDIVISION]
description: ""
variable_input: []
variable_output: []
variable_default_subdiv: 1.0
gcode:
  {% set subdivision = [0.2, params.D|default(default_subdiv)|float]|max %}
  # ───| Input decision  |─── #
  {% set paths = params.INPUT|default(input) %}
  # ───| Clear Buffers  |─── #
  SET_GCODE_VARIABLE MACRO="_PATH_SUBDIVISION" VARIABLE="output" VALUE="{[]}"
  SET_GCODE_VARIABLE MACRO="_PATH_SUBDIVISION" VARIABLE="input" VALUE="{[]}"

  #|────────────────────────────────────────────────────────────────────────────────────────|#
  {% set subdivided = [] %}
  {% for path in paths %} # ───| Subdivide Path  |─── #
    {% set new_path = [] %}
    {% for i in range(path|length - 1) %}
      {% set cur = path[i] %}
      {% set nxt = path[i + 1] %}
      {% set _ = new_path.append(cur) %}
      {% set ns = namespace(max_dist=0) %}
      {% for key in cur %}
        {% if key in nxt and cur[key]|float is number and nxt[key]|float is number %}
          {% set d = (nxt[key]|float - cur[key]|float)|abs %}
          {% set ns.max_dist = d if d > ns.max_dist else ns.max_dist %}
        {% endif %}
      {% endfor %}
      {% set steps = (ns.max_dist / subdivision|float)|round(0, 'ceil')|int %}
      {% if steps > 1 %}
        {% for s in range(1, steps) %}
          {% set mid = {} %}
          {% for key in cur %}
            {% if key in nxt and cur[key]|float is number and nxt[key]|float is number %}
              {% set val = cur[key]|float + (nxt[key]|float - cur[key]|float) * (s / steps) %}
              {% set _ = mid.update({key: val}) %}
            {% endif %}
          {% endfor %}
          {% set _ = new_path.append(mid) %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    {% set _ = new_path.append(path[-1]) %}
    {% set _ = subdivided.append(new_path) %}
  {% endfor %}
  {% set paths = subdivided %}

  # ───| Output decision  |─── #
  {% if params.OUTPUT is defined %}
    SET_GCODE_VARIABLE MACRO="{params.OUTPUT}" VARIABLE="input" VALUE="{paths}"
  {% else %}
    SET_GCODE_VARIABLE MACRO="_PATH_SUBDIVISION" VARIABLE="output" VALUE="{paths}"
  {% endif %}