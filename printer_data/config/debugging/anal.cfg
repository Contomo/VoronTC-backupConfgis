[gcode_macro REDPILL]
description: "Breadth-First Search of the printer object. Usage: BFS S=<search>°<terms> E=<exclude>°<terms>"
gcode:
    {% set S = params.S|default("")|string %}
    {% if not S %}
        {action_respond_info("BFS Usage: S=<search> [E=<exclude>]. Terms separated by '°' for AND logic.")}
    {% else %}
        {% set E = params.E|default("")|string %}
        {% set search_lc = S|lower %}
        {% set exclude_lc = E|lower %}

        {% set nl = '<br>' %}
        {% set delimiter = "°" %}

        {% set C = namespace(
            path_color      = "rgb(180,180,180)",  ; light gray
            val_color       = "rgb(255,200,50)",   ; yellow
            type_color      = "rgb(150,150,150)",  ; medium gray
            match_color     = "rgb(255,100,150)",  ; pink/magenta
            long_limit      = 120,                 ; truncate long strings
            max_depth       = 8,                   ; max search depth
            loop_limit      = 15000,               ; safety break for the main search loop
            max_results     = 400                  ; safety break on number of results
        ) %}

        {% set search_terms = [] %}
        {% for t in search_lc.split(delimiter) %}{% if t %}{% set _ = search_terms.append(t) %}{% endif %}{% endfor %}

        {% set exclude_terms = [] %}
        {% for t in exclude_lc.split(delimiter) %}{% if t %}{% set _ = exclude_terms.append(t) %}{% endif %}{% endfor %}
        {% set TERMINAL_TYPES = ['int', 'float', 'bool', 'NoneType', 'str', 'unicode', 'long'] %}

        {%- macro format_value(obj, limit) -%}
            {%- set typ_str = obj.__class__.__name__|string -%}
            {%- if obj is mapping -%}
                { "dict(" ~ obj|length ~ ")" }
            {%- elif obj is sequence and not obj is string -%}
                { "list(" ~ obj|length ~ ")" }
            {%- elif obj is string -%}
                {%- set val = obj|string|e -%}
                {%- if val|length > limit -%}
                    { "'" ~ val[:limit] ~ "...'" }
                {%- else -%}
                    { "'" ~ val ~ "'" }
                {%- endif -%}
            {%- elif obj is none -%}
                { "None" }
            {%- elif obj is boolean -%}
                { 'True' if obj else 'False' }
            {%- elif typ_str == 'GCodeTemplate' -%}
                { "GCode Template" }
            {%- else -%}
                { obj|string|e }
            {%- endif -%}
        {%- endmacro -%}

        {%- macro highlight(text, term, color) -%}
            {%- set text_lc = text|lower %}{% set term_lc = term|lower -%}
            {%- if term and term_lc in text_lc -%}
                {%- set start_idx = text_lc.find(term_lc) -%}
                {%- set term_len = term_lc|length -%}
                {%- set original_term = text[start_idx:start_idx+term_len] -%}
                { text[:start_idx] ~ "<span style='background-color:rgba(255,100,150,0.2); color:" ~ color ~ ";'>" ~ original_term ~ "</span>" ~ text[start_idx+term_len:] }
            {%- else -%}
                { text }
            {%- endif -%}
        {%- endmacro -%}

        {% set queue = namespace(data=[(printer, 'printer')]) %}
        {% set visited = namespace(paths=[]) %}
        {% set results = namespace(gcode=[], config=[], template=[], other=[], count=0) %}

        ; --- Main Search Loop ---
        {% for _ in range(C.loop_limit) %}
            {% if queue.data and results.count < C.max_results %}
                {% set task = queue.data.pop(0) %}
                {% set current_obj, current_path = task %}

                {% if current_path not in visited.paths %}
                    {% set _ = visited.paths.append(current_path) %}

                    {% for key in current_obj.__dir__() %}
                        {% if not key.startswith('_') %}
                            {% set child_obj = current_obj|attr(key) %}
                            {% set typ_str = child_obj.__class__.__name__|string %}
                            {% if not child_obj is callable or typ_str == 'GCodeTemplate' %}
                                {% set new_path = current_path ~ '.' ~ key %}
                                {% set val_str = format_value(child_obj, C.long_limit) %}
                                {% set search_haystack = (new_path ~ " = " ~ val_str ~ " (" ~ typ_str ~ ")")|lower %}

                                {% set is_excluded = namespace(val=false) %}
                                {% if exclude_terms %}{% for term in exclude_terms if not is_excluded.val %}{% if term in search_haystack %}{% set is_excluded.val = true %}{% endif %}{% endfor %}{% endif %}

                                {% if not is_excluded.val %}
                                    {% set all_found = namespace(val=true) %}
                                    {% if not search_terms %}{% set all_found.val = false %}{% endif %}
                                    {% for term in search_terms %}{% if term not in search_haystack %}{% set all_found.val = false %}{% endif %}{% endfor %}

                                    {% if all_found.val %}
                                        {% set results.count = results.count + 1 %}
                                        {% set h_path = new_path %}{% set h_val = val_str %}
                                        {% for term in search_terms %}
                                            {% set h_path = highlight(h_path, term, C.match_color) %}
                                            {% set h_val = highlight(h_val, term, C.match_color) %}
                                        {% endfor %}

                                        {%- set row -%}
                                            <div style='font-family:monospace; white-space:nowrap; padding-left:1em;'>
                                            <span style='color:{C.path_color};'>{h_path}</span> = <span style='color:{C.val_color};'>{h_val}</span> <span style='color:{C.type_color};'>({typ_str})</span>
                                            </div>
                                        {%- endset %}

                                        {% if new_path.startswith('printer.configfile.settings') %}{% set _ = results.config.append(row) %}
                                        {% elif new_path.startswith('printer.gcode.commands') %}{% set _ = results.gcode.append(row) %}
                                        {% elif typ_str == 'GCodeTemplate' %}{% set _ = results.template.append(row) %}
                                        {% else %}{% set _ = results.other.append(row) %}
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                            {% endif %}

                            {% if typ_str not in TERMINAL_TYPES and (child_obj is mapping or child_obj is sequence or not child_obj is callable) %}
                                {% if (current_path.split('.')|length) < C.max_depth and new_path not in visited.paths %}
                                    {% set _ = queue.data.append((child_obj, new_path)) %}
                                {% endif %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {% if results.count == 0 %}
            {action_respond_info("BFS: No results found for S='" ~ S ~ "' E='" ~ E ~ "'")}
        {% else %}
            {% set summary = "BFS: Found " ~ results.count ~ " results for S='" ~ S ~ "' E='" ~ E ~ "'" %}
            {% set output_sections = namespace(data=[]) %}
            {% set sections = [
                ('G-Code Commands / Help', results.gcode), ('Configuration Settings', results.config),
                ('G-Code Templates', results.template), ('All Other Results', results.other) ] %}

            {% for name, content_list in sections %}
                {% if content_list %}
                    {%- set details_block -%}
                        <details { 'open' if name != 'All Other Results' else '' }>
                            <summary style="cursor:pointer; font-weight:bold;">{name} ({content_list|length})</summary>
                            {(content_list|sort)|join('')}
                        </details>
                    {%- endset %}
                    {% set _ = output_sections.data.append(details_block) %}
                {% endif %}
            {% endfor %}
            
            {action_respond_info(summary ~ nl ~ (output_sections.data|join(nl))|replace('\n',''))}
        {% endif %}
    {% endif %}








[gcode_macro FIND_VARIABLES_MAYBE]
description: "Search for S=some_string within printer. Optional LIMIT=NN. Does not dump container contents if matched."
variable_color_path: "accent--text text--lighten-1"
variable_color_value: "primary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_bool_true: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_special: "success--text text--darken-1"
variable_color_number: "info--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
variable_color_hint: "secondary--text text--lighten-1"
gcode:
    {% set search = params.S|default("")|lower %}
    {% set limit = params.LIMIT|default(50)|int %}
    {% if not search %}
        RESPOND MSG="Please provide S=some_string"
    {% else %}
        {% set ns = namespace(lines=[], total=0, stack=[]) %}

        {% for top_key in printer %}
            {% set key_str = top_key|string %}
            {% set has_special = (" " in key_str or "'" in key_str or "\"" in key_str or "[" in key_str or "]" in key_str) %}
            {% if has_special %}
                {% set path_str = "printer['" ~ key_str|replace("'","&apos;")|replace("\"","&quot;") ~ "']" %}
            {% else %}
                {% set path_str = "printer." ~ key_str %}
            {% endif %}
            {% set val_obj = printer[top_key] %}
            {% set _ = ns.stack.append([path_str, val_obj]) %}
        {% endfor %}

        {% for i in range(100000) %}
            {% if ns.stack|length == 0 %}
                {% set _=1 %}
            {% else %}
                {% set popped = ns.stack[ns.stack|length -1] %}
                {% set ns.stack = ns.stack[:ns.stack|length -1] %}
                {% set cur_path = popped[0] %}
                {% set cur_val = popped[1] %}
                {% set cur_val_str = cur_val|string %}
                {% set match_path = search in cur_path|lower %}
                {% set match_value = search in cur_val_str|lower %}
                {% if match_path or match_value %}
                    {% set ns.total = ns.total + 1 %}
                    {% if ns.lines|length < limit %}
                        {% set val_type = cur_val.__class__.__name__ %}
                        {% set escaped_path = cur_path|replace("'","&apos;")|replace("\"","&quot;") %}
                        {% if val_type in ["dict","list","tuple","set"] %}
                            {% set line_html = "<span class='" ~ color_path ~ "'>" ~ escaped_path ~ "</span>: <span class='" ~ color_object ~ "'>(" ~ val_type ~ ")</span>" %}
                            {% set _ = ns.lines.append(line_html) %}
                        {% else %}
                            {% set val_color = color_value %}
                            {% if val_type == "bool" %}
                                {% if cur_val_str|lower == "true" %}
                                    {% set val_color = color_bool_true %}
                                {% else %}
                                    {% set val_color = color_bool_false %}
                                {% endif %}
                            {% elif val_type in ["float","int"] %}
                                {% set val_color = color_number %}
                            {% elif val_type == "NoneType" %}
                                {% set val_color = color_none %}
                            {% elif val_type == "Coord" %}
                                {% set val_color = color_special %}
                            {% endif %}
                            {% set escaped_val = cur_val_str|replace("'","&apos;")|replace("\"","&quot;") %}
                            {% set line_html = "<span class='" ~ color_path ~ "'>" ~ escaped_path ~ "</span>: " ~
                                               "<span class='" ~ val_color ~ "'>" ~ escaped_val ~ "</span> " ~
                                               "<span class='" ~ color_type ~ "'>(" ~ val_type ~ ")</span>" %}
                            {% set _ = ns.lines.append(line_html) %}
                        {% endif %}
                    {% endif %}
                {% endif %}

                {% if cur_val is mapping %}
                    {% for ck in cur_val %}
                        {% set ck_str = ck|string %}
                        {% set ck_special = (" " in ck_str or "'" in ck_str or "\"" in ck_str or "[" in ck_str or "]" in ck_str) %}
                        {% if ck_special %}
                            {% set child_path = cur_path ~ "['" ~ ck_str|replace("'","&apos;")|replace("\"","&quot;") ~ "']" %}
                        {% else %}
                            {% set child_path = cur_path ~ "." ~ ck_str %}
                        {% endif %}
                        {% set child_obj = cur_val[ck] %}
                        {% set _ = ns.stack.append([child_path, child_obj]) %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {% if ns.lines|length == 0 %}
            RESPOND MSG="No matches found for '" ~ search ~ "'."
        {% else %}
            {% set leftover = ns.total - ns.lines|length %}
            {% if leftover > 0 %}
                {% set leftover_info = "<br><span class='" ~ color_hint ~ "'>... " ~ leftover|string ~ " more matches not shown. (Use LIMIT=NN to see more)</span>" %}
            {% else %}
                {% set leftover_info = "" %}
            {% endif %}
            {% set final_output = "Found " ~ ns.total|string ~ " matches for '" ~ search ~ "'.<br>" ~ (ns.lines|join("<br>")) ~ leftover_info %}
            RESPOND MSG="{final_output}"
        {% endif %}
    {% endif %}




[gcode_macro FIND_VARIABLES]
description: "Search for S=some_string within printer. Optional LIMIT=NN to control how many lines are shown."
variable_color_path: "accent--text text--lighten-1"
variable_color_value: "primary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_bool_true: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_special: "success--text text--darken-1"
variable_color_number: "info--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
variable_color_hint: "secondary--text text--lighten-1"
gcode:
    {% set search = params.S|default("")|lower %}
    {% set limit = params.LIMIT|default(50)|int %}
    {% if not search %}
        RESPOND MSG="Please provide S=some_string"
    {% else %}
        {% set ns = namespace(lines=[], total=0, stack=[]) %}

        {% for top_key in printer %}
            {% set key_str = top_key|string %}
            {% set has_special = (" " in key_str or "'" in key_str or "\"" in key_str or "[" in key_str or "]" in key_str) %}
            {% if has_special %}
                {% set path_str = "printer['" ~ key_str|replace("'","&apos;")|replace("\"","&quot;") ~ "']" %}
            {% else %}
                {% set path_str = "printer." ~ key_str %}
            {% endif %}
            {% set val_obj = printer[top_key] %}
            {% set _ = ns.stack.append([path_str, val_obj]) %}
        {% endfor %}

        {% for i in range(100000) %}
            {% if ns.stack|length == 0 %}
                {% set _=1 %}
            {% else %}
                {% set popped = ns.stack[ns.stack|length -1] %}
                {% set ns.stack = ns.stack[:ns.stack|length -1] %}
                {% set cur_path = popped[0] %}
                {% set cur_val = popped[1] %}
                {% set cur_val_str = cur_val|string %}
                {% if search in cur_path|lower or search in cur_val_str|lower %}
                    {% set ns.total = ns.total + 1 %}
                    {% if ns.lines|length < limit %}
                        {% set val_type = cur_val.__class__.__name__ %}
                        {% set val_color = color_value %}
                        {% if val_type == "bool" %}
                            {% if cur_val_str|lower == "true" %}
                                {% set val_color = color_bool_true %}
                            {% else %}
                                {% set val_color = color_bool_false %}
                            {% endif %}
                        {% elif val_type in ["float","int"] %}
                            {% set val_color = color_number %}
                        {% elif val_type == "NoneType" %}
                            {% set val_color = color_none %}
                        {% elif val_type == "Coord" %}
                            {% set val_color = color_special %}
                        {% endif %}
                        {% set escaped_val = cur_val_str|replace("'","&apos;")|replace("\"","&quot;") %}
                        {% set escaped_path = cur_path|replace("'","&apos;")|replace("\"","&quot;") %}
                        {% set line_html = "<span class='" ~ color_path ~ "'>" ~ escaped_path ~ "</span>: " ~
                                           "<span class='" ~ val_color ~ "'>" ~ escaped_val ~ "</span> " ~
                                           "<span class='" ~ color_type ~ "'>(" ~ val_type ~ ")</span>" %}
                        {% set _ = ns.lines.append(line_html) %}
                    {% endif %}
                {% endif %}
                {% if cur_val is mapping %}
                    {% for ck in cur_val %}
                        {% set ck_str = ck|string %}
                        {% set ck_special = (" " in ck_str or "'" in ck_str or "\"" in ck_str or "[" in ck_str or "]" in ck_str) %}
                        {% if ck_special %}
                            {% set child_path = cur_path ~ "['" ~ ck_str|replace("'","&apos;")|replace("\"","&quot;") ~ "']" %}
                        {% else %}
                            {% set child_path = cur_path ~ "." ~ ck_str %}
                        {% endif %}
                        {% set child_obj = cur_val[ck] %}
                        {% set _ = ns.stack.append([child_path, child_obj]) %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {% if ns.lines|length == 0 %}
            RESPOND MSG="No matches found for '" ~ search ~ "'."
        {% else %}
            {% set leftover = ns.total - ns.lines|length %}
            {% if leftover > 0 %}
                {% set leftover_info = "<br><span class='" ~ color_hint ~ "'>... " ~ leftover|string ~ " more matches not shown. (Use LIMIT=NN to see more)</span>" %}
            {% else %}
                {% set leftover_info = "" %}
            {% endif %}
            {% set final_output = "Found " ~ ns.total|string ~ " matches for '" ~ search ~ "'.<br>" ~ (ns.lines|join("<br>")) ~ leftover_info %}
            RESPOND MSG="{final_output}"
        {% endif %}
    {% endif %}



# fix find out if  {% for child_key, child_val in base_val.items() recursive %} RECURSIVE is actully a thing



[gcode_macro TEST_MACRO_BLOCK]
variable_macro: ""
variable_macro2: ""
gcode:
    {% macro shout(x) %}
        SET_GCODE_VARIABLE MACRO=TEST_MACRO_BLOCK VARIABLE=macro2 VALUE="test"
        {x}
    {% endmacro %}
    
    {% set return = shout("HELLO") %}
    RESPOND MSG="{macro2}"
    RESPOND MSG="{macro}"
    RESPOND MSG="Macro test complete."


[gcode_macro PARAM_TEST]
description: "Test macro that prints all passed parameters, their values, and types"
gcode:
    {% set nl = '\u0026\u0023\u0031\u0030\u003b' %}
    {% set report = [] %}
    {% for k in params %}
        {% set v = params[k] %}
        {% set t = v.__class__.__name__ %}
        {% set line = k ~ ": " ~ v ~ " (" ~ t ~ ")" %}
        {% set _ = report.append(line) %}
    {% endfor %}
    {% if report|length > 0 %}
        RESPOND MSG="PARAM_TEST Results:{nl}{report|join(nl)}"
    {% else %}
        RESPOND MSG="PARAM_TEST: No parameters provided."
    {% endif %}
    RESPOND MSG="rawparams: {rawparams}"
    RESPOND MSG="params[0]: {params[0]}"

[gcode_macro SEARCH_VARS]
description: S=[sjhk]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}
        {% endif %}

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %}

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}{% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}{% set null = ns.path.append(".%s" % (childkey)) %}{% endif %}

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }
                    {% endif %}
                {% endif %}

            {% endfor %}
        {% endif %}
    {% endfor %}




[gcode_macro EXTENDED_RESPOND_SEARCH]
gcode:
  {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

  {% if params.TYPE is defined and params.MSG is defined %} # if TYPE and MSG are defined, just use the default RESPOND
      {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}
          {% set type = 'TYPE=' + params.TYPE|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'echo_no_space', 'command' or 'error'"
      {% endif %}
  {% endif %}

  {% set color = "DEFAULT" %} # default garbage value
  
  {% if params.MSG is defined and params.COLOR is defined %}
  
      {% set color = params.COLOR|lower %}

      {% if color in colors %} # valid color supplied
          {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %} # apply color to main message body
      {% else %}
        {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %} # apply color to main message body
          #RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}

  {% elif params.MSG is defined %} # no color, but yes message
      {% set msg = 'MSG="'+ params.MSG + '"'|string %}
  {% endif %}

  {% if params.PREFIX is defined and params.PREFIX_COLOR is defined %} # check if a separate color was supplied for the prefix - otherwise, fall back on the default one
  
      {% set prefixColor = params.PREFIX_COLOR | default("DEFAULT") | lower %}
  
      {% if prefixColor in colors %} # valid prefix color supplied
          {% set prefix = 'PREFIX="<span class=' + prefixColor + '--text>' + params.PREFIX + '</span>"'|string %}
      {% elif color in color %} # prefix color is invalid - fall back on overall value if possible
          {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND PREFIX_COLOR '{prefixColor}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}
      
  {% elif params.PREFIX is defined and color in colors %} # no provided prefix color - use the same color for the prefix as is used for the main message body if possible
      {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
  {% elif params.PREFIX is defined %} # no valid colors provided either for the prefix or overall but we DO have a prefix- leave it default
      {% set prefix = 'PREFIX="' + params.PREFIX + '"'|string %}
  {% else %} # no prefix provided - don't use one!
      {% set prefix = "" | string %}
  {% endif %}
  
  RESPOND {type} {prefix} {msg}



[gcode_macro DUMP_VARIABLES]
description: "Dump variables that match optional NAME/CONTENT filters."
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    {% set color_prefix = "primary" %}
    {% set color_key = "accent" %}         # for keys like printer['foo'] or ['foo'].bar #}
    {% set color_value = "accent" %}       # for numbers, strings, bools #}
    {% set color_type = "secondary" %}     # for (float), (Coord), etc #}
    {% set color_special_obj = "success" %} # for known classes like Coord, PID, etc #}

    {% set ns = namespace(matches=[]) %}

    {% for key1 in printer %}
        {% set level1 = printer[key1] %}
        {% if level1 is mapping %}
            {% for key2 in level1 %}
                {% set val = level1[key2] %}
                {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and (filter_value in val|string|lower) %}
                    {% set val_type = val.__class__.__name__|string %}
                    {% set val_str = val|string %}
                    {% set type_color = color_type %}
                    {% if val_type in ('Coord', 'PID', 'Stepper', 'Extruder') %}
                        {% set type_color = color_special_obj %}
                    {% endif %}
                    {% set line = "<span class='" ~ color_key ~ "--text'>printer['" ~ key1 ~ "']." ~ key2 ~ "</span>: <span class='" ~ color_value ~ "--text'>" ~ val_str ~ "</span> <span class='" ~ type_color ~ "--text'>(" ~ val_type ~ ")</span>" %}
                    {% set _ = ns.matches.append(line) %}
                {% endif %}
            {% endfor %}
        {% else %}
            {% set val = level1 %}
            {% if filter_name in key1|lower and filter_value in val|string|lower %}
                {% set val_type = val.__class__.__name__|string %}
                {% set val_str = val|string %}
                {% set type_color = color_type %}
                {% if val_type in ('Coord', 'PID', 'Stepper', 'Extruder') %}
                    {% set type_color = color_special_obj %}
                {% endif %}
                {% set line = "<span class='" ~ color_key ~ "--text'>printer['" ~ key1 ~ "']</span>: <span class='" ~ color_value ~ "--text'>" ~ val_str ~ "</span> <span class='" ~ type_color ~ "--text'>(" ~ val_type ~ ")</span>" %}
                {% set _ = ns.matches.append(line) %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if ns.matches|length > 0 %}
        EXTENDED_RESPOND_SEARCH PREFIX="DUMP_VARIABLES:" PREFIX_COLOR=color_prefix MSG="{ns.matches|join('\n')}" COLOR="info"
    {% else %}
        EXTENDED_RESPOND_SEARCH PREFIX="DUMP_VARIABLES:" PREFIX_COLOR=color_prefix MSG="No matching variables found." COLOR="warning"
    {% endif %}





[gcode_macro INTERACTIVE_CONSOLE_TEST]
description: "Test clickable console HTML elements"
gcode:
    {% set cmd = "G28" %}
    {% set custom_cmd = "_TC_CONFIG_SETTINGS" %}
    {% set color = "rgb(255, 0, 128)" %}

    {% set clickable1 = "<a class='command'>" ~ cmd ~ "</a>" %}
    {% set clickable2 = "<a class='command' style='color:" ~ color ~ "'>" ~ custom_cmd ~ "</a>" %}
    {% set spanlink = "<span style='color:" ~ color ~ "; text-decoration: underline; cursor: pointer;' title='Not clickable, just styled'>Fake Link</span>" %}
    {% set normal_a = "<a href='https://klipper3d.org/' style='color:lime'>Real URL</a>" %}
    {% set hover = "<span style='color:rgb(0,255,255)' title='You are hovering this'>Hover Me</span>" %}

    {% set ns = namespace(msg="") %}

    {% set line = "Test 1: Plain command link: " ~ clickable1 ~ "<br>" %}
    {% set ns.msg = ns.msg ~ line %}

    {% set line = "Test 2: Styled command link: " ~ clickable2 ~ "<br>" %}
    {% set ns.msg = ns.msg ~ line %}

    {% set line = "Test 3: Faux link (span): " ~ spanlink ~ "<br>" %}
    {% set ns.msg = ns.msg ~ line %}

    {% set line = "Test 4: External URL: " ~ normal_a ~ "<br>" %}
    {% set ns.msg = ns.msg ~ line %}

    {% set line = "Test 5: Hover tooltip: " ~ hover ~ "<br>" %}
    {% set ns.msg = ns.msg ~ line %}

    RESPOND MSG="<div style='line-height: 1.4'>{ns.msg}</div>"

[gcode_macro TEST_SCRIPT_INJECTION]
description: "Attempts to inject <script> tag into console — for testing"
gcode:
    {% set ns = namespace(msg="") %}

    {% set ns.msg = ns.msg ~ "<div><strong>Script Injection Test</strong></div>" %}
    {% set ns.msg = ns.msg ~ "<br><code>&lt;script&gt;alert('hi')&lt;/script&gt;</code> (escaped)<br>" %}
    {% set ns.msg = ns.msg ~ "<br><span>Unescaped attempt below (if not stripped):</span>" %}
    {% set ns.msg = ns.msg ~ "<br><script>alert('This should not run')</script>" %}
    {% set ns.msg = ns.msg ~ "<br><script>document.body.style.backgroundColor = 'rgb(255,0,0)'</script>" %}
    {% set ns.msg = ns.msg ~ "<br><script>console.log('SCRIPT TEST')</script>" %}

    RESPOND MSG="{ns.msg}"


[gcode_macro IMG]
gcode:
    {% set ns = namespace(msg="") %}
    {% set width=params.WIDTH|string %}
    #{% set image = "<img src='https://tenor.com/view/yakui-yakui-the-maid-nijiura-maids-gif-22874678.gif' title='woozy'>" %}
    {% set image = "<img src='https://tenor.com/view/yakui-yakui-the-maid-nijiura-maids-gif-22874678.gif' width='" ~ width ~ "' style='vertical-align:middle;' title='woozy'>" %}
    {% set tweak = "<img src='https://cdn.discordapp.com/attachments/1265167588900601938/1298543388827713546/rapidsave.com_pz9d6vwas1wd1.gif?ex=67e3a7c5&is=67e25645&hm=9d89f734392c2e455d17da182671881ca535793b18f6b9e4555a652de251e4ed&.gif' width='" ~ width ~ "' style='vertical-align:middle;' title='woozy'>" %}
    #{% set img = params.IMG|string|lower %}
    {% set ns.msg = ns.msg ~ "<div style='margin-top: 8px;'>" ~ tweak ~ "</div>" %}
    RESPOND MSG="{ns.msg}"

[gcode_macro BUT]
gcode:
    RESPOND MSG="<button data-v-3cfcc6d8='' type='button' class='btn-collapsible v-btn v-btn--icon v-btn--round theme--dark v-size--default'><span class='v-btn__content'><span data-v-3cfcc6d8='' aria-hidden='true' class='v-icon notranslate theme--dark'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' role='img' aria-hidden='true' class='v-icon__svg'><path d='M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z'></path></svg></span></span></button>"

[gcode_macro SHOW_COLOR_SWATCHES]
description: "Displays styled Vuetify color swatches with labels, tooltips, and layout tricks"
gcode:
    {% set symbol = "■" %}
    {% set shades = ["darken-4", "darken-3", "darken-2", "darken-1", "", "lighten-1", "lighten-2", "lighten-3", "lighten-4", "lighten-5"] %}
    {% set bases = ["primary", "secondary", "accent", "info", "success", "error", "warning"] %}

    {% for base in bases %}
        {% set ns = namespace(row="") %}

        {% for shade in shades %}
            {% if shade == "" %}
                {% set cls = base + "--text" %}
                {% set title = "base" %}
            {% else %}
                {% set cls = base + "--text text--" + shade %}
                {% set title = shade %}
            {% endif %}
            {% set ns.row = ns.row + "<span title='" + title + "' class='" + cls + "'>" + symbol + "</span> " %}
        {% endfor %}

        RESPOND MSG="<div style='display:flex; align-items:center; gap:8px;'>{ns.row}<span class='white--text' style='min-width:80px'>{base}</span> 🎨</div>"
    {% endfor %}


[gcode_macro SHOW_HUE_GRID]
gcode:
    {% set symbol = "█" %} # ■■ ■
    {% set rows = 18 %}
    {% set cols = 72 %}
    {% set ns = namespace(output="") %}
    {% for row in range(rows) %}
        {% set l = 1 - row / (rows - 1) %}
        {% set s = 1 %}
        {% set row_ns = namespace(line="") %}
        ##############################################griddy widdy
        {% for col in range(cols) %}
            {% set h = col / cols %}

            {% if l < 0.5 %}
                {% set q = l * (1 + s) %}
            {% else %}
                {% set q = l + s - l * s %}
            {% endif %}
            {% set p = 2 * l - q %}

            {% set tr = h + 1/3 %}
            {% set tg = h %}
            {% set tb = h - 1/3 %}
            ###############################################HUE TO RGB
            ##################### R
            {% if tr < 0 %}{% set tr = tr + 1 %}{% endif %}
            {% if tr > 1 %}{% set tr = tr - 1 %}{% endif %}
            {% if tr < 1/6 %}
                {% set r = p + (q - p) * 6 * tr %}
            {% elif tr < 1/2 %}
                {% set r = q %}
            {% elif tr < 2/3 %}
                {% set r = p + (q - p) * (2/3 - tr) * 6 %}
            {% else %}
                {% set r = p %}
            {% endif %}
            ##################### G
            {% if tg < 0 %}{% set tg = tg + 1 %}{% endif %}
            {% if tg > 1 %}{% set tg = tg - 1 %}{% endif %}
            {% if tg < 1/6 %}
                {% set g = p + (q - p) * 6 * tg %}
            {% elif tg < 1/2 %}
                {% set g = q %}
            {% elif tg < 2/3 %}
                {% set g = p + (q - p) * (2/3 - tg) * 6 %}
            {% else %}
                {% set g = p %}
            {% endif %}
            ##################### B
            {% if tb < 0 %}{% set tb = tb + 1 %}{% endif %}
            {% if tb > 1 %}{% set tb = tb - 1 %}{% endif %}
            {% if tb < 1/6 %}
                {% set b = p + (q - p) * 6 * tb %}
            {% elif tb < 1/2 %}
                {% set b = q %}
            {% elif tb < 2/3 %}
                {% set b = p + (q - p) * (2/3 - tb) * 6 %}
            {% else %}
                {% set b = p %}
            {% endif %}
            ###############################################HUE TO RGB

            {% set r255 = (r * 255)|int %}
            {% set g255 = (g * 255)|int %}
            {% set b255 = (b * 255)|int %}
            {% set color = "rgb(" + r255|string + "," + g255|string + "," + b255|string + ")" %}
            {% set span = "<span style='display:inline-block; width:8px; text-align:center; color:" + color + "' title='" + color + "'>" + symbol + "</span>" %}
            {% set row_ns.line = row_ns.line + span %}
        {% endfor %}

        {% set ns.output = ns.output + row_ns.line + "<br>" %} #brick it
    {% endfor %}

    RESPOND MSG="{ns.output}"




[gcode_macro TC_DEBUG_VIZ]
description: "HTML UI Test"
gcode:
    RESPOND MSG="<div style='display:inline-block; background:rgb(255,10,100); border-radius:6px; padding:6px;'><a class='command'><img src='https://tenor.com/view/yakui-yakui-the-maid-nijiura-maids-gif-22874678.gif' width='100' /></a></div>"
    #RESPOND MSG='</div><div class="os-content" style="padding: 0px; height: 100%; width: 100%;"></div><div data-v-1a32e3ab="" class="col console-message text--disabled" style="min-width: 0px;">action:prompt_end</div>'
    RESPOND MSG="</div></div> <!-- pretend to close console -->"
    RESPOND MSG="<div class='v-card theme--dark' style='background:#111; padding:10px; border:2px solid hotpink; border-radius:10px;'>"
    RESPOND MSG="<h3 style='color:#f0f; margin-top:0;'>💡 Injected Panel</h3>"
    RESPOND MSG="<a class='command' style='background:#0ff; color:#000; padding:6px 12px; display:inline-block; border-radius:4px;'>G28</a>"
    RESPOND MSG="<img src='https://tenor.com/view/yakui-yakui-the-maid-nijiura-maids-gif-22874678.gif' width='120' style='display:block; margin-top:10px; border-radius:6px;' />"
    RESPOND MSG="</div>"
    RESPOND MSG="<div class='consoleTable mini'><div class='row pa-0 ma-0'><div class='text-center py-3 col'>⬇️ Console resumes below ⬇️</div></div></div>"

#[gcode_macro SHOW_PROMT_BUTTON_GROUPS]
#gcode:
#    RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
#    RESPOND TYPE=command MSG="action:prompt_text <div style='padding:10px; background:&#35;1e1e1e; border-radius:8px; font-family:monospace;'><h3 style='color:&#35;0ff; margin-top:0;'>🛠️ Tool Dock Debug Mode</h3><p style='color:&#35;aaa;'>Select a tool to begin:</p><div style='display:flex; gap:10px; flex-wrap:wrap;'><a class='command' style='background:&#35;2196F3; color:&#35;fff; padding:6px 12px; border-radius:6px;'>T0</a><a class='command' style='background:&#35;4CAF50; color:&#35;fff; padding:6px 12px; border-radius:6px;'>T1</a><a class='command' style='background:&#35;FF5722; color:&#35;fff; padding:6px 12px; border-radius:6px;'>T2</a></div><hr style='margin:10px 0; border-color:&#35;444;'><p style='color:&#35;ccc;'>Fine-tune docking position:</p><div style='display:flex; gap:6px; flex-wrap:wrap;'><a class='command' style='padding:6px 10px; background:&#35;555; color:&#35;fff;'>X+</a><a class='command' style='padding:6px 10px; background:&#35;555; color:&#35;fff;'>Y+</a><a class='command' style='padding:6px 10px; background:&#35;555; color:&#35;fff;'>Z+</a><a class='command' style='padding:6px 10px; background:&#35;444; color:&#35;ccc;'>X-</a><a class='command' style='padding:6px 10px; background:&#35;444; color:&#35;ccc;'>Y-</a><a class='command' style='padding:6px 10px; background:&#35;444; color:&#35;ccc;'>Z-</a></div><hr style='margin:10px 0; border-color:&#35;444;'>
#    <p style='color:&#35;ccc;'>🖼 Image Test:</p><img src='https://tenor.com/view/yakui-yakui-the-maid-nijiura-maids-gif-22874678.gif' style='width:100%; max-width:300px; border-radius:4px;' />
#    <br><br><span style='font-size:0.9em; color:&#35;666;'>This is a UI test only. None of these buttons do anything yet 🧪</span></div>"
#    RESPOND TYPE=command MSG="action:prompt_button default|TEST"
#    RESPOND TYPE=command MSG="action:prompt_button_group_start"
#    RESPOND TYPE=command MSG="action:prompt_button primary|TEST|rgb(255,10,100)"
#    RESPOND TYPE=command MSG="action:prompt_button secondary|TEST|secondary"
#    RESPOND TYPE=command MSG="action:prompt_button_group_end"
#    RESPOND TYPE=command MSG="action:prompt_button_group_start"
#    RESPOND TYPE=command MSG="action:prompt_button info|TEST|info"
#    RESPOND TYPE=command MSG="action:prompt_button warning|TEST|warning"
#    RESPOND TYPE=command MSG="action:prompt_button error|TEST|error"
#    RESPOND TYPE=command MSG="action:prompt_button_group_end"
#    RESPOND TYPE=command MSG="action:prompt_show"





[gcode_macro DOC_DUMP]
# Do take note that these are only '.somethings()' and not '|somethings()'! those arent exposed :(
#
# valid filters (|somethings) are:
#   default, int, float, round, lower, upper, replace, join, length, count, list, last, map, select, reject
#   rejectattr, sort, dictsort, items, abs, max, min, sum, format, safe, e, escape, string, title, capitalize, trim
#   truncate, indent, batch, center, slice, unique, reverse, random, pprint, filesizeformat, wordcount, wordwrap, urlencode, urlize, xmlattr, d
#
# print(list(Environment().tests.keys()))
#     'odd', 'even', 'divisibleby', 'defined', 'undefined', 'filter', 'test', 'none', 
#     'boolean', 'false', 'true', 'integer', 'float', 'lower', 'upper', 'string', 'mapping', 
#     'number', 'sequence', 'iterable', 'callable', 'sameas', 'escaped', 'in', '==', 'eq', 
#     'equalto', '!=', 'ne', '>', 'gt', 'greaterthan', 'ge', '>=', '<', 'lt', 'lessthan', '<=', 'le'

#############################
variable_splitter_key: '§'
#############################
description: "Usage: DOC_DUMP S=foo§bar   (§ = AND, case-insensitive)"
variable_color_obj:   "rgb(0,150,255)" 
variable_color_meth:  "rgb(255,200,50)" 
variable_color_doc:   "rgb(180,180,180)" # fiddle if you want idc
variable_color_match: "rgb(255,0,100)"
gcode:
    {% set query   = params.S|default("")|string %}
    {% set terms   = query.lower().split(splitter_key) %}
    {% set include__ = params.DUNDER|default(False) %} # dunder = from down under = autstrialian (double under -> __ :P)
    {% set skipdocs = query == "" %}

    {% set types = [
        ["string",   ""], ["list",  []],  ["dictionary",  {}], # actual objects. cant think of more 
        ["tuple", ()],    ["int", 0|int], ["float", 0.0] # (casting 0 to |int cause im paranoid)
    ] %}

    # ──────────────────────────────────────────────────────────────
    # Highlight helper – returns the (possibly) highlighted string
    {% macro highlight(text, term) %}
        {% set L = term|length %}
        {% set idx = text.lower().find(term) %}
        {% set return = text[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ text[idx:idx+L] ~ "</span>" ~ text[idx+L:] if idx != -1 else text %}
        {return}
    {%- endmacro %}
    # ──────────────────────────────────────────────────────────────
    # similar but cursed cause docs use weird formatting i dunno
    {% macro format_doc(text) %}
        {% set parts = text.split('\n\n') %}
        {% set paragraphs = [] %}
        {% for p in parts %}
            {% set _ = paragraphs.append(p|replace('\n', ' ')|trim) %}
        {% endfor %}
        {paragraphs|join('<br>')}
    {%- endmacro %}

    # fill buckets[typename] -> list of HTML rows
    {% set buckets = namespace(total=0, data={}) %}
    {% for typ, obj in types %}{% set _ = buckets.data.update({typ: []}) %}{% endfor %}

    {% for typ, obj in types %}
        {% for meth in obj.__dir__() %} # meth
            {% if not (meth.startswith("__") and meth.endswith("__")) or include__ %}
                {% set fn = obj|attr(meth) %}
                {% if fn and (fn.__doc__ or skipdocs) %}
                    {% set search_docs = fn.__doc__ if not skipdocs else '' %}
                    {% set keep = namespace(ok=true) %} # the more namespaces the better because you never loose track, right?
                    {% for t in terms %}{% set keep.ok=false if t and t not in (typ ~ " " ~ meth ~ " " ~ search_docs).lower() else keep.ok %}{% endfor %}

                    {% if keep.ok %}
                        {% set buckets.total = buckets.total + 1 %}
                        # escape
                        {% set mask = namespace(meth_html = meth, doc_html = format_doc(search_docs|e)) %}
                        {% for t in terms %}
                            {% set mask.meth_html = highlight(mask.meth_html, t) %}
                            {% set mask.doc_html  = highlight(mask.doc_html,  t) %}
                        {% endfor %}
                        {% set row = "<div style='margin-left:1em'><span style='color:" ~ color_obj  ~ "'>" ~ typ
                                ~ "</span>.<span style='color:" ~ color_meth ~ "'>"  ~ mask.meth_html ~ "<br>"
                                ~ "<span style='color:" ~ color_doc  ~ "; white-space:pre-wrap; font-size:small;'>" ~ mask.doc_html
                                ~ "</span></div>" %}
                        {% set _ = buckets.data[typ].append(row) %}
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {% if buckets.total == 0 %}
        RESPOND MSG="No doc matches found for '{query}'"
    {% else %}
        {% set sections = [] %}
        {% for pair in types %}
            {% set typ = pair[0] %}
            {% if buckets.data[typ] %}
                {% set block = "<details><summary>" ~ typ ~ " (" ~ buckets.data[typ]|length|string ~ ")</summary>" ~ buckets.data[typ]|join('') ~ "</details>" %}
                {% set _ = sections.append(block) %}
            {% endif %}
        {% endfor %}
        {% set msg = "Found " ~ buckets.total|string ~ " matches for '" ~ query ~ "':" ~ sections|join('')|replace('\n', '') %}
        RESPOND MSG="{msg}"
    {% endif %}







[gcode_macro PRINT_PRINTER_PATH]
description: "prints the contents of printer.$PATH$, use FORCE=1 to print longer messages"
variable_cutoff: 80
variable_key_cutoff: 50

# Color scheme variables
variable_color_key: "primary--text text--lighten-5"
variable_color_value: "white"
variable_color_container: "warning--text text--darken-1"
variable_color_special: "success--text text--darken-1"
variable_color_text: "primary--text text--lighten-4"
variable_color_error: "error--text text--darken-1"
variable_color_hint: "secondary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_index: "info--text text--lighten-3"
variable_color_bool: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_number: "info--text text--lighten-1"
variable_color_string: "primary--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
gcode:
    {% set path_str = params.PATH|default("") %}

    {% set path_str = path_str.replace('["', '.') %}
    {% set path_str = path_str.replace("']['", '.') %}
    {% set path_str = path_str.replace("']", "") %}
    {% set path_str = path_str.replace('"]', "") %}
    {% set path_str = path_str.replace("[", ".") %}
    {% set path_str = path_str.replace("]", "") %}
    
    {% if (path_str|lower).startswith("printer.") %} {% set path_str = path_str[8:] %} {% endif %}
    {% if (path_str|lower).startswith("printer") %} {% set path_str = path_str[7:] %} {% endif %}

    {% set parts = path_str.split('.') %}
    
    {% set ns = namespace(current=printer, invalid=False, lines=[]) %}
    # Traverse each part of the path
    {% for part in parts %}
        {% if not ns.invalid %}
            {% set keys = ns.current|list %}
            {% if part in keys %}
                {% set ns.current = ns.current[part] %}
            {% else %}
                {% set part_escaped = part.replace("'", "&apos;").replace("\"", "&quot;") %}
                {% set original_path_escaped = (params.PATH|default(""))|replace("'", "&apos;")|replace("\"", "&quot;") %}
                {% set _ = ns.lines.append("<span class='" ~ color_error ~ "'>Invalid part &apos;" ~ part_escaped ~ "&apos; in path &apos;printer." ~ original_path_escaped ~ "&apos;</span>") %}
                {% set ns.invalid = True %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if not ns.invalid %}
        {% set type_str = ns.current.__class__.__name__ %}
        {% set val_str = ns.current|string %}
        # Escape path and values for HTML
        {% set path_escaped = path_str.replace("'", "&apos;").replace("\"", "&quot;") %}
        {% set val_escaped = val_str.replace("'", "&apos;").replace("\"", "&quot;") %}
        # If it’s a simple type
        {% if type_str not in ('dict', 'list', 'tuple', 'set') %}
            {% set value_color = color_value %}
            {% if type_str == 'Coord' %}{% set value_color = color_special %}
            {% elif type_str == 'bool' %}{% if val_str == "True" %}{% set value_color = color_bool %}{% else %}{% set value_color = color_bool_false %}{% endif %}
            {% elif type_str in ['float', 'int'] %}{% set value_color = color_number %}
            {% elif type_str == 'str' %}{% set value_color = color_string %}
            {% elif type_str == 'NoneType' %}{% set value_color = color_none %}
            {% else %}{% set value_color = color_object %}{% endif %}
            {% set _ = ns.lines.append(
               "<span class='" ~ color_text ~ "'>Value at printer." ~ path_escaped ~ ":</span> " ~
               "<span class='" ~ value_color ~ "'>&apos;" ~ val_escaped ~ "&apos;</span> " ~
               "<span class='" ~ color_type ~ "'>(" ~ type_str ~ ")</span>"
            ) %}
        {% else %}
            # Container type (dict, list, etc.)
            {% set all_keys = ns.current|list %}
            {% if all_keys|length > 0 %}
                {% set _ = ns.lines.append(
                   "<span class='" ~ color_text ~ "'>Contents of:</span> <span class='" ~ color_key ~ "'>printer." ~ path_escaped ~ "</span>"
                ) %}
                {% if params.FORCE|default(false) in ["1","True","true"] %} {% set limited_keys = all_keys %} {% else %} {% set limited_keys = all_keys[:key_cutoff] %} {% endif %}
                {% for k in limited_keys %}
                    {% set raw_val = ns.current[k] %}
                    {% set val_type = raw_val.__class__.__name__ %}
                    {% set val_str2 = raw_val|string %}
                    {% set val_escaped2 = val_str2.replace("'", "&apos;").replace("\"", "&quot;") %}
                    {% set val_ns = namespace(trimmed=val_escaped2, truncated_chars=0) %}

                    {% if val_str2|length > cutoff and not (params.FORCE|default(false) in ["1","True","true"]) %}
                        {% set val_ns.trimmed = val_str2[:cutoff - 3] ~ "..."|replace("'", "&apos;")|replace("\"", "&quot;") %}
                        {% set val_ns.truncated_chars = val_str2|length - cutoff + 3 %}
                    {% endif %}
                    {% set prefix_color = color_key %}
                    {% set value_color = color_value %}
                    {% set type_color = color_type %}
                    {% set hint_color = color_hint %}
                    # Choose color by type
                    {% if val_type in ('dict', 'list', 'tuple', 'set') %}{% set value_color = color_container %}
                    {% elif val_type == 'Coord' %}{% set value_color = color_special %}
                    {% elif val_type == 'bool' %}{% if val_str2 == "True" %}{% set value_color = color_bool %}{% else %}{% set value_color = color_bool_false %}{% endif %}
                    {% elif val_type in ['float', 'int'] %}{% set value_color = color_number %}
                    {% elif val_type == 'str' %}{% set value_color = color_string %}
                    {% elif val_type == 'NoneType' %}{% set value_color = color_none %}
                    {% else %}{% set value_color = color_object %}{% endif %}
                    {% set k_escaped = k.replace("'", "&apos;").replace("\"", "&quot;") %}
                    {% if val_ns.trimmed != val_escaped2 %}
                        {% set _ = ns.lines.append(
                           "<span class='" ~ prefix_color ~ "'>" ~ k_escaped ~ ":</span> " ~
                           "<span class='" ~ value_color ~ "'>&apos;" ~ val_ns.trimmed ~ "&apos;</span> " ~
                           "<span class='" ~ type_color ~ "'>(" ~ val_type ~ ")</span> " ~
                           "<span class='" ~ hint_color ~ "'>(cut " ~ (val_ns.truncated_chars|string) ~ " chars)</span>"
                        ) %}
                    {% else %}
                        {% set _ = ns.lines.append(
                           "<span class='" ~ prefix_color ~ "'>" ~ k_escaped ~ ":</span> " ~
                           "<span class='" ~ value_color ~ "'>&apos;" ~ val_ns.trimmed ~ "&apos;</span> " ~
                           "<span class='" ~ type_color ~ "'>(" ~ val_type ~ ")</span>"
                        ) %}
                    {% endif %}
                    # If it's a Coord, show X/Y/Z/E
                    {% if val_type == 'Coord' and raw_val is defined %}
                        {% for axis in ['x','y','z','e'] %}
                            {% set val_axis = raw_val[axis]|default("n/a") %}
                            {% set val_axis_type = val_axis.__class__.__name__ %}
                            {% set val_axis_str = val_axis|string %}
                            {% set val_axis_escaped = val_axis_str.replace("'", "&apos;").replace("\"", "&quot;") %}
                            {% set val_color = color_value %}
                            {% if val_axis_type == 'bool' %}{% if val_axis_str == "True" %}{% set val_color = color_bool %}{% else %}{% set val_color = color_bool_false %}{% endif %}
                            {% elif val_axis_type in ['float', 'int'] %}{% set val_color = color_number %}
                            {% elif val_axis_type == 'str' %}{% set val_color = color_string %}
                            {% elif val_axis_type == 'NoneType' %}{% set val_color = color_none %}
                            {% else %}{% set val_color = color_object %}{% endif %}
                            {% set _ = ns.lines.append(
                               "<span class='" ~ color_index ~ "'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" ~ k_escaped ~ "." ~ axis ~ ":</span> " ~
                               "<span class='" ~ val_color ~ "'>" ~ val_axis_escaped ~ "</span> " ~
                               "<span class='" ~ color_type ~ "'>(" ~ val_axis_type ~ ")</span>"
                            ) %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
                {% if not (params.FORCE|default(false) in ["1","True","true"]) and all_keys|length > key_cutoff %}
                    {% set remaining = all_keys|length - key_cutoff %}
                    {% set _ = ns.lines.append("<span class='" ~ color_text ~ "'>... " ~ (remaining|string) ~ " keys. (Use FORCE=1 to print all.)</span>") %}
                {% endif %}
            {% else %}{% set _ = ns.lines.append("<span class='" ~ color_text ~ "'>printer." ~ path_escaped ~ " has no keys or contents.</span>") %}{% endif %}
        {% endif %}
    {% endif %}
    # Finally, if we have any lines to show, join them into one single response
    {% set joined_lines = ns.lines|join("<br>") %}
    {% if joined_lines %}
        RESPOND MSG="{joined_lines}"
    {% endif %}









[gcode_macro DUMP_VARIABLES_SEARCH]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    {% set out = [] %}
    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(out|join("\n"))}