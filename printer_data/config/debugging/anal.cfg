[gcode_macro REDPILL]
description: "Breadth-First Search of the printer object. Usage: BFS S=<search>째<terms> E=<exclude>째<terms>"
gcode:
    {% set S = params.S|default("")|string %}
    {% if not S %}
        {action_respond_info("BFS Usage: S=<search> [E=<exclude>]. Terms separated by '째' for AND logic.")}
    {% else %}
        {% set E = params.E|default("")|string %}
        {% set search_lc = S|lower %}
        {% set exclude_lc = E|lower %}

        {% set nl = '<br>' %}
        {% set delimiter = "째" %}

        {% set C = namespace(
            path_color      = "rgb(180,180,180)",  ; light gray
            val_color       = "rgb(255,200,50)",   ; yellow
            type_color      = "rgb(150,150,150)",  ; medium gray
            match_color     = "rgb(255,100,150)",  ; pink/magenta
            long_limit      = 120,                 ; truncate long strings
            max_depth       = 8,                   ; max search depth
            loop_limit      = 15000,               ; safety break for the main search loop
            max_results     = 400                  ; safety break on number of results
        ) %}

        {% set search_terms = [] %}
        {% for t in search_lc.split(delimiter) %}{% if t %}{% set _ = search_terms.append(t) %}{% endif %}{% endfor %}

        {% set exclude_terms = [] %}
        {% for t in exclude_lc.split(delimiter) %}{% if t %}{% set _ = exclude_terms.append(t) %}{% endif %}{% endfor %}
        {% set TERMINAL_TYPES = ['int', 'float', 'bool', 'NoneType', 'str', 'unicode', 'long'] %}

        {%- macro format_value(obj, limit) -%}
            {%- set typ_str = obj.__class__.__name__|string -%}
            {%- if obj is mapping -%}
                { "dict(" ~ obj|length ~ ")" }
            {%- elif obj is sequence and not obj is string -%}
                { "list(" ~ obj|length ~ ")" }
            {%- elif obj is string -%}
                {%- set val = obj|string|e -%}
                {%- if val|length > limit -%}
                    { "'" ~ val[:limit] ~ "...'" }
                {%- else -%}
                    { "'" ~ val ~ "'" }
                {%- endif -%}
            {%- elif obj is none -%}
                { "None" }
            {%- elif obj is boolean -%}
                { 'True' if obj else 'False' }
            {%- elif typ_str == 'GCodeTemplate' -%}
                { "GCode Template" }
            {%- else -%}
                { obj|string|e }
            {%- endif -%}
        {%- endmacro -%}

        {%- macro highlight(text, term, color) -%}
            {%- set text_lc = text|lower %}{% set term_lc = term|lower -%}
            {%- if term and term_lc in text_lc -%}
                {%- set start_idx = text_lc.find(term_lc) -%}
                {%- set term_len = term_lc|length -%}
                {%- set original_term = text[start_idx:start_idx+term_len] -%}
                { text[:start_idx] ~ "<span style='background-color:rgba(255,100,150,0.2); color:" ~ color ~ ";'>" ~ original_term ~ "</span>" ~ text[start_idx+term_len:] }
            {%- else -%}
                { text }
            {%- endif -%}
        {%- endmacro -%}

        {% set queue = namespace(data=[(printer, 'printer')]) %}
        {% set visited = namespace(paths=[]) %}
        {% set results = namespace(gcode=[], config=[], template=[], other=[], count=0) %}

        ; --- Main Search Loop ---
        {% for _ in range(C.loop_limit) %}
            {% if queue.data and results.count < C.max_results %}
                {% set task = queue.data.pop(0) %}
                {% set current_obj, current_path = task %}

                {% if current_path not in visited.paths %}
                    {% set _ = visited.paths.append(current_path) %}

                    {% for key in current_obj.__dir__() %}
                        {% if not key.startswith('_') %}
                            {% set child_obj = current_obj|attr(key) %}
                            {% set typ_str = child_obj.__class__.__name__|string %}
                            {% if not child_obj is callable or typ_str == 'GCodeTemplate' %}
                                {% set new_path = current_path ~ '.' ~ key %}
                                {% set val_str = format_value(child_obj, C.long_limit) %}
                                {% set search_haystack = (new_path ~ " = " ~ val_str ~ " (" ~ typ_str ~ ")")|lower %}

                                {% set is_excluded = namespace(val=false) %}
                                {% if exclude_terms %}{% for term in exclude_terms if not is_excluded.val %}{% if term in search_haystack %}{% set is_excluded.val = true %}{% endif %}{% endfor %}{% endif %}

                                {% if not is_excluded.val %}
                                    {% set all_found = namespace(val=true) %}
                                    {% if not search_terms %}{% set all_found.val = false %}{% endif %}
                                    {% for term in search_terms %}{% if term not in search_haystack %}{% set all_found.val = false %}{% endif %}{% endfor %}

                                    {% if all_found.val %}
                                        {% set results.count = results.count + 1 %}
                                        {% set h_path = new_path %}{% set h_val = val_str %}
                                        {% for term in search_terms %}
                                            {% set h_path = highlight(h_path, term, C.match_color) %}
                                            {% set h_val = highlight(h_val, term, C.match_color) %}
                                        {% endfor %}

                                        {%- set row -%}
                                            <div style='font-family:monospace; white-space:nowrap; padding-left:1em;'>
                                            <span style='color:{C.path_color};'>{h_path}</span> = <span style='color:{C.val_color};'>{h_val}</span> <span style='color:{C.type_color};'>({typ_str})</span>
                                            </div>
                                        {%- endset %}

                                        {% if new_path.startswith('printer.configfile.settings') %}{% set _ = results.config.append(row) %}
                                        {% elif new_path.startswith('printer.gcode.commands') %}{% set _ = results.gcode.append(row) %}
                                        {% elif typ_str == 'GCodeTemplate' %}{% set _ = results.template.append(row) %}
                                        {% else %}{% set _ = results.other.append(row) %}
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                            {% endif %}

                            {% if typ_str not in TERMINAL_TYPES and (child_obj is mapping or child_obj is sequence or not child_obj is callable) %}
                                {% if (current_path.split('.')|length) < C.max_depth and new_path not in visited.paths %}
                                    {% set _ = queue.data.append((child_obj, new_path)) %}
                                {% endif %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {% if results.count == 0 %}
            {action_respond_info("BFS: No results found for S='" ~ S ~ "' E='" ~ E ~ "'")}
        {% else %}
            {% set summary = "BFS: Found " ~ results.count ~ " results for S='" ~ S ~ "' E='" ~ E ~ "'" %}
            {% set output_sections = namespace(data=[]) %}
            {% set sections = [
                ('G-Code Commands / Help', results.gcode), ('Configuration Settings', results.config),
                ('G-Code Templates', results.template), ('All Other Results', results.other) ] %}

            {% for name, content_list in sections %}
                {% if content_list %}
                    {%- set details_block -%}
                        <details { 'open' if name != 'All Other Results' else '' }>
                            <summary style="cursor:pointer; font-weight:bold;">{name} ({content_list|length})</summary>
                            {(content_list|sort)|join('')}
                        </details>
                    {%- endset %}
                    {% set _ = output_sections.data.append(details_block) %}
                {% endif %}
            {% endfor %}
            
            {action_respond_info(summary ~ nl ~ (output_sections.data|join(nl))|replace('\n',''))}
        {% endif %}
    {% endif %}















