## user editable, adjust to your purge macro fetishes.
# user editable, define bucket position. bucket safe z ensures no crashing into stuff, or bucket edges. raise if you dive nozzle deeper into bucket.
[gcode_macro _PURGE]
variable_purge_feed: 500
variable_bucket_x: 350
variable_bucket_y: -6
variable_bucket_z: 5
variable_bucket_z_safe: 5
variable_bucket_squeegy_breaker_z_absolute: 4.5
variable_bucket_squeegy_breaker_move_y_relative: 23
variable_bucket_squeegy_breakoff_feedrate: 10000
variable_purge_temp: 225
variable_purge_length: 50
variable_purge_length_while_printing: 10
gcode:
  {% if printer.tool_probe_endstop.active_tool_number|int != -1 %}
    {% set movefeedrate = printer.toolchanger.params_fast_speed | float %}
    {% set feed = params.FEEDRATE|float if params.FEEDRATE is defined else purge_feed|float %}
    {% set length = params.LENGTH|float if params.LENGTH is defined else purge_length|float %}
    {% set purge_len_half = length / 2 %}
    M83
    G1 E{purge_len_half} F{feed}
    M104 S0
    G1 E{purge_len_half} F{feed}
    G1 E-0.5 F{feed * 4}
    M400
    M82

    # Break off chip
    {% set homing = printer['gcode_move'].homing_origin %}
    {% set min_y = printer.configfile.config["stepper_y"]["position_min"]|float + 0.1 - homing.y|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float - 0.1 - homing.y|float %}
    {% if bucket_y|float < min_y %}{% set clamped_y = min_y %}
    {% elif bucket_y|float > max_y %}{% set clamped_y = max_y %}
    {% else %}{% set clamped_y = bucket_y|float %}
    {% endif %}
    G90
    G0 Z{bucket_squeegy_breaker_z_absolute} F{bucket_squeegy_breakoff_feedrate}
    G91
    G0 Y{bucket_squeegy_breaker_move_y_relative} F{bucket_squeegy_breakoff_feedrate}
    G90
    G0 Z{bucket_z} F{movefeedrate}
    G0 Y{clamped_y} F{movefeedrate}
  {% endif %}
         

[gcode_macro MOVE_OVER_BUCKET]
description: Safely moves over the tool bucket location, clamping X/Y within limits
gcode:
  {% if printer.tool_probe_endstop.active_tool_number|int != -1 %} # if theres no tool attatched. makes sense when you abort your T macros on failed change. to not run this if it failed.
    SAVE_GCODE_STATE NAME=before_bucket # we may be printing after all

    {% set feedrate = printer.toolchanger.params_fast_speed | float %}
    {% set cur_z = printer.toolhead.position[2] | float %}
    {% set var_macro = printer["gcode_macro _PURGE"] %}

    # clamp the moves to within safe limits, respecting offsets yada yada
    {% set homing = printer['gcode_move'].homing_origin %}
    {% set min_x = printer.configfile.config["stepper_x"]["position_min"] | float + 0.05 - homing.x|float %}
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"] | float - 0.05 - homing.x|float %}
    {% set min_y = printer.configfile.config["stepper_y"]["position_min"] | float + 0.05 - homing.y|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"] | float - 0.05 - homing.y|float %}
    {% if var_macro.bucket_x|float < min_x %}{% set clamped_x = min_x %}{% elif var_macro.bucket_x|float > max_x %}{% set clamped_x = max_x %}{% else %}{% set clamped_x = var_macro.bucket_x|float %}{% endif %}
    {% if var_macro.bucket_y|float < min_y %}{% set clamped_y = min_y %}{% elif var_macro.bucket_y|float > max_y %}{% set clamped_y = max_y %}{% else %}{% set clamped_y = var_macro.bucket_y|float %}{% endif %}
    {% set safe_z = var_macro.bucket_z|float + var_macro.bucket_z_safe|float %}
    # why? your bucket may read over one of the extremes. setting the actual position (it couldnt reach) allows us to always get the closest to that no matter what you change in config.

    #{% if bucket_x != clamped_x or bucket_y != clamped_y %}RESPOND MSG="<span style='color:red'>⚠️ Clamped bucket move: X={clamped_x} Y={clamped_y}</span>"{% endif %}

    {% if safe_z > cur_z or safe_z + 20 < cur_z %} ROUNDED_G0 Z={safe_z} D=20 F={feedrate} {% endif %} # its a bucket. move over the "edge"
    ROUNDED_G0 X={clamped_x} D=100 F={feedrate} # move over bucket
    ROUNDED_G0 Y={clamped_y} D=0 F={feedrate}
    G0 Z{var_macro.bucket_z} F{feedrate//2} # move into bucket

    RESTORE_GCODE_STATE NAME=before_bucket MOVE=0
  {% else %}
    RESPOND TYPE=error MSG="No active tool selected – cannot move over bucket."
  {% endif %}

[gcode_macro PURGE_TOOL]
description: Purges specified tool(s). If no TOOL parameter is provided, purges the currently active tool.
     PURGE_TOOL (purges active tool)
     PURGE_TOOL TOOL=3,1,6 (purges 3,1,6 starting with whichever is already equipped. if none of those are, purges in the order given.)
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    _PURGE_TOOL {rawparams}

[gcode_macro _PURGE_TOOL]
gcode:
    # Ensure printer is homed.
    {% set current_z = printer.toolhead.position[2] | float %}
    {% set var_macro = printer["gcode_macro _PURGE"] %}
    # Report detected active tool (from tool_probe_endstop)
    RESPOND MSG="detected_tool_number: {printer.tool_probe_endstop.active_tool_number}"
    SAVE_GCODE_STATE NAME=before_purge
    # Calculate bucket clearance (bucket_z from MOVE_OVER_BUCKET plus 5)
    {% set bucket_above_z = var_macro.bucket_z | float + var_macro.bucket_z_safe | float %} # bucket above z is our safety moving z. as defauöt, set this to this. (minimum safety requierd by bucket)
    {% if bucket_above_z <= printer.toolhead.position[2] | float + var_macro.bucket_z_safe | float %} ################## check where we are in Z, if we are higher than the bucket height + bucket safety margin, there is likely something on the build plate we would not like to rip through.
        {% set bucket_above_z = printer.toolhead.position[2] | float + var_macro.bucket_z_safe | float %} # if the minimum safety is below the current Z + safety, set te new safety height required to that.
        #TODO#TODO#TODO#TODO#---IMPLEMENT A WAY TO CHECK IF THE Z HEIGHT IS TOO HIGH TO BE SENSIBLE, IF MACRO IS CALLED AT Z200+ AND YOUR DOCKS ARE IN THE WAY, IT WILL CRASH INTO DOCKS---#TODO#TODO#TODO#TODO#
        #TODO#TODO#TODO#TODO#---EVEN BETTER => IMPLEMENT A MACRO GCODE "SAFE_G0" WHICH HAS ACCESS TO TOOL RACK COORDS, AND TOOL HEAD SIZE, CHECKING IF COLLISIONS WOULD OCCUR BETWEEN THE SHAPES---#TODO#TODO#TODO#TODO#
    {% endif %}
    RESPOND MSG="bucket_above_z {bucket_above_z}"
    
    # Get purge temperature from macro variable
    {% set purge_temp = var_macro.purge_temp | float %}
    # Determine printing state
    {% set printing = printer.idle_timeout.state == "Printing" %} # printing true if printing   
    {% set purge_len = var_macro.purge_length_while_printing|float if printing else var_macro.purge_length|float %} # set print or no print purge len

    # Build the list of requested tools.
    {% if params.TOOL is defined and params.TOOL != "" %}
        {% set tool_param = params.TOOL | string %}
        {% set requested_tools = tool_param.split(",") %}
    {% else %}
        {% if printer.tool_probe_endstop.active_tool_number == -1 %}
            RESPOND MSG="No active tool detected. Aborting purge."
            RESTORE_GCODE_STATE NAME=before_purge MOVE=0
            M117 Purge aborted.
        {% else %}
            {% set requested_tools = [(printer.tool_probe_endstop.active_tool_number | string)] %}
        {% endif %}
    {% endif %}
    # Get the currently active tool as a string.
    {% set active_tool = printer.tool_probe_endstop.active_tool_number | string %}
    # Reorder requested_tools so that if active_tool is in the list, it comes first.
    {% if active_tool in requested_tools %}
        #RESPOND MSG="DEBUG: active tool is in requested tools"
        {% set ns = namespace(tools_to_process=[active_tool]) %}
        #RESPOND MSG="DEBUG: tool { active_tool } added to sorted list"
        {% for tool in requested_tools %}
            {% if tool != active_tool %}
                #RESPOND MSG="DEBUG: tool { tool } added to sorted list"
                {% set ns.tools_to_process = ns.tools_to_process + [tool] %}
            {% endif %}
        {% endfor %}
        {% set tools_to_process = ns.tools_to_process %}
    {% else %}
        {% set tools_to_process = requested_tools %}
    {% endif %}
    {% set ns = namespace(temps=[]) %}  # its okay to destroy old namespace, variable is now saved in "tools_to_process"
    #{% if printing %}
        {% for tool in tools_to_process %}
            {% set toolname = printer.toolchanger.tool_names[tool|int] %}
            {% set extruder = printer[toolname].extruder %}
            {% set temp = printer[extruder].target|default(0.0)|float %}
            {% set ns.temps = ns.temps + [temp] %}
        {% endfor %}

    #{% endif %}
    {% set prev_temps = ns.temps %}  # save outside of namespace again
    RESPOND MSG="Tools to process: {tools_to_process}"
    {% set current_tool = active_tool %}
    ################################################## Actual purging stuff happening here ##################################################
    {% for tool in tools_to_process %}
        RESPOND MSG="Processing tool T{tool}"
        M104 S{purge_temp} T{tool}
        {% if loop.index < (tools_to_process | length) %}
            {% set next_tool = tools_to_process[loop.index] %}
            M104 S{purge_temp - 50} T{next_tool}
        {% endif %}
        {% if tool != current_tool %}
            M104 S0 T{tool}
            T{tool}
            M104 S{purge_temp} T{tool}
        {% endif %}
        MOVE_OVER_BUCKET
        M109 S{purge_temp} T{tool}
        _PURGE LENGTH={purge_len}
        ################################################## Restore old temps n shizzle ##################################################
        {% if not printing %}
            M104 S0 T{tool}
        {% else %}
            M104 S{prev_temps[loop.index0]|int - 50 if prev_temps[loop.index0]|int - 50 > 0 else 0} T{tool}  # Restore temps to the old temps used while printing -50 to prevent ooze (and clamp to 0 if 0)
        {% endif %}
        {% set current_tool = tool %}
        G0 Z{bucket_above_z} # raise Z by a tad to the save over bucket value.
    {% endfor %}
    {% if printing %}  # if we are printing
        {% for tool in tools_to_process %}
           M104 S{prev_temps[loop.index0]|int} T{tool}  # Restore temps to all the tools now fully, since most will be in the docks resting on the pads.
        {% endfor %}
        {% if active_tool in requested_tools %}  # if we were printing at the time, restore the tool that was already docked (to continue printing)
            T{active_tool}
            # this should automatically wait for this tool to heat up before it's picked up. Once this finishes, it's at temp ready for printing.
            #M109 S{prev_temps[0]} T{active_tool}  #if this doesnt happen, M109 with index 0 because we always move that tool first
            RESTORE_GCODE_STATE NAME=before_purge MOVE=0  # restore the position and move to the place that extruder was at prior, to continue printing.
        {% endif %}
    {% else %}  # if it's not printing, simply go to the middle of the bed with whatever we have hooked up right now.
        {% set feed = printer.toolchanger.params_fast_speed | float %}
        G0 X{printer.configfile.config.stepper_x.position_max | float / 2} Y{printer.configfile.config.stepper_y.position_max | float / 2} F{feed}
        RESTORE_GCODE_STATE NAME=before_purge MOVE=0
    {% endif %}


