[gcode_macro PRINT_START]
gcode:
  # ---< settings from macro settings
  {% set p            = printer %}
  {% set tcs          = p['gcode_macro _toolchanger_settings'] %}
  {% set pstrts       = tcs.get('print_start', {}) %}
  {% set tcs_clean    = tcs.get('clean_nozzle_macro', {}) %}
  {% set clean_name   = tcs_clean.get('macro', '') %}
  # ---< toolchanger shorts
  {% set tc           = p.toolchanger %}
  {% set ctn          = tc.tool_number %}
  {% set actn         = p.tool_probe_endstop.active_tool_number|int %}
  {% set init_tn      = (params.get('INITIAL_TOOL', params.get('TOOL', actn)|string))|replace('T', '')|int %}
  {% set t_temp_args  = [] %}
  {% set tns_used     = [] %}

  _UNIFIED_RESPOND MSG="{'?t?pPRINT_START ?t?s5?m' ~ rawparams}"

  # ---< quick macro to makes things down the line cleaner.
  {% macro temp_p(n) -%}{'T' ~ n|string ~ '_TEMP'}{%- endmacro %}
  
  # ---<  build list of tools
  {% for tn in tc.tool_numbers if temp_p(tn) in params %}
      {% set _ = t_temp_args.append(temp_p(tn) ~ '=' ~ params[temp_p(tn)]) %}
      {% set _ = tns_used.append(tn) %}
  {% endfor %}

  # ---< init if not inited
  {'INITIALIZE_TOOLCHANGER' if p.toolchanger.status|lower != "ready" else ''}
  {% if ctn != actn or actn == -1 %}
    RESPOND TYPE=error MSG="toolchangers tool ({ctn}) is not tool probe endstops active ({actn}). Desynced, please reinitialize."
  {% endif %}
  #CLEAR_PAUSE
  # ---< if we have a tool equipped go on
  {% if actn != -1 %}
    STOP_TOOL_PROBE_CRASH_DETECTION

    # ---< home if not homed.
    {'G28' if "xyz" not in p.toolhead.homed_axes else ''}

    {'M140 S' ~ params.BED_TEMP if 'BED_TEMP' in params else ''} # start heating bed.
    
    # ---< start heating all
    HEAT_TOOLS {'OFFSET=-40 ' ~ t_temp_args|join(' ')}

    # ---< find tool offsets of all used, if its > 1
    {'TC_FIND_TOOL_OFFSETS T=' ~ tns_used|join(',') if tns_used|length > 1 and pstrts.get('calibrate_tools_at_start') else ''}

    # ---< start part cooling fan to blow hot air around if temp > 230 (assume its abs or asa)
    {'M106 S100' if params.TOOL_TEMP|int > 230 else ''}

    # ---< Heat all that arent initial tool
    HEAT_TOOLS {t_temp_args|reject('equalto', temp_p(init_tn))|join(' ')} # starts heating all but initial

    # ---< clean at macro brush if we have
    {clean_name ~ ' TEMP=' ~ (params.TOOL_TEMP|int - 30) if clean_name else ''}

    # ---< move to center of bed, lower a little, and blow hot air around.
    _MOVE_TO_CENTER Z=5

    # ---< wait for tool to be at or below 150°C
    M109 S150 

    # ---< wait for bed temp
    M190 S{params.BED_TEMP} 

    # ---< G32 if we have, if not homo regular
    {'G28' if 'gcode_macro G32' not in p else 'G32'}

    # ---< heat up all the tools for prime lines
    HEAT_TOOLS {t_temp_args|join(' ') ~ ' MODE=heating'} # waits for all to have a target

    # ---< Prime lines if enabled.
    {% if pstrts.get('prime_tools_at_start') %} 
      PRIME_LINES INITIAL_TOOL={init_tn|string} 
      _MOVE_TO_CENTER Z=10
    {% endif %}

    # ---< select initial tool if not already selected
    T{init_tn} {' X=' ~ tcs_clean.x_pos_var|string if 'x_pos_var' in tcs_clean}{' Y=' ~ tcs_clean.y_pos_var|string if 'y_pos_var' in tcs_clean}{' Z=' ~ (tcs_clean.z_pos_var|float + 3)|string if 'z_pos_var' in tcs_clean}

    # ---< cool tool if it isnt used in the print.
    {('M104 S0 T' ~ actn) if actn not in tns_used else ''}

    # ---< wait for final heat.
    HEAT_TOOLS {t_temp_args|join(' ') ~ ' MODE=heated'} # waits for all to have reached target

    # ---< turn off the fan, null extruder
    M107
    G92 E0
    M109 S{params.TOOL_TEMP}
    START_TOOL_PROBE_CRASH_DETECTION
  {% endif %}




[gcode_macro HEAT_TOOLS]
description: Batched multi-tool heater
variable_tol:           10          # ±°C band counted as “at temp”
variable_default_max_heating: 2     # how many at a time can be heating
gcode:
  # ───< settings/short alias
  {% set svf        = printer.save_variables.variables %}
  {% set ps       = printer['gcode_macro _toolchanger_settings'].get('print_start', {}) %}
  {% set max_heat = [1, ps.get('max_tools_heating_at_once', default_max_heating)|int]|max %}
  {% set states     = svf.get('runout_states', {}) %}
  {% set tc       = printer.toolchanger %}
  {% set mode     = params.MODE|default('full')|lower %}
  {% set started  = [] %}
  {% set heating  = [] %}
  {% set request  = [] %}
  {% set batch    = [] %}

  _UNIFIED_RESPOND MSG="{'?t?pHEAT_TOOLS ?t?s5?m' ~ rawparams}"

  # ───< object helpers
  {% macro t_param_temp(tn) -%}{params.get('T' ~ tn ~ '_TEMP', '')}   {%- endmacro %}
  {% macro e_id(n)  -%}{'extruder' ~ (n>0 and n|string or '')}        {%- endmacro %}
  {% macro e_tmp(n) -%}{printer[e_id(n)].temperature}                 {%- endmacro %}
  {% macro e_tgt(n) -%}{printer[e_id(n)].target}                      {%- endmacro %}
  
  # ───< check helpers
  {% macro is_heated(tn, temp) -%}  {'true' if e_tmp(tn)|int >= (temp|int - tol) else ''}  {%- endmacro %}
  
  # ───< tools cur heating and params (T2_TEMP=200 -> {tn: 2, temp: 200})
  {% for tn in tc.tool_numbers if e_id(tn) in printer %}
      {% set _ = heating.append(tn) if e_tmp(tn)|int + tol < e_tgt(tn)|int else '' %}
      {% if t_param_temp(tn) %}
        {% set _ = request.append({'tn': tn|int, 'temp': t_param_temp(tn)|int}) %}
      {% endif %}
  {% endfor %}

  _UNIFIED_RESPOND MSG="{'?t?pHEAT_TOOLS ?t?s5?mrequest: ' ~ request ~ '?t?s5?mheating: ' ~ heating}"

  # ───< heat the next tools if possible
  {% for r in request if r.tn not in heating %}
    {% if (heating|length + started|length) < max_heat %}
      {'M104 T' ~ r.tn ~ ' S' ~ r.temp}
      {% set _ = started.append(r.tn) %}
    {% endif %}
  {% endfor %}

  # ───< make sure all requested are "M104"
  {% for r in request if mode == 'heating' %}
    {% if r.tn not in heating or not is_heated(r.tn, r.temp) %}
      {% if heating|length >= max_heat %}
        {% set wait_t = heating[0] %}
        {'M109 T' ~ wait_t ~ ' S' ~ e_tgt(wait_t)|int}
        {% set _ = heating.pop(0) %}
      {% endif %}
      {'M104 T' ~ r.tn ~ ' S' ~ r.temp}
      {% set _ = heating.append(r.tn) %}
    {% endif %}
  {% endfor %}

  # ───< make sure all requested are "M109"
  {% for r in request if mode == 'heated' %}
    {% set _ = batch.append(r) %}
    {% if batch|length == max_heat or loop.last %}
      {% for i in batch %}{'M104 T' ~ i.tn ~ ' S' ~ i.temp}{% endfor %}
      {% for i in batch %}{'M109 T' ~ i.tn ~ ' S' ~ i.temp}{% endfor %}
      {% set _ = batch.clear() %}
    {% endif %}
  {% endfor %}



