[gcode_macro CLEAN_NOZZLE]
description: "Cleans the nozzle of the specified or active tool. Usage: CLEAN_NOZZLE [TEMP|S=<temp>] [T=<tool>]"
# ── Main settings ───────────────────────────────
variable_brush_center_x:      320   # Brush centre X (mm)
variable_brush_center_y:      -1.5  # Brush centre Y (mm)
variable_brush_height_z:      4.2   # Z height above the brush
variable_brush_plunge:        1.0   # Z plunge depth at center
variable_safe_above:          5     # Safety Z above brush (mm)
variable_wipe_x_length:       32    # Total figure-8 length (X)
variable_wipe_y_length:       8     # Total figure-8 width (Y)
# ── Wiping behavior ─────────────────────────────
variable_wipe_times:          12    # Number of full figure-8 cycles
variable_path_segments:       400   # Segments per figure-8
variable_wipe_speed:          500   # Movement speed (mm/s)
variable_shape:               0     # 0 = 8, 1 = ∞ (0 == along longest edge)
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set math = printer.printer.__class__.__init__.__globals__.importlib.import_module('math') %} ; <- you need meth 
    {tch.check_ok()}

    #── get settings, build short variable names ─────────────────────────────────
    {% set p, th, svf, tc   = printer, printer.toolhead, printer.save_variables.variables, printer.toolchanger %}
    {% set gc_pos           = p.gcode_move.gcode_position %}
    {% set is_printing      = p.print_stats.state|lower == 'printing' and p.print_stats.filament_used > 1.0 %}
    {% set tcs, fast_speed  = p['gcode_macro _toolchanger_settings'], p.toolchanger.params_fast_speed %}
    {% set actn             = tch.get_mounted_tn()|int %}
    {% set tn               = params.T|default(actn)|int %}
    {% set cx, cy, z0, dz   = brush_center_x|float, brush_center_y|float, brush_height_z|float, brush_plunge|float %}

    {% if tn == -1 %}{action_raise_error("CLEAN_NOZZLE: No tool specified and no tool is active.")}{% endif %}

    #── get temp from params, cur target, svf or default ─────────────────────────
    {% set requested       = params.TEMP|default(params.S)|default(none)|float(none) %}
    {% if requested is none %}
        {% set print_temp  = svf.get('recent_tooltemps', {}).get(tch.tk_lower(tn), None)|int(tch.get_tool_target(tn)|int(-1)) %}
        {% set target_temp = 220 if print_temp - 20 <= tch.get_tool_min_extrude_temp(tn)|int else print_temp -35 %}
    {% else %}
        {% set target_temp = [requested|int(0), tch.get_tool_min_extrude_temp(tn)|int - 10]|max %}
    {% endif %}
    
    #── build the figure-8 points ─────────────────────────────────
    {% set path_pts = [] %}
    {% set wx, wy   = wipe_x_length|float / 2.0, wipe_y_length|float / 2.0 %}
    {% set flip = wx > wy and not shape %}
    {% for i in range(path_segments|int + 1) %}
        {% set t    = ((i|float / path_segments|float) * 2*math.pi) + math.pi/2.0 %}
        # ---< decide if horizontal/vertical
        {% set x = wx * ( math.cos(t) if flip else math.sin(2 * t) ) %}
        {% set y = wy * ( math.sin(2 * t) if flip else math.cos(t) ) %}
        
        {% set z = -(dz|abs) * (1.0 - math.cos(2.0 * t)) / 2.0 %}
        {% set _ = path_pts.append([x|round(3), y|round(3), z|round(3)]) %}
    {% endfor %}

    #── first check if we can savely move in ──────────────────
    {% set dist_y = tch.get_y_distance_to_docks(cy)|float %}
    {% set tool_y = p[tc.tool_names[tn]].params_tool_size.y or 60 %}
    {% if dist_y <= tool_y and z0 + safe_above + 5 < gc_pos.z %}
        {% set y_approach = cy - dist_y + tool_y + (gc_pos.z/th.axis_maximum.z) * 10 %} 
    {% endif %} # /\- where we can squeeze into brush location without hitting stuffs

    #── move into position ────────────────────────────────────
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    {tch.try_divide_accel()}
    G90
    {% if tn != actn %} 
        # ---< restore to brush
        T{tn} X={cx + path_pts[0][0]} Y={cy + path_pts[0][1]} Z={z0 + path_pts[0][2]}
    {% else %}
        M104 T{tn} S{target_temp}
        {% if is_printing %}
            ROUNDED_G0 Z={gc_pos.z + 1}         F={fast_speed}      D=10 # small lift
        {% endif %}
        ROUNDED_G0 X={cx + path_pts[0][0]}      F={fast_speed}      D=100
        {% if y_approach %} # too close to docks, need to choose a save approach
            ROUNDED_G0 Y={y_approach}           F={fast_speed}      D=20
        {% endif %}
        ROUNDED_G0 Z={z0 + safe_above}          F={fast_speed}      D=20
        ROUNDED_G0 Y={cy + path_pts[0][1]}      F={fast_speed}      D=20
        ROUNDED_G0 Z={z0 + path_pts[0][2]}      F={fast_speed/2}    D=0
    {% endif %}

    # ---< wait final heat
    M109 T{tn} S{target_temp} 
    {tch.restore_vel()}

    #── do the thing ──────────────────────────────────────────
    {% for pass in range(wipe_times) %}
        {% for p in path_pts %}
            {% set x = [[cx + p[0], th.axis_maximum.x-0.1]|min, th.axis_minimum.x+0.1]|max %}
            {% set y = [[cy + p[1], th.axis_maximum.y-0.1]|min, th.axis_minimum.y+0.1]|max %}
            G0 X{x} Y{y} Z{z0 + p[2]} F{wipe_speed|float * 60}
        {% endfor %}
    {% endfor %}
    M400
    
    M104 T{tn} S{tch.get_tool_target(tn)} 

    #── return to print in case called during ───────────────
    {% if is_printing %}
        {% if tch.get_tool_target(tn)|int > target_temp %}
            M109 T{tn} S{tch.get_tool_target(tn)|int - 10} # <- wait till close to temp to not ooze or stall on end
        {% endif %}
        ROUNDED_G0 Z={z0 + safe_above} F={fast_speed}    D=10
        {% if y_approach %} # too close to docks, need to choose a save exit
            ROUNDED_G0 Y={y_approach} F={fast_speed}     D=20
            ROUNDED_G0 Z={gc_pos.z + 1} F={fast_speed/2} D=20
        {% endif %}
        ROUNDED_G0 Y={gc_pos.y} F={fast_speed} D=100
        ROUNDED_G0 X={gc_pos.x} F={fast_speed} D=100
        ROUNDED_G0 Z={gc_pos.z} F={fast_speed/2} D=0
    {% else %}
        G0 Z{z0 + safe_above}
    {% endif %}

    #── cleanup ────────────────────────────────────────────────
    {tch.restore_vel()}
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE MOVE=0
    TC_LOAD_OFFSETS