[gcode_macro CLEAN_NOZZLE]
description: "Cleans the nozzle of the specified or active tool. Usage: CLEAN_NOZZLE [TEMP|S=<temp>] [T=<tool>]"
# ── Main settings ───────────────────────────────
variable_brush_center_x:      319   # Brush centre X (mm)
variable_brush_center_y:      0     # Brush centre Y (mm)
variable_brush_height_z:      4.2   # Z height above the brush
variable_brush_plunge:        0.5   # Z plunge depth at center
variable_safe_above:          5     # Safety Z above brush (mm)
variable_wipe_x_length:       32    # Total figure-8 length (X)
variable_wipe_y_length:       8     # Total figure-8 width (Y)
# ── Wiping behavior ─────────────────────────────
variable_wipe_times:          12    # Number of full figure-8 cycles
variable_path_segments:       400   # Segments per figure-8
variable_wipe_speed:          250   # Movement speed (mm/s)
variable_shape:               0     # 0 = 8, 1 = ∞ (0 == along longest edge)
gcode:
    {% import toolchanger_helper as tch with context %}
    {tch.check_ok()}

    #── get settings, build short variable names ─────────────────────────────────
    {% set p, th, svf       = printer, printer.toolhead, printer.save_variables.variables %}
    {% set tcs, fast_speed  = p['gcode_macro _toolchanger_settings'], p.toolchanger.params_fast_speed %}
    {% set actn             = tch.get_mounted_tn()|int %}
    {% set tn               = params.T|default(actn)|int %}
    {% set cx, cy, z0, dz   = brush_center_x|float, brush_center_y|float, brush_height_z|float, brush_plunge|float %}
    
    {% if tn == -1 %}{action_raise_error("CLEAN_NOZZLE: No tool specified and no tool is active.")}{% endif %}

    # ---< either get temp from parameter, current target, or default.
    {% set requested    = params.TEMP|default(params.S)|default(none)|float(none) %}
    {% if requested is none %}
        {% set print_temp  = svf.get('recent_tooltemps', {}).get(tch.tk_lower(tn), tch.get_tool_target(tn)|int) %}
        {% set target_temp = 220 if print_temp - 20 <= tch.get_tool_min_extrude_temp(tn)|int else print_temp -25 %}
    {% else %}
        {% set target_temp = [requested|int(0), tch.get_tool_min_extrude_temp(tn)|int - 10]|max %}
    {% endif %}
    
    #── build the figure-8 points ─────────────────────────────────
    {% set path_pts = [] %}
    {% set wx, wy   = wipe_x_length|float / 2.0, wipe_y_length|float / 2.0 %}
    {% for i in range(path_segments|int + 1) %}
        {% set t = ((i|float / path_segments|float) * two_pi) + pi/2.0 %}

        # ---< decide of horizontal/vertical
        {% if wx > wy and not shape %}
            {% set x = wx * cos(t)|float %}
            {% set y = wy * sin(2 * t)|float %}
        {% else %}
            {% set x = wx * sin(2 * t)|float %}
            {% set y = wy * cos(t)|float %}
        {% endif %}
        {% set z = -(dz|abs) * (1 - cos(2 * t)|float) / 2 %}
        {% set _ = path_pts.append([x|round(3),y|round(3),z|round(3)]) %}
    {% endfor %}

    #── move into position ────────────────────────────────────
    {tch.try_divide_accel()}
    G90
    {% if tn != actn %} 
        # ---< restore to brush
        T{tn} X={cx + path_pts[0][0]} Y={cy + path_pts[0][1]} Z={z0 + path_pts[0][2]}
    {% else %} 
        # ---< or, move to brush
        M104 T{tn} S{target_temp} 
        ROUNDED_G0 Z={z0 + safe_above}         F={fast_speed} D=10
        ROUNDED_G0 X={cx + path_pts[0][0]}     F={fast_speed} D=100
        ROUNDED_G0 Y={cy + path_pts[0][1]}     F={fast_speed} D=10
        ROUNDED_G0 Z={z0 + path_pts[0][2]}     F={fast_speed} D=0
    {% endif %}

    # ---< wait final heat
    M109 T{tn} S{target_temp} 
    {tch.restore_vel()}

    #── do the thing ──────────────────────────────────────────
    {% for pass in range(wipe_times) %}
        {% for p in path_pts %}
            {% set x = [[cx + p[0], th.axis_maximum.x-0.5]|min, th.axis_minimum.x+0.5]|max %}
            {% set y = [[cy + p[1], th.axis_maximum.y-0.5]|min, th.axis_minimum.y+0.5]|max %}
            G0 X{x} Y{y} Z{z0 + p[2]} F{wipe_speed|float * 60}
        {% endfor %}
    {% endfor %}
    M400
    #── cleanup ────────────────────────────────────────────────
    M104 T{tn} S{tch.get_tool_target(tn)} 
    G0 Z{z0 + safe_above}
    {tch.restore_vel()}
