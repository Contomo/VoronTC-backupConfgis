
[gcode_macro TRIPPED]
variable_tripped: False
gcode:

[tool_drop_detection]
polling_freq: 5
polling_rate: 100 #(12.5/25/50/100/200/400/800/1600/3200 Hz)
angle_hysteresis: 5.0 
peak_g_threshold: 6

accelerometer: T0, T1, T2, T3 #, T4, T5

pitch_threshold: 20
roll_threshold: 20

default_T3: [g:1.0  p:-0.888°  r:-90.46°  vec:(0.0,0.0,1.0)]
default_T2: [g:0.996  p:0.684°  r:-87.639°  vec:(0.0,0.0,1.0)]
default_T1: [g:1.0  p:0.885°  r:-88.627°  vec:(0.0,0.0,1.0)]
default_T0: [g:1.0  p:0.225°  r:-91.627°  vec:(0.0,0.0,1.0)]

crash_gcode: 
    _set_toolchanger_leds_by_name T=0 leds="logo" color="error" transmit=1
#    SET_GCODE_VARIABLE MACRO=TRIPPED VARIABLE=tripped VALUE=True

#angle_exceed_gcode: 
#  {% if not printer['gcode_macro TRIPPED'].tripped %}
#    {% set color = 'idle' %}
#    {% set color = 'pink'   if pitch|abs > roll|abs and pitch > 0 else color %}
#    {% set color = 'cyan'   if pitch|abs > roll|abs and pitch < 0 else color  %}
#    {% set color = 'purple' if pitch|abs < roll|abs and roll > 0 else color  %}
#    {% set color = 'yellow' if pitch|abs < roll|abs and roll < 0 else color  %}
#    _set_toolchanger_leds_by_name T=0 leds="logo" color="{color}" transmit=1
#  {% endif %}


#angle_return_gcode: 
#  {% if not printer['gcode_macro TRIPPED'].tripped %}
#    _set_toolchanger_leds_by_name T=0 leds="logo" color="printing" transmit=1
#  {% endif %}


[gcode_macro TDD_SET_SHUTTLE_DEFAULTS]
description: |
  Set shuttle-baseline (TDD reference) for every tool, or for a
  comma-separated, user-ordered list.  Uses native SELECT_TOOL logic,
  waits 2 s after each change, stores, then dumps the baselines.
gcode:
  {% set P   = printer %}
  {% set tc  = P.toolchanger %}
  {% set tns = tc.tool_numbers %}
  {% set cur = tc.tool_number %}
  {% set req = params.T|default('all') %}
  {% set queue = [] %}

  # ---------- Build tool queue (current tool first) ----------
  {% for raw in (tns if req == 'all' else req.split(',')|map('trim')) %}
    {% set n = raw|int(-1) %}
    {% if n in tns and n not in queue %}
      {% set _ = queue.insert(0, n) if n == cur else queue.append(n) %}
    {% elif raw|trim and n not in tns %}
      RESPOND MSG="Tool '{raw}' invalid, skipping."
    {% endif %}
  {% endfor %}
  {% if queue|length == 0 %}
    RESPOND TYPE=error MSG="No valid tools to process."
  {% endif %}

  # ---------- Homing guard ----------
  {% if P.toolhead.homed_axes != 'xyz' %}
    {% if P.configfile.settings.toolchanger.on_axis_not_homed == 'home' %}
      RESPOND MSG="homing first"
      G28
    {% else %}
      RESPOND TYPE=error MSG="Please home all axes first."
    {% endif %}
  {% endif %}

  # ---------- Validate accelerometers ----------
  {% set tinfo = [] %}{% set missing = [] %}
  {% for n in queue %}
    {% set name   = tc.tool_names[n] %}
    {% set accel  = P[name].get('params_accel', name|replace('tool ', '')) %}
    {% set _ = missing.append(name) if accel not in P.tool_drop_detection else tinfo.append([n, accel]) %}
  {% endfor %}
  {% if missing %}
    RESPOND TYPE=error MSG="Missing accel in tool_drop_detection for: { missing|join(', ') }"
  {% endif %}

  RESPOND MSG="Capturing shuttle baselines for: {% for t,a in tinfo %}{ tc.tool_names[t]|replace('tool ', '') } {% endfor %}"

  # ---------- Select → wait → store loop ----------
  {% for t, accel in tinfo %}
    {% if t != cur %} T{t} {% endif %}

    TDD_POLLING_START ACCEL={accel}
    G4 P2000                       # let sensors settle
    TDD_REFERENCE_SET  ACCEL={accel}
    TDD_POLLING_STOP   ACCEL={accel}
  {% endfor %}

  {% set accel_list = tinfo|map(attribute=1)|unique|join(',') %}
  TDD_REFERENCE_DUMP ACCEL={accel_list}
  RESPOND MSG="Shuttle baselines updated for ACCEL={accel_list}."
