[tool_drop_detection]
polling_freq: 5
polling_rate: 100 #(12.5/25/50/100/200/400/800/1600/3200 Hz)
hysterisis: 5.0 
peak_g_threshold: 3

accelerometer: T0 , T1#, T2, T3, T4, T5 #fix

default_T0: [g:0.97, p:-0.00, r:-90.93]
default_T1: [g:0.98, p:1.76, r:-88.18]

#rotation_threshold:
#pitch_threshold: 20
#roll_threshold: 20


crash_gcode: 
    RESPOND MSG="CRASH TRIGGERED! (accel={accellerometer} pitch={magnitude} pitch={pitch} roll={roll})"
angle_exceed_gcode: 
    RESPOND MSG="Tilted!"
    _set_toolchanger_leds_by_name T=0 leds="logo" color="error" transmit=1
angle_return_gcode: 
    RESPOND MSG="Level again."
    _set_toolchanger_leds_by_name T=0 leds="logo" color="busy" transmit=1


#Contents of: printer.tool_drop_detection
#T0: '{'vector': {'x': 0, 'y': 0, 'z': 0}, 
#     'magnitude': 0,
#     'rotation': {' pitch': 0, 'roll': 0, 'vector': 0}, 
#     'session': {'peak': 0, 'norm': 0, 'current': 0, 'last': 0, 'rotation': {'pitch': 0, 'roll': 0, 'vector': 0}}}' (dict)

[gcode_macro _TC_DOCK_AUTOTUNE_REDO_BASELINE_BUTTON]
gcode:
  {% set P = printer %}
  {% set parent = P["gcode_macro TC_DOCK_AUTOTUNE"] %}
  {% set S = parent.storage %}
  _SET_STORE M={S.name} K="state" S="record_rotation_baseline"
  UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=0.1


[gcode_macro TC_DOCK_AUTOTUNE]
description: "Autotune park_x / park_y for the *current* tool by minimising peak-g"
# ── SETTINGS ───────────────────────────────────────────────────────────
variable_range_mm:      1.0    # ± search window
variable_step_mm:       0.1    # mm increment
variable_settle_wait:   0.5    # seconds before reading sensor
variable_pitch_tol:     3      # ° versus baseline
variable_roll_tol:      3
variable_threshold:     0.05   # 5 % peak increase considered "worse"
variable_changes_per:   5
variable_abort_on_g:    3
# --------------------------------------------
variable_debug:         True
variable_name:          'TC_DOCK_AUTOTUNE'
variable_storage:       {}
# ---------------------------------------------------------------------------
#  Entry
gcode:
  M400
  {% set P = printer %}
  {% set S = storage %}
  
  {% set state = S.get('state', 'idle') %}
  {% set actn = P.tool_probe_endstop.active_tool_number|int %}
  {% if actn == -1 %}
    RESPOND TYPE=error MSG="No active tool equipped."
  {% elif state != 'idle' %}
    RESPOND MSG="Autotune already running (state={state})."
  {% elif P.toolhead.homed_axes != "xyz" %}
    RESPOND MSG="Please home first"
  {% else %}
    _SET_STORE M={name} RESET="True"
    _SET_STORE M={name} K="name" S="{name}"
    
    {% set tool_name = P.toolchanger.tool_names[actn] %}
    {% set tool_object      = P[tool_name] %}
    {% set x = tool_object.params_park_x|float %}
    {% set y = tool_object.params_park_y|float %}
    {% set z = tool_object.params_park_z|float %}
    {% set fast = tool_object.params_fast_speed|float %}
    {% set path = tool_object.params_dropoff_path %}
    {% set safe_y = tool_object.params_safe_y|float %}
    {% set max_z = P.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_pos = P.toolhead.position %}

    _SET_STORE M={name} K="safe_y" S="{safe_y}"

    SET_VELOCITY_LIMIT ACCEL={P.configfile.config.printer.max_accel|float // 5.0}

    G90
    ROUNDED_G0 Z={[cur_pos.z + 1.0, max_z]|min} F={fast}
    ROUNDED_G0 Y={[cur_pos.y, safe_y]|max} D=50 F={fast}
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=80 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float + safe_y / 2.0} D=0 F={fast}

    STOP_TOOL_PROBE_CRASH_DETECTION

    _SET_STORE M={name} K="tool"    S="{actn}"
    _SET_STORE M={name} K="orig_px" S="{x}"
    _SET_STORE M={name} K="orig_py" S="{y}"
    _SET_STORE M={name} K="state"   S="start"
    
    {% set accelName = tool_object.get('params_accel', tool_name|replace('tool ', '')) %}
    _SET_STORE M={name} K="accelName"    S="{accelName}"
    TDD_POLLING_STOP
    TDD_POLLING_START ACCEL={accelName} FREQ={5} RATE={1600}
    M400
    TDD_POLLING_RESET
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=1
    RESPOND MSG="Dock autotune started, range: ±{range_mm}mm and step: ±{step_mm}mm"
  {% endif %}
  # ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[delayed_gcode _TCDOCK_LOOP] # I LVOE STATE MACHINES I LOVE STATE MACHINES I LOVE STATE MACHINES
gcode:
  M400
  {% set debug = [] %}
  {% set P = printer %}
  {% set parent = P["gcode_macro TC_DOCK_AUTOTUNE"] %}
  {% set S = parent.storage %}
  {% set tool_object = P[P.toolchanger.tool_names[S.tool]] %}
  {% set tdd = P.tool_drop_detection.get(S.accelName) %}
  {% set pitch = tdd.rotation.pitch|float %}
  {% set roll = tdd.rotation.roll|float %}
  {% set peak = tdd.session.peak|float %}
  {% set sess_roll = tdd.session.rotation.roll|float %}
  {% set sess_pitch = tdd.session.rotation.pitch|float %}
  {% set state = S.get('state', 'idle') %}
  # we can calc this on every run, we check where needed.
  {% if 'base_pitch' in S and 'base_roll' in S %}
    {% set skew = (pitch - S.base_pitch)|abs > parent.pitch_tol or (roll - S.base_roll)|abs > parent.roll_tol %}
  {% endif %}
  {% set dropped = parent.abort_on_g|float < peak %}
  # ───────────────────────────────────────────────────── record shuttle rotation ─────────────────────
  {% if state == 'start' %}
    _SET_STORE M={S.name} K="base_pitch_on_shuttle" S="{sess_pitch}"
    _SET_STORE M={S.name} K="base_roll_on_shuttle"  S="{sess_roll}"
    _SET_STORE M={S.name} K="state" S="record_dock_baseline"
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=0.1
  {% endif %}
  # ───────────────────────────────────────────────────── record_dock_baseline ─────────────────────
  {% if state == 'record_dock_baseline' %}
    RESPOND MSG="Recording baseline, Unselecting"
    SET_VELOCITY_LIMIT ACCEL={P.configfile.config.printer.max_accel|float // 10.0}
    SET_TOOL_PARAMETER T={S.tool} PARAMETER="params_path_speed" VALUE={tool_object.params_path_speed|float // 5.0}
    UNSELECT_TOOL
    M400
    TDD_POLLING_RESET
    _SET_STORE M={S.name} K="state" S="record_rotation_baseline"
    M400
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=1
  {% endif %}
  # ───────────────────────────────────────────────────── record_rotation_baseline ─────────────────────
  {% if state == 'record_rotation_baseline' %}
    _SET_STORE M={S.name} K="base_pitch" S="{sess_pitch}"
    _SET_STORE M={S.name} K="base_roll"  S="{sess_roll}"
    _SET_STORE M={S.name} K="baseline_peaks" S="{[]}"
    TDD_POLLING_RESET
    SELECT_TOOL T={S.tool} RESTORE_AXIS="''"
    _SET_STORE M={S.name} K="state" S="wait_user_accept_baseline"
    M400
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=0.1
  {% endif %}
  # ───────────────────────────────────────────────────── ask if okay ─────────────────────
  {% if state == 'wait_user_accept_baseline' %}
    RESPOND TYPE=command MSG="action:prompt_begin Dock alignment check"
    RESPOND TYPE=command MSG="action:prompt_text Current Tilt alignement:"
    RESPOND TYPE=command MSG="action:prompt_text forward-backward: {(S.base_pitch_on_shuttle - S.base_pitch)|round(3)}°"
    RESPOND TYPE=command MSG="action:prompt_text left-right: {(S.base_roll_on_shuttle - S.base_roll)|round(3)}°"
    RESPOND TYPE=command MSG="action:prompt_button Record new |_TC_DOCK_AUTOTUNE_REDO_BASELINE_BUTTON|warning"
    RESPOND TYPE=command MSG="action:prompt_footer_button Continue |UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=0.1|success"
    RESPOND TYPE=command MSG="action:prompt_show"
    _SET_STORE M={S.name} K="state" S="baseline"
  {% endif %}
  # ───────────────────────────────────────────────────── baseline ─────────────────────
  {% if state == 'baseline' %}
    SET_VELOCITY_LIMIT ACCEL={P.configfile.config.printer.max_accel|float // 2.0}
    {% if S.baseline_peaks|length < parent.changes_per %}
      _SET_STORE M={S.name} K='baseline_peaks' A="{[peak]}"
      SET_TOOL_PARAMETER T={S.tool} PARAMETER="params_path_speed" VALUE={tool_object.params_path_speed|float // 2.0}
      UNSELECT_TOOL
      M400
      TDD_POLLING_RESET
      RESET_TOOL_PARAMETER T={S.tool} PARAMETER="params_path_speed"
      SELECT_TOOL T={S.tool} RESTORE_AXIS="''"
    {% else %}
      {% set average = ((S.baseline_peaks|sum) / (S.baseline_peaks|length))|round(5) %}
      {% if parent.debug %}{% set _ = debug.append('baseline | avr: ' ~ average ~ '  last: ' ~ peak) %} {% endif %}
      _SET_STORE M={S.name} K="base_peak" S="{average}"
      _SET_STORE M={S.name} K="best_peak" S="{average}"
    RESPOND MSG="Baseline: {average|round(3)}g,  pitch: {S.base_pitch|round(2)}°,  roll: {S.base_roll|round(2)}°"
    _SET_STORE M={S.name} K="state" S="scan"
    {% endif %}
    # always loop
    M400
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=0.1
  {% endif %}
  # ───────────────────────────────────────────────────── scan ─────────────────────
  {% if state == 'scan' %}
    {% set dir_index = S.get('dir_index', 0) %}
    {% set axis = 'x' if dir_index < 2 else 'y' %}
    {% set sign = 1 if (dir_index % 2) == 0 else -1 %}
    {% set step_count = S.get('step_count', 0) + 1 %}
    {% set offset = step_count * parent.step_mm * sign %}
    
    {% if offset|abs >= parent.range_mm %} # return/advance if out of bounds.
      {% set dir_index = dir_index + 1 %}
      {% if dir_index >= 4 %}
        _SET_STORE M={S.name} K="state" S="done"
      {% else %}
      _SET_STORE M={S.name} K="step_count" S=0
      _SET_STORE M={S.name} K="dir_index" S="{dir_index}"
      {% endif %}
    {% else %}
      {% if axis == 'x' %}
        SET_TOOL_PARAMETER T={S.tool} PARAMETER=params_park_x VALUE={(S.orig_px + offset)|round(3)}
      {% elif axis == 'y' %}
        SET_TOOL_PARAMETER T={S.tool} PARAMETER=params_park_y VALUE={(S.orig_py + offset)|round(3)}
      {% endif %}
      {% if parent.debug %}  {% set _ = debug.append('testing | x: ' ~ (S.orig_px + offset)|round(3) ~ '  y: ' ~ (S.orig_py + offset)|round(3) ) %} {% endif %}
      _SET_STORE M={S.name} K="peak_collection" S="[]"
      _SET_STORE M={S.name} K="state" S="run_test"
    {% endif %}
    M400
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=0.1
  {% endif %}
  # ───────────────────────────────────────────────────── run_test ─────────────────────
  {% if state == 'run_test' %}
    
    {% if skew or dropped %} 
      _SET_STORE M={S.name} K="last_state" S="{S.state}"
      _SET_STORE M={S.name} K="state" S="skewed" # break out cause we skewed
    {% else %} 
      TDD_POLLING_RESET
      SELECT_TOOL T={S.tool} RESTORE_AXIS="''"
      _SET_STORE M={S.name} K="state" S="record_test"
    {% endif %}
    M400
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION={(parent.settle_wait*1000)|int}
  {% endif %}
  # ───────────────────────────────────────────────────── record_test ─────────────────────
  {% if state == 'record_test' %}
    {% if skew or dropped %} 
      # -------------- skewed, break out, mainsail popup to kick back on.
      _SET_STORE M={S.name} K="last_state" S="{S.state}"
      _SET_STORE M={S.name} K="state" S="skewed"
    {% elif S.peak_collection|length < parent.changes_per %} 
      # -------------- rerun X times till enough
      _SET_STORE M={S.name} K="peak_collection" A="{[peak]}"
      UNSELECT_TOOL
    {% else %} 
      # --------------  if enough, do calcs and decide where to go next
      {% set average = ((S.peak_collection|sum) / (S.peak_collection|length))|round(5) %}
      {% if average > S.base_peak * (1 + parent.threshold) or average > S.best_peak * (1 + 2 * parent.threshold) %} # worse, go other way
        {% set dir_index = S.get('dir_index', 0) %}
        _SET_STORE M={S.name} K="dir_index"  S="{dir_index + 1}"
      {% else %} # record new best
        _SET_STORE M={S.name} K="best_peak" S="{average}"
        _SET_STORE M={S.name} K="best_parking_pos_x" S="{tool_object.params_park_x}"
        _SET_STORE M={S.name} K="best_parking_pos_y" S="{tool_object.params_park_y}"
        {% if parent.debug %}{% set _ = debug.append('new best | x: ' ~ (tool_object.params_park_x)|round(3) ~ '  y: ' ~ (tool_object.params_park_y)|round(3) ~ ' at: ' ~ average ~ 'g (last: ' ~ peak ~ 'g)') %} {% endif %}
      {% endif %}
      _SET_STORE M={S.name} K="state" S="scan"  # advance or reverse or whatever we did
    {% endif %}
    M400
    UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION={0.1}
  {% endif %}

  {% if state == 'skewed' %}
    {% set em = [] %}
    {% set _ = em.append("begin Testing Halted") %}
    {% set _ = em.append("footer_button Fixed?|UPDATE_DELAYED_GCODE ID=_TCDOCK_LOOP DURATION=0.1|warning") %}
    {% set _ = em.append("show") %}
    {% for e in em %}
      RESPOND TYPE=command MSG="{'action:prompt_' ~ e}"
    {% endfor %}
    _SET_STORE M={S.name} K="state" S="{S.get('last_state', 'scan')}"
  {% endif %}

  {% if state == 'done' %}
      TDD_POLLING_STOP
      SET_TOOL_PARAMETER T={S.tool} PARAMETER=params_park_x VALUE={S.best_parking_pos_x|round(3)}
      SET_TOOL_PARAMETER T={S.tool} PARAMETER=params_park_y VALUE={S.best_parking_pos_y|round(3)}
      _SET_STORE M={S.name} K="state" S="idle"
      SET_VELOCITY_LIMIT ACCEL={P.configfile.config.printer.max_accel}
      RESPOND MSG="Done -> ΔX: {(S.best_parking_pos_x - S.orig_px)|round(3)}mm,  ΔY: {(S.best_parking_pos_y - S.orig_py)|round(3)}mm old peak: {S.base_peak|round(3)}g, new peak: {S.best_peak|round(3)}g"
  {% endif %}
  {% if debug != [] and parent.debug %} RESPOND MSG={debug.join('\n')} {% endif %}
  


[gcode_macro _SET_STORE]
description: M[macro] V[/VARIABLE/] K[key] S|A[value] (set/add) [/RESET/]
gcode:
  {% set p = params %}
  {% set m_name   = p.get('M', None) %}
  {% set m        = printer['gcode_macro ' ~ m_name]|default(None) %}
  {% set var_name = p.get(p.V, 'storage')%}
  {% set var = m.get(var_name, None) %}
  {% set key      = p.get('K', None) %}
  
  {% if m == None %} RESPOND TYPE=error MSG="cannot get macro '{m_name}'"
  {% elif var_name not in m %} RESPOND TYPE=error MSG="'{var_name}' not in '{m_name}'"
  {% elif p.get('RESET', None)|lower == 'true' %} SET_GCODE_VARIABLE MACRO={m_name} VARIABLE={var_name} VALUE={{}} # reset
  {% elif (m.get(var_name, None)).__class__.__name__ != "dict" %} RESPOND TYPE=error MSG="'{var_name}' in '{m_name}' is not of type 'dict'"
  {% elif ('A' in p and 'S' in p) or ('A' not in p and 'S' not in p) %} RESPOND TYPE=error MSG="either [S]'set' or [A]'add' (not both or none).
  {% elif key == None %} RESPOND TYPE=error MSG="missing [K]'key'"
  {% else %}
    {% set raw = p.get('A', p.get('S')) %}
    {% set val = raw %}
    # --------- list
    {% if raw.startswith('[') and raw.endswith(']') %}
      {% if key not in var %} {% set _ = var.update({key: []}) %} {% endif %} # make sure it exists.
      {% set val = [] %}
      {% for t in raw[1:-1].split(',') %}
          {% set t = t.strip() %}
          {% if t and (t[0] in "-0123456789") and t.lstrip('-').replace('.','',1).isdigit() %} # parse values type
            {% set _ = val.append(t|float if '.' in t else t|int) %}
          {% elif t != '' %}
            {% set _ = val.append(t) %}
          {% else %}
            {% set _ = val.append([]) %}
          {% endif %}
      {% endfor %}
    # --------- regular number
    {% elif raw and (raw[0] in "-0123456789") and raw.lstrip('-').replace('.','',1).isdigit() %}
      {% set val = raw|float if '.' in raw else raw|int %}
    {% endif %}
    # ---------- SET ----------
    {% if 'S' in p %}
    {% set _ = var.update({key: val}) %}
    # ---------- ADD ----------
    {% elif val.__class__.__name__ == "list" %}
      {% for i in val %}{% set _ = var[key].append(i) %}{% endfor %}
    {% else %}
      RESPOND TYPE=error MSG="unable to parse"
    {% endif %}
    SET_GCODE_VARIABLE MACRO={m_name} VARIABLE={var_name} VALUE="{var}"
  {% endif %}



