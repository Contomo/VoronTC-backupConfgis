[gcode_macro SEARCH]
description: Usage: SEARCH [I=<include>] [E=<exclude>]
variable_color_path:       "rgb(128,128,128)"
variable_color_key:        "rgb(0,150,255)"
variable_color_val:        "rgb(255,200,50)"
variable_color_typ:        "rgb(180,180,180)"
variable_color_match:      "rgb(255,0,100)"
variable_color_category:   "rgb(50,205,50)"
variable_color_box_bg:     "rgb(20,20,20)"
variable_color_box_border: "rgb(40,40,40)"
variable_font_size:        "0.9em"
variable_max_depth:        5
variable_search_sep:       "°"
variable_long_limit:       100
variable_timeout:          10   # timeout after which to exit early.
gcode:
    ; ======================= STYLES & HELPER JINJA MACROS ==========================
    {% set base_style = "style='font-size:" ~ font_size ~ "; margin-bottom:3px;'" %}
    {% set box_style = "style='font-size:" ~ font_size ~ "; background-color:" ~ color_box_bg ~ "; border:1px solid " ~ color_box_border ~ "; border-radius:4px; padding:5px; margin-top:2px;'" %}
    {% set raw_search = params.I|default("") %}
    {% set raw_search = params.S if S in params and not raw_search else raw_search %}
    {% set sections = {'gcode_commands': [], 'user_macros': [], 'config_templates': [], 'config_settings': [], 'other': [], 'display_templates':[]} %}
    {% set ns = namespace(queue=[], results=[]) %}
    {% set output = [] %}
    
    {% set include_terms = raw_search.lower().split(search_sep) %}
    {% set exclude_str = params.E|default("") %}
    {% set exclude_terms = (exclude_str|lower).split(search_sep) %}
    {% set depth_limit = params.MAX_DEPTH|default(max_depth)|int %}
    
    {% for k in printer %}
        {% set _ = ns.queue.append({'path': k, 'obj': printer[k], 'depth': 1}) %}
    {% endfor %}

    #---< html escaping, html shorts
    {%- macro _escp(any) -%}{any|string|e|replace('\r', '')|replace('\n', '<br>')}{%- endmacro -%}
    {%- macro _span(color, txt) -%}{"<span style='color:" ~ color ~ "'>" ~ txt ~ "</span>"}{%- endmacro -%}
    {%- macro _summary(summary, details) -%}{"<details " ~ base_style ~ ">" ~ summary ~ details ~ "</details>"}{%- endmacro -%}

    #---< highlight resutls
    {%- macro _highlight_text(text, terms, color) -%}
        {%- set ns = namespace(output=text|string) -%}
        {%- for term in terms if term and term in ns.output|lower -%}
            {%- set idx = (ns.output|lower).find(term) -%}
            {%- if idx != -1 -%}
                {%- set ns.output = ns.output[:idx] ~ _span(color, ns.output[idx:idx + term|length]) ~ ns.output[idx + term|length:] -%}
            {%- endif -%}
        {%- endfor -%}
        {ns.output}
    {%- endmacro -%}

    #---< helper: build one <div> line for a child entry
    {%- macro _append_child(list_ref, key, value) -%}
        {%- if value is not none and not (value is sameas printer) -%}
            {%- set key_html  = _span(color_key, key) -%}
            {%- set type_html = _span(color_typ, "(" ~ value.__class__.__name__ ~ ")") -%}

            {%- if value is mapping or (value is sequence and value is not string) -%}
                #---< show only the type for nested structures
                {%- set line = "<div>" ~ key_html ~ ": " ~ type_html ~ "</div>" -%}
            {%- else -%}
                #---< show value + type for primitives & callables
                {%- set val_html = _highlight_text(_escp(value), include_terms, color_match) -%}
                {%- set line = "<div>" ~ key_html ~ ": " ~ _span(color_val, val_html) ~ " " ~ type_html ~ "</div>" -%}
            {%- endif -%}

            {%- set _ = list_ref.append(line) -%}
        {%- endif -%}
    {%- endmacro -%}

    #---< categorization for section sorting/gcode formatting
    {%- macro _get_category(itm) -%}
        {%- set category = 'other' -%}
        {%- if itm.path.startswith(('gcode_macro')) -%}
            {%- set category = 'user_macros' -%}
        {%- elif itm.path.startswith('gcode.commands') -%}     
            {%- set category = 'gcode_commands' -%}
        {%- elif (type_str == 'str' and ('{%' in itm.obj or '{' in itm.obj)) or itm.path.endswith('.gcode') -%}
            {% set category = 'config_templates' -%}
        {%- elif itm.path.startswith('configfile.settings.') and itm.path.endswith('_gcode') -%}
            {% set category = 'config_templates' -%}
        {%- elif itm.path.startswith('configfile.settings.display_template') -%}
            {%- set category = 'display_templates' -%}
        {%- elif itm.path.startswith('configfile.settings') -%}
            {%- set category = 'config_settings' -%}
        {%- endif -%}
        {category}
    {%- endmacro -%}

    #-------------------------------------- RENDERS --------------------------------------
    #---< gcode render
    {%- macro _render_gcode(item) -%}
        {%- set ns_format = namespace(lines=[], indent=0) -%}
        {%- for line in item.obj.split('\n') %}
            {%- set stripped = line|trim -%}
            {%- if stripped -%}
            {%- set ns_format.indent = [ns_format.indent - 1, 0]|max if '{% end' in stripped or '{% el' in stripped else ns_format.indent -%}
            {%- set _ = ns_format.lines.append('  ' * ns_format.indent ~ line|e) -%}
            {%- set ns_format.indent = (ns_format.indent + 1) if '{% if' in stripped or '{% for' in stripped or '{% el' in stripped else ns_format.indent -%}
            {%- endif -%}
        {%- endfor -%}
        {%- set gcode = _highlight_text(ns_format.lines|join('<br>'), include_terms, color_match) -%}
        {%- set summary = "<summary>" ~ _highlight_text(item.path, include_terms, color_match) ~ "</summary>" -%}
        {%- set details = "<div " ~ box_style ~ "><div style='white-space:pre; font-family:monospace; overflow-x:auto;'>" ~ gcode ~ "</div></div>" -%}
        {_summary(summary, details)}
    {%- endmacro -%}

    #---< description/misc render
    {%- macro _render_long_string(item) -%}
        {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
        {%- set h_val  = _highlight_text(_escp(item.obj), include_terms, color_match) -%}
        {_summary("<summary>" ~ h_path ~ "</summary>", "<div " ~ box_style ~ ">" ~ h_val ~ "</div>")}
    {%- endmacro -%}

    #---< simple value (int, none, float etc...) render
    {%- macro _render_primitive(item) -%}
        {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
        {%- set safe_val_str = _escp(item.obj) -%}
        {%- set val = _highlight_text(safe_val_str, include_terms, color_match) -%}
        {%- set h_type = _highlight_text("(" ~ item.obj.__class__.__name__ ~ ")", include_terms, color_typ) -%}
        { "<div " ~ base_style ~ ">" ~ h_path ~ ": " ~ _span(color_val, val) ~ " " ~ _span(color_typ, h_type) ~ "</div>" }
    {%- endmacro -%}
    

    #---< 
    {%- macro _render_mapping(item) -%}
        #---< highlighted header for this mapping
        {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
        {%- set children = [] -%}

        #---< iterate over mapping items first (plain dict-like objects)
        {%- if item.obj is mapping and item.obj.items is defined -%}
            {%- for key, value in item.obj.items()|sort(attribute=0) -%}
                {%- set _ = _append_child(children, key, value) -%}
            {%- endfor -%}
        {%- else -%}
            #---< fall back to dir() for normal python/klipper objects
            {%- for key in item.obj.__dir__()|sort -%}
                {%- if not key.startswith('__') -%}
                    {%- set value = item.obj|attr(key) -%}
                    {%- set _ = _append_child(children, key, value) -%}
                {%- endif -%}
            {%- endfor -%}
        {%- endif -%}

        #---< wrap the collected children in a collapsible details tag
        {%- set summary = "<summary>" ~ h_path ~ " " ~ _span(color_typ, "(" ~ item.obj.__class__.__name__ ~ ")") ~ "</summary>" -%}
        {%- set details = "<div " ~ box_style ~ ">" ~ (children|join) ~ "</div>" -%}
        {_summary(summary, details)}
    {%- endmacro -%}

    {%- macro _render_result(item) -%}
        {%- set cls = item.obj.__class__.__name__ -%}

        #---< raw gcode text? >
        {%- if cls == 'str' and ('{%' in item.obj or '{' in item.obj) -%}
            {_render_gcode(item)}

        #---< any dict-like OR non-trivial object gets a field table >
        {%- elif item.obj is mapping
            or cls not in ['str', 'int', 'float', 'bool', 'NoneType'] -%}
            {_render_mapping(item)}

        #---< long plain strings collapse to <details> >
        {%- elif cls == 'str' and item.obj|length > long_limit|int -%}
            {_render_long_string(item)}

        #---< simple primitives (numbers, short strings, etc.) >
        {%- else -%}
            {_render_primitive(item)}
        {%- endif -%}
    {%- endmacro -%}


    #---------------------------- ACTUAL SERACH --------------------------   
    {% if not raw_search %}
        {action_raise_error("Usage: SEARCH [I=<include>] [E=<exclude>]")}
    {% endif %}

    { action_respond_info("Starting search for '" ~ raw_search|e ~ "'...") }
    {% set start_time = printer.printer.reactor.monotonic() %}

    {% for i in range(40000) if ns.queue %}
        {% set item = ns.queue.pop(0) %}
        {% set val_str = item.obj|string if not (item.obj is mapping) else "" %}
        {% set combined = (item.path ~ " " ~ val_str)|lower %}
        {% set keep = namespace(v=True) %}
        
        {% for term in include_terms if term and term not in combined %}{% set keep.v = False %}{% endfor %}
        {% for term in exclude_terms if term and term     in combined %}{% set keep.v = False %}{% endfor %}
        {% if 'configfile.config' in item.path %}{% set keep.v = False %}{% endif %} #---< duplicate but all values are strings lol
        
        {% if keep.v %}
            {% set _ = ns.results.append({'path': item.path, 'html': _render_result(item), 'category': _get_category(item)}) %}
        #---< dont keep? keep searching into it.
        {% elif item.depth < depth_limit %}
            {% if item.obj is mapping %} #---< mapping
                {% for k in item.obj %}{% set _ = ns.queue.append({'path': item.path ~ "." ~ k, 'obj': item.obj[k], 'depth': item.depth + 1}) %}{% endfor %}
            {% elif item.obj is sequence and item.obj is not string %} #---< or list?
                {% for i in range(item.obj|length) %}{% set _ = ns.queue.append({'path': item.path ~ "[" ~ i ~ "]", 'obj': item.obj[i], 'depth': item.depth + 1}) %}{% endfor %}
            {% endif %}
        {% endif %}
        {% if i % 100 == 0 and printer.printer.reactor.monotonic() - start_time > timeout %}
            {% set _ = output.append('<br>' ~ _span('red', "Search aborted after " ~ printer.printer.reactor.monotonic() - start_time ~ " s with " ~ ns.queue|length ~ " remaining in the que")) %}
            {% set _ = ns.queue.clear() %}
        {% elif ns.results|length > 120 %}
            {% set _ = output.append('<br>' ~ _span('red', "Search aborted after " ~ printer.printer.reactor.monotonic() - start_time ~ " s (capped at 120 results, please specifcy)")) %}
            {% set _ = ns.queue.clear() %}
        {% endif %}
    {% endfor %}
    #---------------------------- DISPLAY SEARCH --------------------------  
    {% if not ns.results %}
        RESPOND MSG="No matches found for '{raw_search|e}'"
    {% else %}
        {% for item in ns.results|sort(attribute='path') %}
            {% set _ = sections[item.category].append(item.html) %}
        {% endfor %}      
        {% set category_map = [
            ('live printer objects',    sections.other),
            ('macro variables etc',     sections.user_macros),
            ('printer config',          sections.config_settings), 
            ('display templates',       sections.display_templates),
            ('gcode templates',         sections.config_templates),
            ('useless (command help)',  sections.gcode_commands)
            ] %}
        
        
        {% for name, items in category_map if items %}
            {% set summary = "<summary style='color:" ~ color_category ~ "; font-weight:bold;'>" ~ name ~ " (" ~ items|length ~ " matches)</summary>" %}
            {% set _ = output.append("<details>" ~ summary ~ (items|join) ~ "</details>") %}
        {% endfor %}
        RESPOND MSG="Found {ns.results|length} matches for '{raw_search|e}':{output|join}"
    {% endif %}








[gcode_macro PRINT_PRINTER_PATH]
description: "prints the contents of printer.$PATH$, use FORCE=1 to print longer messages    Lightweight to dump objects while executing macros."
variable_cutoff: 80
variable_key_cutoff: 50

# Color scheme variables
variable_color_key: "primary--text text--lighten-5"
variable_color_value: "white"
variable_color_container: "warning--text text--darken-1"
variable_color_special: "success--text text--darken-1"
variable_color_text: "primary--text text--lighten-4"
variable_color_error: "error--text text--darken-1"
variable_color_hint: "secondary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_index: "info--text text--lighten-3"
variable_color_bool: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_number: "info--text text--lighten-1"
variable_color_string: "primary--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
gcode:
    {% set path_str = params.PATH|default("") %}

    {% set path_str = path_str.replace('["', '.') %}
    {% set path_str = path_str.replace("']['", '.') %}
    {% set path_str = path_str.replace("']", "") %}
    {% set path_str = path_str.replace('"]', "") %}
    {% set path_str = path_str.replace("[", ".") %}
    {% set path_str = path_str.replace("]", "") %}
    
    {% if (path_str|lower).startswith("printer.") %} {% set path_str = path_str[8:] %} {% endif %}
    {% if (path_str|lower).startswith("printer") %} {% set path_str = path_str[7:] %} {% endif %}

    {% set parts = path_str.split('.') %}
    
    {% set ns = namespace(current=printer, invalid=False, lines=[]) %}
    # Traverse each part of the path
    {% for part in parts %}
        {% if not ns.invalid %}
            {% set keys = ns.current|list %}
            {% if part in keys %}
                {% set ns.current = ns.current[part] %}
            {% else %}
                {% set part_escaped = part.replace("'", "&apos;").replace("\"", "&quot;") %}
                {% set original_path_escaped = (params.PATH|default(""))|replace("'", "&apos;")|replace("\"", "&quot;") %}
                {% set _ = ns.lines.append("<span class='" ~ color_error ~ "'>Invalid part &apos;" ~ part_escaped ~ "&apos; in path &apos;printer." ~ original_path_escaped ~ "&apos;</span>") %}
                {% set ns.invalid = True %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if not ns.invalid %}
        {% set type_str = ns.current.__class__.__name__ %}
        {% set val_str = ns.current|string %}
        # Escape path and values for HTML
        {% set path_escaped = path_str.replace("'", "&apos;").replace("\"", "&quot;") %}
        {% set val_escaped = val_str.replace("'", "&apos;").replace("\"", "&quot;") %}
        # If it’s a simple type
        {% if type_str not in ('dict', 'list', 'tuple', 'set') %}
            {% set value_color = color_value %}
            {% if type_str == 'Coord' %}{% set value_color = color_special %}
            {% elif type_str == 'bool' %}{% if val_str == "True" %}{% set value_color = color_bool %}{% else %}{% set value_color = color_bool_false %}{% endif %}
            {% elif type_str in ['float', 'int'] %}{% set value_color = color_number %}
            {% elif type_str == 'str' %}{% set value_color = color_string %}
            {% elif type_str == 'NoneType' %}{% set value_color = color_none %}
            {% else %}{% set value_color = color_object %}{% endif %}
            {% set _ = ns.lines.append(
               "<span class='" ~ color_text ~ "'>Value at printer." ~ path_escaped ~ ":</span> " ~
               "<span class='" ~ value_color ~ "'>&apos;" ~ val_escaped ~ "&apos;</span> " ~
               "<span class='" ~ color_type ~ "'>(" ~ type_str ~ ")</span>"
            ) %}
        {% else %}
            # Container type (dict, list, etc.)
            {% set all_keys = ns.current|list %}
            {% if all_keys|length > 0 %}
                {% set _ = ns.lines.append(
                   "<span class='" ~ color_text ~ "'>Contents of:</span> <span class='" ~ color_key ~ "'>printer." ~ path_escaped ~ "</span>"
                ) %}
                {% if params.FORCE|default(false) in ["1","True","true"] %} {% set limited_keys = all_keys %} {% else %} {% set limited_keys = all_keys[:key_cutoff] %} {% endif %}
                {% for k in limited_keys %}
                    {% set raw_val = ns.current[k] %}
                    {% set val_type = raw_val.__class__.__name__ %}
                    {% set val_str2 = raw_val|string %}
                    {% set val_escaped2 = val_str2.replace("'", "&apos;").replace("\"", "&quot;") %}
                    {% set val_ns = namespace(trimmed=val_escaped2, truncated_chars=0) %}

                    {% if val_str2|length > cutoff and not (params.FORCE|default(false) in ["1","True","true"]) %}
                        {% set val_ns.trimmed = val_str2[:cutoff - 3] ~ "..."|replace("'", "&apos;")|replace("\"", "&quot;") %}
                        {% set val_ns.truncated_chars = val_str2|length - cutoff + 3 %}
                    {% endif %}
                    {% set prefix_color = color_key %}
                    {% set value_color = color_value %}
                    {% set type_color = color_type %}
                    {% set hint_color = color_hint %}
                    # Choose color by type
                    {% if val_type in ('dict', 'list', 'tuple', 'set') %}{% set value_color = color_container %}
                    {% elif val_type == 'Coord' %}{% set value_color = color_special %}
                    {% elif val_type == 'bool' %}{% if val_str2 == "True" %}{% set value_color = color_bool %}{% else %}{% set value_color = color_bool_false %}{% endif %}
                    {% elif val_type in ['float', 'int'] %}{% set value_color = color_number %}
                    {% elif val_type == 'str' %}{% set value_color = color_string %}
                    {% elif val_type == 'NoneType' %}{% set value_color = color_none %}
                    {% else %}{% set value_color = color_object %}{% endif %}
                    {% set k_escaped = k.replace("'", "&apos;").replace("\"", "&quot;") %}
                    {% if val_ns.trimmed != val_escaped2 %}
                        {% set _ = ns.lines.append(
                           "<span class='" ~ prefix_color ~ "'>" ~ k_escaped ~ ":</span> " ~
                           "<span class='" ~ value_color ~ "'>&apos;" ~ val_ns.trimmed ~ "&apos;</span> " ~
                           "<span class='" ~ type_color ~ "'>(" ~ val_type ~ ")</span> " ~
                           "<span class='" ~ hint_color ~ "'>(cut " ~ (val_ns.truncated_chars|string) ~ " chars)</span>"
                        ) %}
                    {% else %}
                        {% set _ = ns.lines.append(
                           "<span class='" ~ prefix_color ~ "'>" ~ k_escaped ~ ":</span> " ~
                           "<span class='" ~ value_color ~ "'>&apos;" ~ val_ns.trimmed ~ "&apos;</span> " ~
                           "<span class='" ~ type_color ~ "'>(" ~ val_type ~ ")</span>"
                        ) %}
                    {% endif %}
                    # If it's a Coord, show X/Y/Z/E
                    {% if val_type == 'Coord' and raw_val is defined %}
                        {% for axis in ['x','y','z','e'] %}
                            {% set val_axis = raw_val[axis]|default("n/a") %}
                            {% set val_axis_type = val_axis.__class__.__name__ %}
                            {% set val_axis_str = val_axis|string %}
                            {% set val_axis_escaped = val_axis_str.replace("'", "&apos;").replace("\"", "&quot;") %}
                            {% set val_color = color_value %}
                            {% if val_axis_type == 'bool' %}{% if val_axis_str == "True" %}{% set val_color = color_bool %}{% else %}{% set val_color = color_bool_false %}{% endif %}
                            {% elif val_axis_type in ['float', 'int'] %}{% set val_color = color_number %}
                            {% elif val_axis_type == 'str' %}{% set val_color = color_string %}
                            {% elif val_axis_type == 'NoneType' %}{% set val_color = color_none %}
                            {% else %}{% set val_color = color_object %}{% endif %}
                            {% set _ = ns.lines.append(
                               "<span class='" ~ color_index ~ "'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" ~ k_escaped ~ "." ~ axis ~ ":</span> " ~
                               "<span class='" ~ val_color ~ "'>" ~ val_axis_escaped ~ "</span> " ~
                               "<span class='" ~ color_type ~ "'>(" ~ val_axis_type ~ ")</span>"
                            ) %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
                {% if not (params.FORCE|default(false) in ["1","True","true"]) and all_keys|length > key_cutoff %}
                    {% set remaining = all_keys|length - key_cutoff %}
                    {% set _ = ns.lines.append("<span class='" ~ color_text ~ "'>... " ~ (remaining|string) ~ " keys. (Use FORCE=1 to print all.)</span>") %}
                {% endif %}
            {% else %}{% set _ = ns.lines.append("<span class='" ~ color_text ~ "'>printer." ~ path_escaped ~ " has no keys or contents.</span>") %}{% endif %}
        {% endif %}
    {% endif %}
    # Finally, if we have any lines to show, join them into one single response
    {% set joined_lines = ns.lines|join("<br>") %}
    {% if joined_lines %}
        RESPOND MSG="{joined_lines}"
    {% endif %}



