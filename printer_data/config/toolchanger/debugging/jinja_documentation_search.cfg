[gcode_macro DOC_DUMP]
# Do take note that these are only '.somethings()' and not '|somethings()'! those arent exposed :(
#
# valid filters (|somethings) are:
#   default, int, float, round, lower, upper, replace, join, length, count, list, last, map, select, reject
#   rejectattr, sort, dictsort, items, abs, max, min, sum, format, safe, e, escape, string, title, capitalize, trim
#   truncate, indent, batch, center, slice, unique, reverse, random, pprint, filesizeformat, wordcount, wordwrap, urlencode, urlize, xmlattr, d
#
# print(list(Environment().tests.keys()))
#     'odd', 'even', 'divisibleby', 'defined', 'undefined', 'filter', 'test', 'none', 
#     'boolean', 'false', 'true', 'integer', 'float', 'lower', 'upper', 'string', 'mapping', 
#     'number', 'sequence', 'iterable', 'callable', 'sameas', 'escaped', 'in', '==', 'eq', 
#     'equalto', '!=', 'ne', '>', 'gt', 'greaterthan', 'ge', '>=', '<', 'lt', 'lessthan', '<=', 'le'

#############################
variable_splitter_key: '§'
#############################
description: "Usage: DOC_DUMP S=foo§bar   (§ = AND, case-insensitive)"
variable_color_obj:   "rgb(0,150,255)" 
variable_color_meth:  "rgb(255,200,50)" 
variable_color_doc:   "rgb(180,180,180)" # fiddle if you want idc
variable_color_match: "rgb(255,0,100)"
gcode:
    {% set query   = params.S|default("")|string %}
    {% set terms   = query.lower().split(splitter_key) %}
    {% set include__ = params.DUNDER|default(False) %} # dunder = from down under = autstrialian (double under -> __ :P)
    {% set skipdocs = query == "" %}

    {% set types = [
        ["string",   ""], ["list",  []],  ["dictionary",  {}], # actual objects. cant think of more 
        ["tuple", ()],    ["int", 0|int], ["float", 0.0], ["self", self], ["generator", {}|select] # (casting 0 to |int cause im paranoid)
    ] %}

    # ──────────────────────────────────────────────────────────────
    # Highlight helper – returns the (possibly) highlighted string
    {% macro highlight(text, term) %}
        {% set L = term|length %}
        {% set idx = text.lower().find(term) %}
        {% set return = text[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ text[idx:idx+L] ~ "</span>" ~ text[idx+L:] if idx != -1 else text %}
        {return}
    {%- endmacro %}
    # ──────────────────────────────────────────────────────────────
    # similar but cursed cause docs use weird formatting i dunno
    {% macro format_doc(text) %}
        {% set parts = text.split('\n\n') %}
        {% set paragraphs = [] %}
        {% for p in parts %}
            {% set _ = paragraphs.append(p|replace('\n', ' ')|trim) %}
        {% endfor %}
        {paragraphs|join('<br>')}
    {%- endmacro %}

    # fill buckets[typename] -> list of HTML rows
    {% set buckets = namespace(total=0, data={}) %}
    {% for typ, obj in types %}{% set _ = buckets.data.update({typ: []}) %}{% endfor %}

    {% for typ, obj in types %}
        {% for meth in obj.__dir__() %} # meth
            {% if not (meth.startswith("__") and meth.endswith("__")) or include__ %}
                {% set fn = obj|attr(meth) %}
                {% if fn and (fn.__doc__ or skipdocs) %}
                    {% set search_docs = fn.__doc__ if not skipdocs else '' %}
                    {% set keep = namespace(ok=true) %} # the more namespaces the better because you never loose track, right?
                    {% for t in terms %}{% set keep.ok=false if t and t not in (typ ~ " " ~ meth ~ " " ~ search_docs).lower() else keep.ok %}{% endfor %}

                    {% if keep.ok %}
                        {% set buckets.total = buckets.total + 1 %}
                        # escape
                        {% set mask = namespace(meth_html = meth, doc_html = format_doc(search_docs|e)) %}
                        {% for t in terms %}
                            {% set mask.meth_html = highlight(mask.meth_html, t) %}
                            {% set mask.doc_html  = highlight(mask.doc_html,  t) %}
                        {% endfor %}
                        {% set row = "<div style='margin-left:1em'><span style='color:" ~ color_obj  ~ "'>" ~ typ
                                ~ "</span>.<span style='color:" ~ color_meth ~ "'>"  ~ mask.meth_html ~ "<br>"
                                ~ "<span style='color:" ~ color_doc  ~ "; white-space:pre-wrap; font-size:small;'>" ~ mask.doc_html
                                ~ "</span></div>" %}
                        {% set _ = buckets.data[typ].append(row) %}
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {% if buckets.total == 0 %}
        RESPOND MSG="No doc matches found for '{query}'"
    {% else %}
        {% set sections = [] %}
        {% for pair in types %}
            {% set typ = pair[0] %}
            {% if buckets.data[typ] %}
                {% set block = "<details><summary>" ~ typ ~ " (" ~ buckets.data[typ]|length|string ~ ")</summary>" ~ buckets.data[typ]|join('') ~ "</details>" %}
                {% set _ = sections.append(block) %}
            {% endif %}
        {% endfor %}
        {% set msg = "Found " ~ buckets.total|string ~ " matches for '" ~ query ~ "':" ~ sections|join('')|replace('\n', '') %}
        RESPOND MSG="{msg}"
    {% endif %}







