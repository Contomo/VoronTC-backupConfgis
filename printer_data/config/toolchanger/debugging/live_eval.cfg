


[gcode_macro _DEBUG_OUTPUT_OLD]
description: """evaluate gcode macros/jinja code at runtime for testing.
               Usage: _DEBUG_OUTPUT_OLD <HELLO>=\"<{action_respond_info('WORLD')}>\" """
gcode:
    {% set gcode = printer.printer.lookup_object('gcode') %}
    {% set gm    = printer.printer.lookup_object('gcode_macro') %}
    {% set ctx   = gm.create_template_context() %}
    {% for key, val in params.items() if params %}
        {% if '{' not in val and '}' not in val and not val.startswith('RESPOND') and not val.startswith("{'RESPOND") %}
            {% set val = ('{action_respond_info((' ~ val ~ ')|string|e)}') %}
        {% endif %}
        {% set rendered = gm.env.from_string(val).render(ctx) %}
        {% set _        = (gcode.run_script_from_command(rendered)) if rendered else action_respond_info(rendered|string|e) %}
        {action_respond_info(key)}
    {% else %}
        {action_respond_info("Usage: _DEBUG_OUTPUT_OLD <HELLO>=\"<{action_respond_info('WORLD')}>\"")}
    {% endfor %}




[gcode_macro DEBUG_OUTPUT]
description: "Render a gcode_macro (no execution) OR evaluate ad-hoc Jinja, with per-key captured output blocks."
gcode:
    {% set name  = params.MACRO|default('', true) %}
    {% set gm    = printer.printer.lookup_object('gcode_macro') %}
    {% set gcode = printer.printer.lookup_object('gcode') %}
    {% set exec  = params.EXEC|default(0, true)|int %}

    {% set kept, execs, sinkbuf = [], [], [] %}
    {%- macro sink(m='') -%}{%- set _ = sinkbuf.append(m|string) -%}{%- endmacro -%}
    {%- macro install(ctx) -%}
        {%- set _ = ctx.update({
            'action_respond_info': sink,
            'action_raise_error':  sink,
            'action_call_remote_method': sink,
        }) -%}
    {%- endmacro -%}

    {% if name %}
        {% set obj = printer.printer.lookup_object('gcode_macro ' ~ name, None) %}
        {% if obj is none %}
            {action_respond_info("DEBUG_OUTPUT: unknown macro '" ~ name ~ "'")}
        {% else %}
            {% set ctx = obj.template.create_template_context() %}
            {% set _ = ctx.update(obj.variables) %}

            {% set fwd = {} %}
            {% for k, v in params.items() if k != 'MACRO' and k != 'EXEC' %}
                {% set _ = fwd.update({k: v}) %}
            {% endfor %}
            {% set _ = ctx.update({'params': fwd}) %}

            {% set _ = install(ctx) %}

            {% set rendered = obj.template.render(ctx)|replace('\r', '') %}

            {% for line in rendered.split('\n') %}
                {% set t = line|trim %}
                {% if t %}
                    {% set _ = kept.append(line) %}
                    {% if t.startswith('SET_GCODE_VARIABLE ') or t == 'M400' %}
                        {% set _ = execs.append(t) %}
                    {% endif %}
                {% endif %}
            {% endfor %}

            {% set head = "<div style='font-size:12px; margin-bottom:3px;'><b>DEBUG_OUTPUT</b> " ~ name|e ~ "</div>" %}
            {% set body = "<div style='font-size:12px; background-color:rgba(0,0,0,0.35); border:1px solid rgba(255,255,255,0.18); border-radius:4px; padding:4px; margin-top:2px;'><pre style='margin:0; white-space:pre'>" ~ (kept|join('\n')|e) ~ "</pre></div>" %}
            {action_respond_info(head ~ body)}

            {% for m in cap %}
                {% set t = m|string %}
                {% if ('|' ~ name) in t and ('|DEBUG_OUTPUT MACRO=' ~ name) not in t %}
                    {% set t = t|replace('|' ~ name ~ ' ', '|DEBUG_OUTPUT MACRO=' ~ name ~ ' ') %}
                    {% set t = t|replace('|' ~ name ~ '|', '|DEBUG_OUTPUT MACRO=' ~ name ~ '|') %}
                {% endif %}
                {action_respond_info(t)}
            {% endfor %}

            {% for cmd in execs %}
                {cmd}
            {% endfor %}
        {% endif %}

    {% else %}
        {% if not params %}
            {action_respond_info("Usage: DEBUG_OUTPUT FOO=\"(1+2)\"  BAR=\"<{action_respond_info('hi')}>\"  or  DEBUG_OUTPUT MACRO=SOME_MACRO ...")}
        {% else %}
            {% for key, raw in params.items() if key != 'EXEC' %}
                {% set ctx = gm.create_template_context() %}
                {% set _ = install(ctx) %}

                {% set val = raw %}
                {% if '{' not in val and '}' not in val
                      and not val.startswith('RESPOND')
                      and not val.startswith("{'RESPOND") %}
                    {% set val = ('{action_respond_info((' ~ val ~ ')|string|e)}') %}
                {% endif %}

                {% set rendered = gm.env.from_string(val).render(ctx) %}
                {% set out = sinkbuf|join('\n')|replace('\r','') %}
                {% if not out %}
                    {% set out = rendered|replace('\r','') %}
                {% endif %}

                {% set head = "<div style='font-size:12px; margin:6px 0 3px 0;'><b>EVALÂ·JINJA</b> " ~ key|e ~ "</div>" %}
                {% set body = "<div style='font-size:12px; background-color:rgba(0,0,0,0.35); border:1px solid rgba(255,255,255,0.18); border-radius:4px; padding:4px;'><pre style='margin:0; white-space:pre'>" ~ (out|e) ~ "</pre></div>" %}
                {action_respond_info(head ~ body)}

                {% if exec and rendered %}
                    {% set _ = gcode.run_script_from_command(rendered) %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endif %}