

# Non-breaking space: 
# Thin space 
# Hair space 
# Six-per-em space 
# Em space 


[gcode_macro UI_CENTRAL]
description: 'get it? like comedy central, but its UI'
# ╭────────────────── Centralized UI settings ───────────────────╮
variable_ui_settings: {
        'buttons': {
            'back':    ('[ ↩ ]',  'success'),    
            'next':    ('[ ↪ ]',  'primary'),    
            'confirm': ('[ ✔ ]',  'green'),
            'cancel':  ('[ 🗙 ]',  'error'),     
            'close':   ('[ ✖ ]',  'red'),
            'reset':   ('[ ↻ ]',  'warning'),    
            'save':    ('[ 🖫 ]',  'success'),  # 🖫 💾 ⎙ ⬓ ⌘ 🖪 🖬
            'edit':    ('[ ✎ ]',  'info'),      
            'delete':  ('[ 🗑 ]',  'error'),     
            'add':     ('[ ＋ ]',  'success'),   
            'info':    ('[ ℹ ]',   'info'),      
            'config':  ('[ ⚙ ]',  'rgba(255, 255, 255, 0.4)'), 
            'refresh': ('[ ⟳ ]',  'rgba(0, 255, 242, 0.58)'),
            'off':     ('[ ⏻ ]',  'warning--text text--darken2'),
            'tools':   ('[ 🛠 ]',  'primary'),
            'warn':    ('[ ⚠ ]',   'warning'),
            'help':    ('[ ❔ ]',  'info'),
            'stop':    ('[ ⏹ ]',   'error'),      # Full stop
            'pause':   ('[ ⏸ ]',   'warning'),
            'play':    ('[ ▶ ]',   'success'),    #  ⏵ ►
        },
        'nav_color_map': {
            'save':  'success',
            'on':     'rgba(255, 255, 255, 0.5)',
            'off':    'rgba(0,   0,   0,   0.5)',
        },
        'colors': {
            'choices': ['accent--text text--darken-3', 'accent--text text--darken-2', 'accent--text text--darken-1',
                        'accent--text',
                        'accent--text text--lighten-1', 'accent--text text--lighten-2', 'accent--text text--lighten-3'],
            'select':  ['rgba(100, 255, 0, 0.8)', 'rgba(100, 255, 0, 0.2)'],
            'select2': ['rgba(0, 225, 255, 0.8)', 'rgba(0, 225, 255, 0.2)'],
            'select3': ['rgba(100, 0, 255, 0.8)', 'rgba(100, 0, 255, 0.2)'],
            'enabled':  'green',
            'problem':  'yellow',
            'disabled': 'red',
            'n/a':      'rgba(100, 100, 100, 0.2)',
            'backup':   'accent',
            'unassign': 'rgba(45, 189, 199, 1)',
            'active':  'rgba(255, 255, 255, 0.8)',
            'default': 'rgba(255, 255, 255, 0.25)',
        },
        'arrows': {
            'small':     [ '←',  '→',  '↑', '↓', '↖', '↗', '↘', '↙' ],
            'large':     [ '⬅', '➡', '⬆', '⬇', '⬉', '⬊', '⬋', '⬈' ],
            'rotate':    [ '↺', '↻', '↶', '↷', '⭮', '⭯' ],
            'cycle':     [ '⟳', '⟲', '⥀', '⥁' ],
            'undo':      [ '⮌', '⮍', '⤺', '⤻' ],
            'home':      [ '⇤', '⇥', '⤒', '⤓' ],
            'sync':      [ '⇄', '⇆', '⇅', '⇵' ],
            'bar_dot':   [ '⤝', '⤞', '⤟', '⤠' ],
            'ribbon':    [ '⮰', '⮱', '⮲', '⮳' ],
        },
    }
# ╰──────────────────────────────────────────────────────────────╯
gcode:
    {%- macro ui(msg) -%}  { action_respond_info('action:prompt_' ~ msg) } {%- endmacro -%}
    {%- macro add(msg) -%} { ui(msg) }{ ui('show') }                       {%- endmacro -%}
    {%- macro ui_but_spaced(button) -%}  
        {ui('button_group_start')} {ui('button ' ~ button)} {ui('button_group_end')} 
    {%- endmacro -%}
    
    {ui('begin Macros')}
    {% for thing in printer.gcode.commands if thing.endswith('_UI') or thing.endswith('_MANAGER') %}
        {ui_but_spaced(thing)}
    {% endfor %}

    {ui('show')}



[gcode_macro ADJUST_TOOL_OFFSETS_UI]
variable_ui_settings: {
        'nav_color_map': {
            'back':  'success',
            'close': 'error',
            'reset': 'warning',
            'on':     'rgba(255, 255, 255, 0.6)',
            'off':    'rgba(0, 0, 0, 0.2)',
        },
        'button_color_map': {
            'active':  'rgba(255, 255, 255, 0.8)',
            'default': 'rgba(255, 255, 255, 0.4)'
        },
        'increment_choices':  [1.0, 0.1, 0.05, 0.01],
    }
variable_state: {}
variable_saves: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set svv     = printer.save_variables.variables %}
    {% set tc      = printer.toolchanger %}
    {% set BUTS    = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
    {% set SELF    = 'ADJUST_TOOL_OFFSETS_UI' %}
    {% set UI_CFG  = ui_settings %}
    {% set NAV_COL = UI_CFG.nav_color_map %}
    {% set BUT_COL = UI_CFG.button_color_map %}
    {% set INCR    = UI_CFG.increment_choices %}

    # ╭─────────────────────────────────── helpers ───────────────────────────────────╮
    {%- macro ui(msg) -%}   { action_respond_info('action:prompt_' ~ msg) } {%- endmacro -%}
    {%- macro add(txt)-%}   { ui(txt) }{ ui('show') }                       {%- endmacro -%}
    {%- macro key(tn) -%}   { 'offsets_' ~ tch.tk_lower(tn) }               {%- endmacro -%}
    {%- macro offset_line(tn) -%}
        {% set offs = svv.get(key(tn), {}) %}
        {- tch.tool_key(tn) ~ ' → ' -}
        {%- for key, value in offs.items() if offs.keys()|length >= 3 -%}
            {- key[0]|upper ~ ': ' ~ '%+.2f'|format(value) ~ ' mm'}{', ' if not loop.last else '' -}
        {%- else -%}
            {'n/A'}
        {%- endfor -%}
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────────── saves helpers ───────────────────────────────────╮
    {%- macro save_state(label, tns) -%}
        {% for tn in tns if svv.get(key(tn), none) is mapping %}
            { svh.gcode_var_update(SELF, 'saves.' ~ label ~ '.' ~ key(tn), svv.get(key(tn))) }
        {% endfor %}
    {%- endmacro -%}

    {%- macro restore_state(label, tns) -%}
        {% set snapshot = printer['gcode_macro ' ~ SELF].saves.get(label, {}) %}
        {% for tn in tns %}
            {% set cur = snapshot.get(key(tn), none) %}
            {% if cur is mapping %}
                { svh.svf_update(key(tn), cur) }
            {% endif %}
        {% endfor %}
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────── first‑run initialisation ───────────────╮
    {% if not saves.initialized|default(False) %}
        { save_state('init', tc.tool_numbers) }
        {% set prev = svv.get('datapile', {}).get(SELF, none) %}
        {% if prev is mapping %}
            { svh.gcode_var_update(SELF, 'state', prev) }
        {% else %}
            { svh.gcode_var_update(SELF, 'state.pe', False) }
            { svh.gcode_var_update(SELF, 'state.inc_idx', 2) }
        {% endif %}
        { svh.gcode_var_update(SELF, 'saves.initialized', True) }
    {% endif %}
    # ╰───────────────────────────────────────────────────────╯

    # ╭────────────────────────────── param handling ──────────────────────────────╮
    {% if not params %}
        { save_state('session', tc.tool_numbers) }
    {% endif %}

    {% if 'STEP' in params %}
        { svh.gcode_var_update(SELF, 'state.inc_idx', params.STEP|int) }
    {% endif %}

    {% if 'PROBE' in params %}
        { svh.gcode_var_update(SELF, 'state.pe', not state.pe) }
    {% endif %}

    {% if 'AX' in params and 'T' in params and 'AMOUNT' in params %}
        {% set tn     = params.T|int %}
        {% set field  = 'probe' if params.AX == 'P' else params.AX|lower %}
        { svh.svf_edit_value(key(tn) ~ '.' ~ field, params.AMOUNT|float) }
        {% if tn == tc.tool_number and 'xyz' in printer.toolhead.homed_axes|lower %}
            TC_LOAD_OFFSETS T={tn}
        {% endif %}
        #{ add('text ↻ ' ~ offset_line(tn)) }
    {% endif %}

    {% if 'RESET' in params %}
        {% set tns = [(params.T|int)] if 'T' in params else tc.tool_numbers %}
        {% set restore_from = 'init' if params.RESET == 'FIRST' else 'session' %}
        {restore_state(restore_from, tns)}
        { add('text ↻ ' ~ tch.tool_key(tn) ~ ' reset → ' ~ tns ~ ' to ' ~ restore_from) }
    {% endif %}
    # ╰─────────────────────────────────────────────────────────────────────────────╯

    # need to do this to grab the "live" object
    {% set state = printer['gcode_macro ' ~ SELF].state %}

    # ╭────────────────────────────────────────────────── main page ──────────────────────────────────────────────────╮
    {%- macro render_main() -%}
        { ui('begin select the tool to adjust') }
        { ui('button_group_start') }
        {% for tn in tc.tool_numbers %}
            {% set col = BUT_COL['active'] if tn == tc.tool_number else BUT_COL['default'] %}
            { ui('button ' ~ tch.tool_key(tn) ~ '|' ~ SELF ~ ' PAGE=TOOL T=' ~ tn ~ '|' ~ col) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~       '|UI_CENTRAL|'                  ~ BUTS.back[1]) }
        { ui('footer_button [P]|'   ~ SELF ~ ' PROBE=TOGGLE PAGE=MAIN|'          ~ NAV_COL[state.pe and 'on' or 'off']) }
        { ui('footer_button ' ~ BUTS.reset[0] ~  ' sess|' ~ SELF ~ ' RESET=SESSION|' ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ ' first|' ~ SELF ~ ' RESET=FIRST|'   ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~       '|' ~ SELF ~ ' PAGE=CLOSE|'    ~ BUTS.close[1]) }
        { ui('show') }
        {% for tn in tc.tool_numbers %}
            { ui('text ' ~ offset_line(tn)) }
        {% endfor %}
        { ui('show') }
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────────────────── tool adjustment page ─────────────────────────────────────────────╮
    {%- macro render_tool(tn) -%}
        { ui('begin adjust ' ~ tch.tool_key(tn)) }
        { ui('button_group_start') }
        {% for idx in range(INCR|length) %}
            {% set col = BUT_COL['active'] if idx == state.inc_idx else BUT_COL['default'] %}
            { ui('button ' ~ INCR[idx] ~ '|' ~ SELF ~ ' STEP=' ~ idx ~ ' PAGE=TOOL T=' ~ tn ~ '|' ~ col) }
        {% endfor %}
        { add('button_group_end') }
        {% for sign in ['+', '-'] %}
            { ui('button_group_start') }
            {% set val = ('-' if sign == '-' else '') ~ INCR[state.inc_idx] %}
            {% for axis in ['X','Y','Z','P'] if (axis != 'P' or state.pe) %}
                { ui('button ' ~ axis ~ sign ~ '|' ~ SELF ~ ' AX=' ~ axis ~ ' AMOUNT=' ~ val ~ ' T=' ~ tn ~ '|' ~ BUT_COL['default']) }
            {% endfor %}
            { add('button_group_end') }
        {% endfor %}
        { ui('footer_button ' ~ BUTS.back[0] ~        '|' ~ SELF ~ ' PAGE=MAIN|'     ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ '  sess|' ~ SELF ~ ' RESET=SESSION|' ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ ' first|' ~ SELF ~ ' RESET=FIRST|'   ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~       '|' ~ SELF ~ ' PAGE=CLOSE|'    ~ BUTS.close[1]) }
        { ui('show') }
        { add('text ' ~ offset_line(tn)) }
    {%- endmacro -%}
    #  ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    {%- macro close() -%}
        { ui('end') }
        { svh.svf_update('datapile.' ~ SELF, state) }
    {%- endmacro -%}

    # ╭─────────────── dispatcher ───────────────╮
    {% if not params %}
        { render_tool(tc.tool_number) }
    {% elif 'PAGE' in params and params.PAGE == 'CLOSE' %}
        { close() }
    {% elif 'PAGE' in params and params.PAGE == 'TOOL' %}
        { render_tool(params.T|int) }
    {% elif params.PAGE == 'MAIN' %}
        { render_main() }
    {% endif %}
    # ╰──────────────────────────────────────────╯







[gcode_macro TC_CALIRATE_UI]
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set BUTS = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}

    # ╭─────────────────────────────────────── UI Helpers ───────────────────────────────────────╮
    {%- macro ui(msg) -%}         { action_respond_info('action:prompt_' ~ msg) }   {%- endmacro -%}
    {%- macro add(msg) -%}        { ui(msg) }{ ui('show') }                         {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────╯
    {ui('begin OFFSET CALIBRATION MACROS')}
    {ui('button_group_start')}
    {ui('button [0] locate sensor|TC_FIND_FIRST_CALIBRATION_PROBE_POSITION')}
    {ui('button [1] calibrate ttbz|TC_FIND_PROBE_TRIGGER_TO_BOTTOM')}
    {ui('button_group_end')}
    {ui('button_group_start')}
    {ui('button [2] _MOVE_OVER_PROBE|_MOVE_OVER_PROBE')}
    {ui('button [3] TC_PROBE_CALIBRATION_PROBE|TC_PROBE_CALIBRATION_PROBE PROBE=0')}
    {ui('button [4] TC_PROBE_CALIBRATION_PROBE|TC_PROBE_CALIBRATION_PROBE PROBE=1')}
    {ui('button [5] TC_FIND_TOOL_OFFSETS|TC_FIND_TOOL_OFFSETS')}
    {ui('button_group_end')}
    {ui('text [0] use this to get the calibration probe location if its unknown')}
    {ui('text [1] calibrate the trigger to bottom z using a hand calibrated tool probe. (the current one)')}
    {ui('text [2] moves over the calibration probe')}
    {ui('text [3|4] probes the calibration probe using the current tool, does not save.')}
    {ui('text [5] Run a calibration sequence on all tools. ')}
    {ui('footer_button ' ~ BUTS.back[0]  ~ '|UI_CENTRAL|' ~ BUTS.back[1])}
    {ui('footer_button ' ~ BUTS.close[0] ~ '|RESPOND TYPE=command MSG=action:prompt_end|' ~ BUTS.close[1])}
    {ui('show')}






[gcode_macro TOOL_REMAP_UI]
gcode:
    {% set p, tc = printer, printer.toolchanger %}
    {% set ok = True %}

    {% set colors = p['gcode_macro _toolchanger_settings'].color_scheme if 'gcode_macro _toolchanger_settings' in p else {'default': 'info', 'highlight': 'accent'} %}

    {%- macro ui(txt) -%}{- action_respond_info("action:prompt_" ~ txt) -}{%- endmacro -%}

    {% if 'T' in params and 'TN' in params %}
        {% set t_macro_num, tool_num = params.T|int, params.TN|int %}
        {% set tool_name = tc.tool_names[tool_num] %}
        {% if p['gcode_macro T' ~ t_macro_num].tool_number|int == tool_num %}
            {ui("begin ! T" ~ t_macro_num ~ " is already mapped to " ~ tool_name ~ ' !')}  
            {ui("button OK|TOOL_REMAP_UI T=" ~ t_macro_num ~ "|warning")}
            {ui("show")}
            {% set ok = False %}
        {% else %}
            SET_GCODE_VARIABLE MACRO=T{t_macro_num} VARIABLE=tool_number VALUE={params.TN}
            {% set _ = p['gcode_macro T' ~ params.T].update({'tool_number': params.TN|int}) %} # update it locally too, so following UI is up to date
        {% endif %}
    {% endif %}

    {% if ('T' in params and 'TN' not in params) and ok %}
        {% set t_macro_num = params.T|int %}
        {% set mapped_tn = p['gcode_macro T' ~ t_macro_num].tool_number|int %}
        {ui("begin select tool for T" ~ t_macro_num)}  
        {ui("button_group_start")}
        {% for tn in tc.tool_numbers %}
            {% set tool_name = tc.tool_names[tn] %}
            {ui("button " ~ tool_name ~ "|TOOL_REMAP_UI T=" ~ t_macro_num ~ " TN=" ~ tn ~ "|" ~ (colors.highlight if tn == mapped_tn else colors.default))}
        {% endfor %}
        {ui("button_group_end")}
        {ui("footer_button ← Back|TOOL_REMAP_UI|success")}
        {ui("footer_button Cancel|RESPOND TYPE=command MSG=action:prompt_end|error")}
        {ui("show")}
    {% elif ok %}
        {ui("begin Select T macro to remap")}
        {ui("button_group_start")}
        {% for stuff in p if stuff.startswith('gcode_macro T') and 'tool_number' in p[stuff] %}
            {% set t_macro_num = stuff|replace('gcode_macro T', '')|int %}
            {% set mapped_tn   = p[stuff].tool_number|int %}
            {% set tool_name   = tc.tool_names[mapped_tn] %}
            {% set tn = p[tool_name].tool_number %}
            {ui("button T" ~ t_macro_num ~ (" → " ~ tool_name if mapped_tn != -1 else '') ~ "|TOOL_REMAP_UI T=" ~ t_macro_num ~ "|" ~ (colors.highlight if tn == tc.tool_number and False else colors.default))}
        {% endfor %}
        {ui("button_group_end")}
        {ui("footer_button Refresh|TOOL_REMAP_UI|success")}
        {ui("footer_button Close|RESPOND TYPE=command MSG=action:prompt_end|error")}
        {ui("show")}
    {% endif %}



