

# Non-breaking space: 
# Thin space 
# Hair space 
# Six-per-em space 
# Em space 


[gcode_macro UI_CENTRAL]
description: 'get it? like comedy central, but its UI'
# ╭────────────────── Centralized UI settings ───────────────────╮
variable_ui_settings: {
        'buttons': {
            'back':    ('[ ↩ ]',  'success'),    
            'next':    ('[ ↪ ]',  'primary'),    
            'confirm': ('[ ✔ ]',  'green'),
            'cancel':  ('[ 🗙 ]',  'error'),     
            'close':   ('[ ✖ ]',  'red'),
            'reset':   ('[ ↻ ]',  'warning'),    
            'save':    ('[ 🖫 ]',  'success'),  # 🖫 💾 ⎙ ⬓ ⌘ 🖪 🖬
            'edit':    ('[ ✎ ]',  'info'),      
            'delete':  ('[ 🗑 ]',  'error'),     
            'add':     ('[ ＋ ]',  'success'),   
            'info':    ('[ ℹ ]',   'info'),      
            'config':  ('[ ⚙ ]',  'rgba(255, 255, 255, 0.4)'), 
            'refresh': ('[ ⟳ ]',  'rgba(0, 255, 242, 0.58)'),
            'off':     ('[ ⏻ ]',  'warning--text text--darken2'),
            'tools':   ('[ 🛠 ]',  'primary'),
            'warn':    ('[ ⚠ ]',   'warning'),
            'help':    ('[ ❔ ]',  'info'),
            'stop':    ('[ ⏹ ]',   'error'),      # Full stop
            'pause':   ('[ ⏸ ]',   'warning'),
            'play':    ('[ ⏵ ]',   'success'),    # ▶ ⏵ ►
        },
        'nav_color_map': {
            'save':  'success',
            'on':     'rgba(255, 255, 255, 0.5)',
            'off':    'rgba(0,   0,   0,   0.5)',
        },
        'colors': {
            'choices': ['accent--text text--darken-3', 'accent--text text--darken-2', 'accent--text text--darken-1',
                        'accent--text',
                        'accent--text text--lighten-1', 'accent--text text--lighten-2', 'accent--text text--lighten-3'],
            'select':  ['rgba(100, 255, 0, 0.8)', 'rgba(100, 255, 0, 0.2)'],
            'select2': ['rgba(0, 225, 255, 0.8)', 'rgba(0, 225, 255, 0.2)'],
            'select3': ['rgba(100, 0, 255, 0.8)', 'rgba(100, 0, 255, 0.2)'],
            'enabled':  'green',
            'problem':  'yellow',
            'disabled': 'red',
            'n/a':      'rgba(100, 100, 100, 0.2)',
            'backup':   'accent',
            'unassign': 'rgba(45, 189, 199, 1)',
            'active':  'rgba(255, 255, 255, 0.8)',
            'default': 'rgba(255, 255, 255, 0.25)',
        },
        'arrows': {
            'small':     [ '←',  '→',  '↑', '↓', '↖', '↗', '↘', '↙' ],
            'large':     [ '⬅', '➡', '⬆', '⬇', '⬉', '⬊', '⬋', '⬈' ],
            'rotate':    [ '↺', '↻', '↶', '↷', '⭮', '⭯' ],
            'cycle':     [ '⟳', '⟲', '⥀', '⥁' ],
            'undo':      [ '⮌', '⮍', '⤺', '⤻' ],
            'home':      [ '⇤', '⇥', '⤒', '⤓' ],
            'sync':      [ '⇄', '⇆', '⇅', '⇵' ],
            'bar_dot':   [ '⤝', '⤞', '⤟', '⤠' ],
            'ribbon':    [ '⮰', '⮱', '⮲', '⮳' ],
        },
    }
# ╰──────────────────────────────────────────────────────────────╯
gcode:
    {%- macro ui(msg) -%}  { action_respond_info('action:prompt_' ~ msg) } {%- endmacro -%}
    {%- macro add(msg) -%} { ui(msg) }{ ui('show') }                       {%- endmacro -%}
    {%- macro ui_but_spaced(button) -%}  
        {ui('button_group_start')} {ui('button ' ~ button)} {ui('button_group_end')} 
    {%- endmacro -%}
    
    {ui('begin Macros')}
    {% for thing in printer.gcode.commands if thing.endswith('_UI') or thing.endswith('_MANAGER') %}
        {ui_but_spaced(thing)}
    {% endfor %}

    {ui('show')}
















[gcode_macro ADJUST_TOOL_OFFSETS_UI]
variable_ui_settings: {
        'nav_color_map': {
            'back':  'success',
            'close': 'error',
            'reset': 'warning',
            'on':     'rgba(255, 255, 255, 0.6)',
            'off':    'rgba(0, 0, 0, 0.2)',
        },
        'button_color_map': {
            'active':  'rgba(255, 255, 255, 0.8)',
            'default': 'rgba(255, 255, 255, 0.4)'
        },
        'increment_choices':  [1.0, 0.1, 0.05, 0.01],
    }
variable_state: {}
variable_saves: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set svv     = printer.save_variables.variables %}
    {% set tc      = printer.toolchanger %}
    {% set BUTS    = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
    {% set SELF    = 'ADJUST_TOOL_OFFSETS_UI' %}
    {% set UI_CFG  = ui_settings %}
    {% set NAV_COL = UI_CFG.nav_color_map %}
    {% set BUT_COL = UI_CFG.button_color_map %}
    {% set INCR    = UI_CFG.increment_choices %}

    # ╭─────────────────────────────────── helpers ───────────────────────────────────╮
    {%- macro ui(msg) -%}   { action_respond_info('action:prompt_' ~ msg) } {%- endmacro -%}
    {%- macro add(txt) -%}  { ui(txt) }{ ui('show') }                       {%- endmacro -%}
    {%- macro key(tn) -%}   { 'offsets_' ~ tch.tk_lower(tn) }               {%- endmacro -%}
    {%- macro offset_line(tn) -%}
        {% set offs = svv.get(key(tn), {}) %}
        {- tch.tool_key(tn) ~ ' → ' -}
        {%- for key, value in offs.items() if offs.keys()|length >= 3 -%}
            {- key[0]|upper ~ ': ' ~ '%+.2f'|format(value) ~ ' mm'}{', ' if not loop.last else '' -}
        {%- else -%}
            {'n/A'}
        {%- endfor -%}
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────────── saves helpers ───────────────────────────────────╮
    {%- macro save_state(label, tns) -%}
        {% for tn in tns if svv.get(key(tn), none) is mapping %}
            { svh.gcode_var_update(SELF, 'saves.' ~ label ~ '.' ~ key(tn), svv.get(key(tn))) }
        {% endfor %}
    {%- endmacro -%}

    {%- macro restore_state(label, tns) -%}
        {% set snapshot = printer['gcode_macro ' ~ SELF].saves.get(label, {}) %}
        {% for tn in tns %}
            {% set cur = snapshot.get(key(tn), none) %}
            {% if cur is mapping %}
                { svh.svf_update(key(tn), cur) }
            {% endif %}
        {% endfor %}
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────── first‑run initialisation ───────────────╮
    {% if not saves.initialized|default(False) %}
        { save_state('init', tc.tool_numbers) }
        {% set prev = svv.get('datapile', {}).get(SELF, none) %}
        {% if prev is mapping %}
            { svh.gcode_var_update(SELF, 'state', prev) }
        {% else %}
            { svh.gcode_var_update(SELF, 'state.pe', False) }
            { svh.gcode_var_update(SELF, 'state.inc_idx', 2) }
        {% endif %}
        { svh.gcode_var_update(SELF, 'saves.initialized', True) }
    {% endif %}
    # ╰───────────────────────────────────────────────────────╯

    # ╭────────────────────────────── param handling ──────────────────────────────╮
    {% if not params %}
        { save_state('session', tc.tool_numbers) }
    {% endif %}

    {% if 'STEP' in params %}
        { svh.gcode_var_update(SELF, 'state.inc_idx', params.STEP|int) }
    {% endif %}

    {% if 'PROBE' in params %}
        { svh.gcode_var_update(SELF, 'state.pe', not state.pe) }
    {% endif %}

    {% if 'AX' in params and 'T' in params and 'AMOUNT' in params %}
        {% set tn     = params.T|int %}
        {% set field  = 'probe' if params.AX == 'P' else params.AX|lower %}
        { svh.svf_edit_value(key(tn) ~ '.' ~ field, params.AMOUNT|float) }
        {% if tn == tc.tool_number and 'xyz' in printer.toolhead.homed_axes|lower %}
            TC_LOAD_OFFSETS T={tn}
        {% endif %}
        #{ add('text ↻ ' ~ offset_line(tn)) }
    {% endif %}

    {% if 'RESET' in params %}
        {% set tns = [(params.T|int)] if 'T' in params else tc.tool_numbers %}
        {% set restore_from = 'init' if params.RESET == 'FIRST' else 'session' %}
        {restore_state(restore_from, tns)}
        { add('text ↻ ' ~ tch.tool_key(tn) ~ ' reset → ' ~ tns ~ ' to ' ~ restore_from) }
    {% endif %}
    # ╰─────────────────────────────────────────────────────────────────────────────╯

    # need to do this to grab the "live" object
    {% set state = printer['gcode_macro ' ~ SELF].state %}

    # ╭────────────────────────────────────────────────── main page ──────────────────────────────────────────────────╮
    {%- macro render_main() -%}
        { ui('begin select the tool to adjust') }
        { ui('button_group_start') }
        {% for tn in tc.tool_numbers %}
            {% set col = BUT_COL['active'] if tn == tc.tool_number else BUT_COL['default'] %}
            { ui('button ' ~ tch.tool_key(tn) ~ '|' ~ SELF ~ ' PAGE=TOOL T=' ~ tn ~ '|' ~ col) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~       '|UI_CENTRAL|'                  ~ BUTS.back[1]) }
        { ui('footer_button [P]|'   ~ SELF ~ ' PROBE=TOGGLE PAGE=MAIN|'          ~ NAV_COL[state.pe and 'on' or 'off']) }
        { ui('footer_button ' ~ BUTS.reset[0] ~  ' sess|' ~ SELF ~ ' RESET=SESSION|' ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ ' first|' ~ SELF ~ ' RESET=FIRST|'   ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~       '|' ~ SELF ~ ' PAGE=CLOSE|'    ~ BUTS.close[1]) }
        { ui('show') }
        {% for tn in tc.tool_numbers %}
            { ui('text ' ~ offset_line(tn)) }
        {% endfor %}
        { ui('show') }
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────────────────── tool adjustment page ─────────────────────────────────────────────╮
    {%- macro render_tool(tn) -%}
        { ui('begin adjust ' ~ tch.tool_key(tn)) }
        { ui('button_group_start') }
        {% for idx in range(INCR|length) %}
            {% set col = BUT_COL['active'] if idx == state.inc_idx else BUT_COL['default'] %}
            { ui('button ' ~ INCR[idx] ~ '|' ~ SELF ~ ' STEP=' ~ idx ~ ' PAGE=TOOL T=' ~ tn ~ '|' ~ col) }
        {% endfor %}
        { add('button_group_end') }
        {% for sign in ['+', '-'] %}
            { ui('button_group_start') }
            {% set val = ('-' if sign == '-' else '') ~ INCR[state.inc_idx] %}
            {% for axis in ['X','Y','Z','P'] if (axis != 'P' or state.pe) %}
                { ui('button ' ~ axis ~ sign ~ '|' ~ SELF ~ ' AX=' ~ axis ~ ' AMOUNT=' ~ val ~ ' T=' ~ tn ~ '|' ~ BUT_COL['default']) }
            {% endfor %}
            { add('button_group_end') }
        {% endfor %}
        { ui('footer_button ' ~ BUTS.back[0] ~        '|' ~ SELF ~ ' PAGE=MAIN|'     ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ '  sess|' ~ SELF ~ ' RESET=SESSION|' ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ ' first|' ~ SELF ~ ' RESET=FIRST|'   ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~       '|' ~ SELF ~ ' PAGE=CLOSE|'    ~ BUTS.close[1]) }
        { ui('show') }
        { add('text ' ~ offset_line(tn)) }
    {%- endmacro -%}
    #  ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    {%- macro close() -%}
        { ui('end') }
        { svh.svf_update('datapile.' ~ SELF, state) }
    {%- endmacro -%}

    # ╭─────────────── dispatcher ───────────────╮
    {% if not params %}
        { render_tool(tc.tool_number) }
    {% elif 'PAGE' in params and params.PAGE == 'CLOSE' %}
        { close() }
    {% elif 'PAGE' in params and params.PAGE == 'TOOL' %}
        { render_tool(params.T|int) }
    {% elif params.PAGE == 'MAIN' %}
        { render_main() }
    {% endif %}
    # ╰──────────────────────────────────────────╯





[gcode_macro _FILAMENT_RUNOUT_MANAGER]
variable_ui_settings: {
        'button_color_map': {
            'enabled':  'green',
            'problem':  'yellow',
            'disabled': 'red',
            'n/a':      'rgba(50, 50, 50, 0.2)',
            'backup':   'accent',
            'unassign': 'rgba(0, 238, 255, 1)',
        },
        'button_prefix':   'gcode_button runout_',      # gcode_button prefix
        'svf_sensor_key':  'runout_sensors',            # key in save_variables for sensor states
        'svf_settings_key':'runout_settings',           # key in save_variables for configuration
        'state_map':       {'RELEASED': 'absent', 'TRIGGERED': 'present'}
    }
variable_last_button: None
variable_initialized: False
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set tc       = printer.toolchanger %}
    {% set svv      = printer.save_variables.variables %}
    {% set BUTS     = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
    {% set UI_CFG   = ui_settings %}
    {% set BUT_COL  = UI_CFG.button_color_map %}
    {% set SENS_KEY = UI_CFG.svf_sensor_key %}
    {% set SET_KEY  = UI_CFG.svf_settings_key %}
    {% set SET_DEFAULTS = {'state': 'disabled', 'backup': none} %}
    {% set PARENT   = printer['gcode_macro FILAMENT_RUNOUT'] %}
    {% set SELF     = '_FILAMENT_RUNOUT_MANAGER' %}

    # ╭─────────────────────────────────────── UI Helpers ───────────────────────────────────────╮
    {%- macro ui(msg) -%}         { action_respond_info('action:prompt_' ~ msg) }   {%- endmacro -%}
    {%- macro add(msg) -%}        { ui(msg) }{ ui('show') }                         {%- endmacro -%}
    {%- macro btn_name(i) -%}     { UI_CFG.button_prefix ~ tch.tool_key(i) }        {%- endmacro -%}
    {%- macro backup_arrow(i) -%} { '' if i is none else ' → ' ~ tch.tool_key(i) }  {%- endmacro -%}
    {%- macro is_loaded(i) -%}    { '' if svv.get(SENS_KEY, {}).get(tch.tk_lower(i), '') != 'present' else 'present' } {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── Initialisation ───────────────────────────────╮
    {% if not initialized %}
        {% for tn in tc.tool_numbers %}
            {% set key = tch.tk_lower(tn) %}
            {% set conf = svv.get(SET_KEY, {}).get(key, SET_DEFAULTS) %}
            { svh.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ key, conf) }
            { svh.svf_update(SET_KEY ~ '.' ~ key, conf) }
            {% set cur = None if btn_name(tn) not in printer else UI_CFG.state_map[printer[btn_name(tn)].state] %}
            { svh.svf_update(SENS_KEY ~ '.' ~ key, svv.get(SENS_KEY, {}).get(key, cur)) }
        {% endfor %}
        { svh.gcode_var_update(SELF, 'initialized', True) }
    {% endif %}
    # ╰──────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── Save / Reset ───────────────────────────────╮
    {% if params.get('SVF') == 'SAVE' %}
        {% for tn in tc.tool_numbers %}
            {% set key = tch.tk_lower(tn) %}
            {% set cur = PARENT.active_config.get(key, {}) %}
            { svh.svf_update(SET_KEY ~ '.' ~ key, {'state': cur.get('state', 'disabled'), 'backup': cur.get('backup', none)}) }
        {% endfor %}
        {% if last_button != 'save' %}{ add('text Saved current state') }{% endif %}
        { svh.gcode_var_update(SELF, 'last_button', 'save') }

    {% elif params.get('SVF') == 'RESET' %}
        {% for tn in tc.tool_numbers %}
            {% set key = tch.tk_lower(tn) %}
            { svh.svf_update(SET_KEY ~ '.' ~ key, SET_DEFAULTS) }
            { svh.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key, SET_DEFAULTS) }
        {% endfor %}
        { svh.gcode_var_update(SELF, 'last_button', 'reset') }
    {% endif %}
    # ╰────────────────────────────────────────────────────────────────────────────╯

    # ╭──────────────────────────────── Toggle ───────────────────────────────╮
    {% if 'TOGGLE' in params %}
        {% set i = params.TOGGLE|int %}
        {% if btn_name(i) in printer %}
            {% set key = tch.tk_lower(i) %}
            {% set conf = PARENT.active_config.get(key, {}) %}
            {% set newstate = 'enabled' if conf.get('state') != 'enabled' else 'disabled' %}
            { svh.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key ~ '.state', newstate) }
        {% endif %}
    {% endif %}
    # ╰──────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────── Backup assign / remove ───────────────────────╮
    {% if params.get('BACKUP') and params.get('SELECT') %}
        {% set _key = tch.tk_lower(params.BACKUP|int) %}
        { svh.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ _key ~ '.backup', params.SELECT|int) }
    {% elif params.get('REMOVE') %}
        {% set _key = tch.tk_lower(params.REMOVE|int) %}
        { svh.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ _key ~ '.backup', none) }
    {% endif %}
    # ╰─────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────── Main page render ───────────────────────────────╮
    {%- macro render_main() -%}
        {% set backup_but_empty, enabled_but_empty = [], [] %}
        { ui('begin toggle runout sensor') }
        { ui('button_group_start') }
        {% for tn in tc.tool_numbers %}
            {% set conf    = PARENT.active_config.get(tch.tk_lower(tn), {}) %}
            {% set exists  = btn_name(tn) in printer %}
            {% set cur_bkp = conf.get('backup', none)%}
            {% set state   = conf.get('state') if conf.get('state') == 'disabled' or is_loaded(tn) else 'problem' %}
            {% set color   = BUT_COL['n/a'] if not exists else BUT_COL[state] %}
            {% set action  = ' TOGGLE=' if exists else ' INVALID='  %}
            { ui('button ' ~ tch.tool_key(tn) ~ backup_arrow(cur_bkp) ~ '|' ~ SELF ~ action ~ tn ~ '|' ~ color) }
            {% if cur_bkp is not none and not is_loaded(tn) %}
                {% set _ = backup_but_empty.append("'" ~ tch.tool_key(tn) ~ "'") %}
            {% endif %}
            {% if state == 'problem' %}
                {% set _ = enabled_but_empty.append("'" ~ tch.tool_key(tn) ~ "'") %}
            {% endif %}
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~ '|UI_CENTRAL|' ~ BUTS.back[1]) }
        { ui('footer_button [ Backup ]|' ~ SELF ~ ' BACKUP=OPEN|' ~ BUT_COL['backup']) }
        { ui('footer_button ' ~ BUTS.save[0] ~  '|' ~ SELF ~ ' SVF=SAVE|'  ~ BUTS.save[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ '|' ~ SELF ~ ' SVF=RESET|' ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|'  ~ BUTS.close[1]) }
        { ui('show') }
        {% if enabled_but_empty %}
            { add('text ' ~ BUTS.info[0] ~ ' Tool/s ' ~ enabled_but_empty|join(', ') ~ ' are enabled but no filament detected!') }
        {% endif %}
        {% set backup_filtered = backup_but_empty|reject('in', enabled_but_empty)|list %}
        {% if backup_filtered %}
            { add('text ' ~ BUTS.info[0] ~ ' Tool/s ' ~ backup_filtered|join(', ') ~ ' have a backup assigned but no filament was detected!') }
        {% endif %}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────── Select a tool to back up ───────────────────────────╮
    {%- macro render_backup_list() -%}
        { ui('begin select tool to assign backup for') }
        { ui('button_group_start') }
        {% for tn in tc.tool_numbers %}
            {% set exists = btn_name(tn) in printer %}
            {% set conf   = PARENT.active_config.get(tch.tk_lower(tn), {}) %}
            {% set color  = BUT_COL['backup'] if exists else BUT_COL['n/a'] %}
            {% set action = ' BACKUP=' if exists else ' INVALID=' %}
            { ui('button ' ~ tch.tool_key(tn) ~ backup_arrow(conf.get('backup', none)) ~ '|' ~ SELF ~ action ~ tn ~ '|' ~ color) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~  '|' ~ SELF ~ '|' ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|' ~ BUTS.close[1]) }
        { ui('show') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    # ╭──────────────────── select a tool as backup for that tool ────────────────────╮
    {%- macro render_backup_select(src) -%}
        { ui('begin select backup for ' ~ tc.tool_names[src]) }
        { ui('button_group_start') }
        {% set cur_bkp = PARENT.active_config.get(tch.tk_lower(src), {}).get('backup', none) %}
        {% for tn in tc.tool_numbers if tn != src %}
            {% if cur_bkp == tn %}
                { ui('button ' ~ tch.tool_key(tn) ~ '|' ~ SELF ~ ' REMOVE=' ~ src ~ '|' ~ BUT_COL['unassign']) }
            {% else %}
                { ui('button ' ~ tch.tool_key(tn) ~ '|' ~ SELF ~ ' BACKUP=' ~ src ~ ' SELECT=' ~ tn ~ '|' ~ BUT_COL['backup']) }
            {% endif %}
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~  '|' ~ SELF ~ ' BACKUP=OPEN|' ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|'    ~ BUTS.close[1]) }
        {% if not is_loaded(src) %}
            { add('text ' ~ BUTS.info[0] ~ ' this tool is currently empty.') }
        {% endif %}
        { ui('show') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────── small popup when it runs out  ────────────────────────╮
    {%- macro render_runout_message(tool_number) -%}
        { ui('begin ' ~ BUTS.warn[0] ~ ' ' ~ tch.tool_key(tool_number) ~ ' just ran out of filament!') }
        { add('text action will be taken shorty, this just serves as a reminder toggle sensors/assign backup tools. (bit of a stub right now here)') }
        { ui('button_group_start') }
            { ui('button ' ~ BUTS.edit[0] ~  '|' ~ SELF ~ '|' ~ BUTS.edit[1]) }
            { ui('button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|' ~ BUTS.close[1]) }
        { add('button_group_end') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    {%- macro close() -%}
        { ui('end') }
        { svh.gcode_var_update(SELF, 'last_button', 'close') }
    {%- endmacro -%}

    # ╭────────────────────────────── Dispatcher ───────────────────────────────╮
    {% if not params or 'TOGGLE' in params or params.get('SVF') == 'RESET' %}
        { render_main() }
        {% if printer['gcode_macro ' ~ SELF].last_button == 'reset' %}
            { add('text ' ~ BUTS.info[0] ~ ' save to also reset/apply to save variables.') }
        {% endif %}
    {% elif params.get('BACKUP') == 'OPEN' or 'REMOVE' in params 
            or (params.get('BACKUP') and params.get('SELECT')) %}
        { render_backup_list() }
    {% elif params.get('BACKUP') and not params.get('SELECT') %}
        { render_backup_select(params.BACKUP|int) }
    {% elif params.get('UI') == 'CLOSE' %}
        { close() }
    {% elif 'RUNOUT' in params %}
        { render_runout_message(params.RUNOUT|int(-1)) }
    {% endif %}
    # ╰───────────────────────────────────────────────────────────────────────────╯

[gcode_macro _FILAMENT_INSERT_MANAGER]
variable_state: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}
    {% set tc     = printer.toolchanger %}
    {% set svv    = printer.save_variables.variables %}
    {% set MAIN   = printer['gcode_macro UI_CENTRAL'] %}
    {% set ARRWS  = MAIN.ui_settings.arrows %}
    {% set BUTS   = MAIN.ui_settings.buttons %}
    {% set COL    = MAIN.ui_settings.colors %}
    {% set SELF   = '_FILAMENT_INSERT_MANAGER' %}
    {% set PILE = svv.get('datapile', {}).get(SELF, {}) %}
    # ╭─────────────────────────────────────── UI Helpers ───────────────────────────────────────╮
    {%- macro ui(msg) -%}           { action_respond_info('action:prompt_' ~ msg) }   {%- endmacro -%}
    {%- macro add(msg) -%}          { ui(msg) }{ ui('show') }                         {%- endmacro -%}
    {%- macro center_but(label) -%} {(label).center(6, '⠀')}                          {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭──────────────────────────── render insert popup ─────────────────────────────╮
    {%- macro render_popup(tool_number) -%}
        {% set is_selected = tool_number == printer.toolchanger.tool_number %}
        {% set possible_temps = ['270', '255', '240', '225', '210', '205']%}
        { ui('begin ' ~ tch.tool_key(tool_number) ~ ' filament inserted!') }
        { ui('text Want to assign a temperature? (will get updated next in a print this tool is used in)') }
        { ui('button_group_start') }
        {% for temp in possible_temps %}
            { ui('button ' ~ temp ~ '°C|' ~ SELF ~ ' TEMP=' ~ temp ~ ' T=' ~ tool_number ~ '|' ~ COL.choices[loop.index]) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('show') }
        {% if printer.print_stats.state|lower != 'printing' %}
            {% set col_conf, col_canc = BUTS.confirm[1], BUTS.cancel[1] %}
        {% else %}
            { ui('text Unavalible during print...') }
            {% set col_conf, col_canc = COL['n/a'], COL['n/a'] %}
        {% endif %}
        { ui('text Want to ' ~ ('select, ' if not is_selected else '') ~ 'heat and center the tool?') }
        { ui('button_group_start') }
        { ui('button ' ~ BUTS.confirm[0] ~ '|' ~ SELF ~ ' SELECT=' ~ tool_number ~ '|' ~ col_conf) }
        { ui('button ' ~ BUTS.cancel[0]  ~ '|' ~ SELF ~ ' CANCEL=' ~ tool_number ~ '|' ~ col_canc) }
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.config[0] ~ ' dont show again|' ~ SELF ~ ' DISABLE=' ~ tool_number ~ '|' ~ BUTS.config[1]) }
        { ui('footer_button ' ~ BUTS.back[0] ~ '|UI_CENTRAL|' ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|'  ~ BUTS.close[1]) }
        { ui('show') }
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── temp selection ────────────────────────────────╮
    {%- macro save_selected_temp(tool_number, temp) -%}
        {% set key   = tch.tk_lower(tool_number) %}
        {% set short = tch.tool_key(tool_number) %}
        {% if state.get(key, {}).get('tmp', none) != temp %}
            { add('text ' ~ BUTS.save[0] ~ ' saved: ' ~ temp|int(-1) ~ ' °C for: ' ~ short) }
        {% endif %}
        { svh.svf_update('recent_tooltemps.' ~ key, temp) }
        { svh.gcode_var_update(SELF, 'state.' ~ key ~ '.tmp', temp) }
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────────╯

    {% macro add_extrude_some() %}
        { ui('button_group_start') }
        { ui('button ' ~ BUTS.next[0] ~ ' Extrude some?|' ~ SELF ~ ' EXTRUDE=OPEN' ~ '|' ~ BUTS.next[1]) }
        { add('button_group_end') }
    {%- endmacro -%}
    
    # ╭────────────────────────────────── select/heat ───────────────────────────────────╮
    {%- macro select_n_heat(tool_number) -%}
        {% if printer.print_stats.state|lower != 'printing' %}
            {tch.check_ok()}
            {% set key = tch.tk_lower(tool_number) %}
            {% if not state.get(key, {}).get('clicked') %}
                { add_extrude_some() }
            {% endif %}
            { svh.gcode_var_update(SELF, 'state.' ~ key ~ '.clicked', True) }

            {% set is_selected = tool_number == tch.get_mounted_tn()|int %}
            { ('MOVE_TO_CENTER Z=25 T=' ~ tool_number) if not is_selected else 'MOVE_TO_CENTER Z=25' }

            {% set temp = svv.get('recent_tooltemps', {}).get(key, 222) %}
            M104 S{temp}
        {% endif %}
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────── how much to extrude page ──────────────────────────────────╮
    {%- macro render_extrude_select(feed, extrude) -%}
        {% if printer.print_stats.state|lower != 'printing' %}
            {% set feeds   = [ 30, 15, 5, 20, 10, 2 ] %}
            {% set lengths = [ 100, 50, 5, 75, 10, 1 ] %}
            {% set selected_feed = state.get('feed', feeds[2]) if feed is not number else feed %}
            {% if extrude is none or feed is not none %}
                { svh.gcode_var_update(SELF, 'state.feed', selected_feed) }
                { add('begin Select Amount/Feed') }
                { ui('button_group_start') }
                {% for f in feeds %}
                    {% set col = COL.select3[(0 if f == selected_feed else 1)]  %}
                    { ui('button ' ~ center_but(f ~ '𝗆𝗆³∕𝗌') ~ '|' ~ SELF ~ ' FEED=' ~ f ~ '|' ~ col) }
                {% endfor %}
                { add('button_group_end') }
                { ui('button_group_start') }
                {% for l in lengths %}
                    { ui('button ' ~ center_but(l ~ '𝗆𝗆') ~ '|' ~ SELF ~ ' EXTRUDE=' ~ l ~ '|' ~ COL.default) }
                {% endfor %}
                { ui('button_group_end') }
                { ui('footer_button [ ' ~ ARRWS.large[2] ~ ' - retract 1mm ]|' ~ SELF ~ ' EXTRUDE=-1' ~ '|' ~ BUTS.info[1]) }
                { ui('footer_button ' ~ BUTS.back[0]   ~ '|' ~ SELF ~ ' T=' ~ state.last_tn ~ '|' ~ BUTS.back[1]) }
                { add('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=FIN|' ~ BUTS.close[1]) }
            {% else %}
                {% if not tch.tool_can_extrude(state.last_tn) %}
                    M109 S{tch.get_tool_target(state.last_tn)} T{state.last_tn}
                {% endif %}
                SAVE_GCODE_STATE NAME=RENDER_EXTRUDE_SELECT
                M83
                G1 E{extrude} F{(selected_feed / 2.405) * 60}
                RESTORE_GCODE_STATE NAME=RENDER_EXTRUDE_SELECT
            {% endif %}
        {% endif %}
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── disable me ────────────────────────────────╮
    {%- macro disable_popup(tool_number) -%}
        { ui('begin Are you sure?') }{ ui('button_group_start') }
        { ui('button ' ~ BUTS.confirm[0] ~ '|' ~ SELF ~ '|' ~ BUTS.confirm[1] ) }
        { ui('button ' ~ BUTS.cancel[0]  ~ '|' ~ SELF ~ ' INSERT='  ~ tool_number ~ '|' ~ BUTS.cancel[1]) }
        { ui('button_group_end') }{ ui('text this will be enabled again on reset of the save variables file or by calling:') }
        { add('   ' ~ SELF ~ ' ENABLE=YES') }
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────╯

    {% if not PILE.get('disable', False) %}
        {% if 'T' in params %}
            { render_popup(params.T|int) }
            { add_extrude_some() }
        {% elif 'INSERT' in params%}
            { render_popup(params.INSERT|int) }
            { svh.gcode_var_update(SELF, 'state', {}, mode='replace') }
            { svh.gcode_var_update(SELF, 'state.last_tn', params.INSERT|int) }
        {% elif 'SELECT' in params %}
            { select_n_heat(params.SELECT|int) }
        {% elif 'CONFIRM' in params %}
            { svh.svf_update('datapile.' ~ SELF ~ 'disable', True) }
            { ui('end') }
        {% elif 'TEMP' in params  %}
            { save_selected_temp(params.T|int, params.TEMP|int) }
        {% elif 'UI' in params or 'CANCEL' in params %}
            {'M104 S0' if params.UI|default(none) == 'FIN'}
            { ui('end') }
            { svh.gcode_var_update(SELF, 'state', {}, mode='replace') }
        {% elif 'DISABLE' in params %}
            { disable_popup(params.DISABLE|int) }
        {% elif 'ENABLE' in params %}
            { svh.svf_update('datapile.' ~ SELF ~ 'disable', False) }
        {% elif 'EXTRUDE' in params or 'FEED' in params %}
            { render_extrude_select(params.FEED|default(none)|float(none), params.EXTRUDE|default(none)|float(none)) }
        {% elif not params  %}
            { ui('end') }
        {% else %}
            { ui('end') }
        {% endif %}
    {% endif %}

[gcode_macro TC_CALIRATE_UI]
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set BUTS = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}

    # ╭─────────────────────────────────────── UI Helpers ───────────────────────────────────────╮
    {%- macro ui(msg) -%}         { action_respond_info('action:prompt_' ~ msg) }   {%- endmacro -%}
    {%- macro add(msg) -%}        { ui(msg) }{ ui('show') }                         {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────╯
    {ui('begin OFFSET CALIBRATION MACROS')}
    {ui('button_group_start')}
    {ui('button [0] locate sensor|TC_FIND_FIRST_CALIBRATION_PROBE_POSITION')}
    {ui('button [1] calibrate ttbz|TC_FIND_PROBE_TRIGGER_TO_BOTTOM')}
    {ui('button_group_end')}
    {ui('button_group_start')}
    {ui('button [2] _MOVE_OVER_PROBE|_MOVE_OVER_PROBE')}
    {ui('button [3] TC_PROBE_CALIBRATION_PROBE|TC_PROBE_CALIBRATION_PROBE PROBE=0')}
    {ui('button [4] TC_PROBE_CALIBRATION_PROBE|TC_PROBE_CALIBRATION_PROBE PROBE=1')}
    {ui('button [5] TC_FIND_TOOL_OFFSETS|TC_FIND_TOOL_OFFSETS')}
    {ui('button_group_end')}
    {ui('text [0] use this to get the calibration probe location if its unknown')}
    {ui('text [1] calibrate the trigger to bottom z using a hand calibrated tool probe. (the current one)')}
    {ui('text [2] moves over the calibration probe')}
    {ui('text [3|4] probes the calibration probe using the current tool, does not save.')}
    {ui('text [5] Run a calibration sequence on all tools. ')}
    {ui('footer_button ' ~ BUTS.back[0]  ~ '|UI_CENTRAL|' ~ BUTS.back[1])}
    {ui('footer_button ' ~ BUTS.close[0] ~ '|RESPOND TYPE=command MSG=action:prompt_end|' ~ BUTS.close[1])}
    {ui('show')}






[gcode_macro TOOL_REMAP_UI]
gcode:
    {% set p, tc = printer, printer.toolchanger %}
    {% set ok = True %}

    {% set colors = p['gcode_macro _toolchanger_settings'].color_scheme if 'gcode_macro _toolchanger_settings' in p else {'default': 'info', 'highlight': 'accent'} %}

    {%- macro ui(txt) -%}{- action_respond_info("action:prompt_" ~ txt) -}{%- endmacro -%}

    {% if 'T' in params and 'TN' in params %}
        {% set t_macro_num, tool_num = params.T|int, params.TN|int %}
        {% set tool_name = tc.tool_names[tool_num] %}
        {% if p['gcode_macro T' ~ t_macro_num].tool_number|int == tool_num %}
            {ui("begin ! T" ~ t_macro_num ~ " is already mapped to " ~ tool_name ~ ' !')}  
            {ui("button OK|TOOL_REMAP_UI T=" ~ t_macro_num ~ "|warning")}
            {ui("show")}
            {% set ok = False %}
        {% else %}
            SET_GCODE_VARIABLE MACRO=T{t_macro_num} VARIABLE=tool_number VALUE={params.TN}
            {% set _ = p['gcode_macro T' ~ params.T].update({'tool_number': params.TN|int}) %} # update it locally too, so following UI is up to date
        {% endif %}
    {% endif %}

    {% if ('T' in params and 'TN' not in params) and ok %}
        {% set t_macro_num = params.T|int %}
        {% set mapped_tn = p['gcode_macro T' ~ t_macro_num].tool_number|int %}
        {ui("begin select tool for T" ~ t_macro_num)}  
        {ui("button_group_start")}
        {% for tn in tc.tool_numbers %}
            {% set tool_name = tc.tool_names[tn] %}
            {ui("button " ~ tool_name ~ "|TOOL_REMAP_UI T=" ~ t_macro_num ~ " TN=" ~ tn ~ "|" ~ (colors.highlight if tn == mapped_tn else colors.default))}
        {% endfor %}
        {ui("button_group_end")}
        {ui("footer_button ← Back|TOOL_REMAP_UI|success")}
        {ui("footer_button Cancel|RESPOND TYPE=command MSG=action:prompt_end|error")}
        {ui("show")}
    {% elif ok %}
        {ui("begin Select T macro to remap")}
        {ui("button_group_start")}
        {% for stuff in p if stuff.startswith('gcode_macro T') and 'tool_number' in p[stuff] %}
            {% set t_macro_num = stuff|replace('gcode_macro T', '')|int %}
            {% set mapped_tn   = p[stuff].tool_number|int %}
            {% set tool_name   = tc.tool_names[mapped_tn] %}
            {% set tn = p[tool_name].tool_number %}
            {ui("button T" ~ t_macro_num ~ (" → " ~ tool_name if mapped_tn != -1 else '') ~ "|TOOL_REMAP_UI T=" ~ t_macro_num ~ "|" ~ (colors.highlight if tn == tc.tool_number and False else colors.default))}
        {% endfor %}
        {ui("button_group_end")}
        {ui("footer_button Refresh|TOOL_REMAP_UI|success")}
        {ui("footer_button Close|RESPOND TYPE=command MSG=action:prompt_end|error")}
        {ui("show")}
    {% endif %}



