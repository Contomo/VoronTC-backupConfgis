

[gcode_macro _toolchanger_helper]
gcode:
    #{%- set literal_parser = printer.printer.lookup_object('gcode_macro')._action_raise_error.__globals__['ast'].literal_eval -%}
    #=======================================================< TRANSLATION HELPER
    # ---< actual probe name from tn
    {%- macro get_probe_name_from_tn(target_tool_num) -%}
        {%- set ns = namespace(result='not found') -%}
        {%- for k, v in printer.configfile.settings.items() if k[:11] == 'tool_probe ' and v.tool|default(-1) == target_tool_num|int -%}
            {%- set ns.result = k -%}
        {%- endfor -%}
        {ns.result}
    {%- endmacro -%}

    # ---< get tools target temperature from number
    {%- macro get_tool_target(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].target}
        {%- else -%}{-1}{%- endif -%}
    {%- endmacro -%}

    # ---< get tools temperature from number
    {%- macro get_tool_temp(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].temperature}
        {%- else -%}{-1}{%- endif -%}
    {%- endmacro -%}

    #=======================================================< SAVE VARIABLES EDITOR
    # ---< live state helper 
    {%- set _svf_key_state = {} -%}

    # ---< updates the requested key (forces dick)
    {%- macro svf_update(variable_name, new_data) -%}
        {%- set current_data = _svf_key_state.get(variable_name, printer.save_variables.variables.get(variable_name, {})) -%}
        {%- if current_data is not mapping -%}{% set current_data = {} %}{%- endif -%}
        {%- set _ = current_data.update(new_data) -%}
        {%- set _ = svf_tracker.update({variable_name: current_data}) -%}
        SAVE_VARIABLE VARIABLE={variable_name} VALUE="{current_data}"
    {%- endmacro -%}

    # ---<  pushes save variable file data into our live state tool probe offsets
    {%- macro update_tool_probe_from_svf(tool_number) -%}
        {%- set tn = tool_number|int -%}
        {%- set tool_name = printer.toolchanger.tool_names[tn] -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = _svf_key_state.get(svf_key, printer.save_variables.variables.get(svf_key, {})) -%}
        {%- if 'probe' in offsets and offsets.probe < 0.0 -%}
            {%- set probe_obj = printer.printer.lookup_object('tool_probe_endstop').tool_probes[tn] -%}
            {%- set _ = probe_obj.probe_offsets.__setattr__('z_offset', offsets.probe) -%}
            {action_respond_info("Applied probe offset to " ~ probe_obj.name ~ ": " ~ offsets.probe)}
        {%- else -%}
            {action_respond_info("Warning: No probe offset found for " ~ tool_name ~ " in " ~ svf_key)}
        {%- endif -%}
    {%- endmacro -%}

    # ---<  pushes save variable file data into our live state tool offsets
    {%- macro update_tool_offsets_from_svf(tool_number) -%}
        {%- set tn = tool_number|int -%}
        {%- set tool_name = printer.toolchanger.tool_names[tn] -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = _svf_key_state.get(svf_key, printer.save_variables.variables.get(svf_key, {})) -%}
        {%- if 'x' in offsets and 'y' in offsets and 'z' in offsets -%}
            {%- set tool_obj = printer.printer.lookup_object(tool_name) -%}
            {%- set _ = tool_obj.__setattr__('gcode_x_offset', offsets.x) -%}
            {%- set _ = tool_obj.__setattr__('gcode_y_offset', offsets.y) -%}
            {%- set _ = tool_obj.__setattr__('gcode_z_offset', offsets.z) -%}
            {action_respond_info("Applied G-Code offsets to " ~ tool_name ~ ": " ~ '  x ' ~ offsets.x ~ '  y ' ~ offsets.y ~ '  z ' ~ offsets.z)}
        {%- else -%}
            {action_respond_info("Warning: No complete offsets found for " ~ tool_name ~ " in " ~ svf_key)}
        {%- endif -%}
    {%- endmacro -%}


    #=======================================================< STATE CHECKS
    # ---< check if homed, if not: home or abort
    {%- macro check_homed() -%}
        {%- if printer.toolhead.homed_axes != "xyz" -%}
            {%- if printer.configfile.settings.toolchanger.on_axis_not_homed == 'home' -%}
                {- action_respond_info("Homing first...") -}
                G28
            {%- else -%}
                {- action_raise_error("Printer must be homed first.") -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    # ---< Checks if toolchanger is initialized, and initializes if not.
    {%- macro check_tc_status() -%}
        {%- if printer.toolchanger.status == 'uninitialized' -%}
            {- action_respond_info("Toolchanger uninitialized, attempting to initialize...") -}
            INITIALIZE_TOOLCHANGER
        {%- elif printer.toolchanger.status == 'error' -%}
            {- action_raise_error("Toolchanger is in an error state.") -}
        {%- endif -%}
    {%- endmacro -%}

    # ---< does all the checks.
    {%- macro check_ok() -%}
        {check_tc_status()}
        {check_homed()}
    {%- endmacro -%}

    # ---< gets the actual live mounted toolnumber from the tool probe
    {%- macro get_mounted_tn() -%}
        {%- set tpe_obj = printer.printer.lookup_object('tool_probe_endstop') -%}
        {%- set probes = tpe_obj._query_open_tools() -%}
        {%- if probes|length == 1 -%}
            {%- set _ = tpe_obj.set_active_probe(probes[0]) -%}
            {probes[0].tool}
        {%- else -%}
            {-1}
        {%- endif -%}
    {%- endmacro -%}

    # ---< allows us to call the macro directly and test the individual macros.
    {%- if rawparams and 'DATA' in params -%}
        {action_respond_info("returned: " ~ self._TemplateReference__context[params.MACRO](params.DATA))}
    {%- elif rawparams and 'MACRO' in params -%}
        {action_respond_info("returned: " ~ self._TemplateReference__context[params.MACRO]())}
    {%- endif -%}


   

[gcode_macro _math_helper]
description: jinja math helper macros
gcode:
    #=======================================================< _math_helper
    # ---< Calculates the square root of a number.
    {%- macro sqrt(n) -%} { n**0.5 } {%- endmacro -%}

    # ---< Calculates the average of a list of numbers.
    {%- macro average(numbers) -%}
        {%- if numbers -%} { numbers|sum / numbers|length } {%- else -%} { 0 } {%- endif -%}
    {%- endmacro -%}

    # ---< Calculates the median of a list of numbers.
    {%- macro median(numbers) -%}
        {%- set sorted_list = numbers|sort -%}
        {%- set count = sorted_list|length -%}
        {%- if count == 0 -%}
            { 0 }
        {%- elif count % 2 == 1 -%}
            { sorted_list[count // 2] }
        {%- else -%}
            { (sorted_list[count // 2 - 1] + sorted_list[count // 2]) / 2.0 }
        {%- endif -%}
    {%- endmacro -%}

    # ---< Calculates the standard deviation of a list of numbers.
    {%- macro stddev(numbers) -%}
        {%- set n = numbers|length -%}
        {%- if n < 2 -%}{ 0.0 }
        {%- else -%}
            {%- set mean = average(numbers) -%}
            {%- set variance_sum = namespace(value=0) -%}
            {%- for x in numbers -%}
                {%- set _ = variance_sum.__setattr__('value', variance_sum.value + (x - mean)**2) -%}
            {%- endfor -%}
            {sqrt(variance_sum.value / n)}
        {%- endif -%}
    {%- endmacro -%}

    # ---< calculate distance between two points
    {%- macro point_distance(p1, p2) -%}
        {%- set dx = p1[0] - p2[0] -%}
        {%- set dy = p1[1] - p2[1] -%}
        {%- set dz = p1[2] - p2[2] -%}
        {sqrt(dx*dx + dy*dy + dz*dz)}
    {%- endmacro -%}


[gcode_macro _save_config_helper]
gcode:
    #=======================================================< SAVE CONFIG EDITOR
    # Adds or updates a key in the 'save_config_pending_items' dictionary.
    {%- macro save_config_stage(section, option, value) -%}
        {%- set configfile_obj = printer.printer.lookup_object('configfile') -%}
        {%- set _ = configfile_obj.set(section, option, value) -%}
    {%- endmacro -%}

    # Removes a key from the 'save_config_pending_items' dictionary.
    {%- macro save_config_unstage(section, option) -%}
        {%- set autosave = printer.printer.lookup_object('configfile').autosave -%}
        {%- set pending_items = autosave.status_save_pending -%}

        {%- if section in pending_items and option in pending_items[section] -%}
            {%- set _ = pending_items[section].pop(option, None) -%}  
            {% if not pending_items[section] %}
                {%- set _ = pending_items.pop(section, None) -%}
            {% endif %}
            {% if not pending_items %}
                {% set _ = autosave.__setattr__('save_config_pending', False) %}
            {% endif %}
            { action_respond_info("Unstaged from SAVE_CONFIG: [" ~ section ~ "] " ~ option) }
        {%- else -%}
            { action_respond_info("Nothing to unstage: [" ~ section ~ "] " ~ option ~ " was not pending.") }
        {%- endif -%}
    {%- endmacro -%}




[delayed_gcode CACHE_HELPERS]
initial_duration: 1
gcode:
    

#    {% set start_time, names = printer.printer.reactor.monotonic(), [] %}
#    {% set gcode_macro_obj = printer.printer.objects['gcode_macro'] %}
#    {% for name, helper_obj in printer.printer.objects.items() if name.startswith('gcode_macro ') %}
#        {% set macro_name = name.split(' ', 1)[1] %}
#        {% if macro_name.startswith('_') and macro_name.endswith('_helper') %}
#            {% set _ = names.append(macro_name) %}
#            {% set lib_string = printer.configfile.settings[name].gcode %}
#            {% set compiled_lib = gcode_macro_obj.env.from_string(lib_string, globals=self._TemplateReference__context).module %}
#            {% set _ = helper_obj.__setattr__('lib', compiled_lib) %}
#        {% endif %}
#    {% endfor %}
#    {% set duration = printer.printer.reactor.monotonic() - start_time %}
#    {% if names %}
#        {action_respond_info("Compiled and cached %d helper(s) in %.4f seconds: %s" % (names|length, duration, names|join(', ')))}
#    {% else %}
#        {action_respond_info("Found no helper macros matching '_*_helper' to cache.")}
#    {% endif %}
    






