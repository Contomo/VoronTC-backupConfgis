[force_move]
enable_force_move: True

#SET_KINEMATIC_POSITION [X=<value>] [Y=<value>] [Z=<value>] [SET_HOMED=<[X][Y][Z]>] [CLEAR_HOMED=<[X][Y][Z]>]

[gcode_macro _MOVE_AWAY_FROM_AXIS_EXTREME]
gcode:
    {% set cfg = printer.configfile.settings %}
    G91
    {% set mid = (cfg['stepper_' ~ params.AXIS].position_min + cfg['stepper_' ~ params.AXIS].position_max) / 2.0 %}
    {% set sign   = 1 if (mid - printer.toolhead.position[params.AXIS]) > 0 else -1 %}
    G0 {params.AXIS}{ sign * params.AMOUNT|default(10)|float(10) } F{printer.toolchanger.params_fast_speed}
    G90

[homing_override]
axes: xyz
gcode:
    {% import homing_helper      as hh        with context %}
    {% import toolchanger_helper as tch with context %}

    {% set p             = printer %}
    {% set cfg, th, tc   = p.configfile.settings, p.toolhead, p.toolchanger %}
    {% set tcs           = p['gcode_macro _toolchanger_settings'] %}
    {% set home_settings = tcs.get('homing', {}) %}
    {% set rand, safe_z  = home_settings.get('z_home_xy_random', 0), home_settings.get('xy_move_safe_z_height', 10) %}
    {% set xy_retract    = home_settings.get('xy_home_retract_distance', 0)|float %}
    
    {% set max_x, max_y  = cfg.stepper_x.position_max, cfg.stepper_y.position_max %}
    {% set center_x      = (max_x / 2.0) + (range(rand * -10, rand * 10)|random / 10.0) %}
    {% set center_y      = (max_y / 2.0) + (range(rand * -10, rand * 10)|random / 10.0) %}

    {% set accel_div     = tcs.get('macro_accel_divider') %}
    {% set accel_z       = tch.divide_vel(accel_divide=accel_div * 4.0) if accel_div else '' %}
    {% set accel_xy      = tch.divide_vel(accel_divide=accel_div * 2.0)     if accel_div else '' %}

    {% set axes_to_home  = 'xyz' if not rawparams else (rawparams|lower) %}

    {tch.check_tc_status()}
    {tch.check_tn_actn()}

    {tch.update_tool_probe_from_svf(p.tool_probe_endstop.active_tool_number, False)}
    STOP_TOOL_PROBE_CRASH_DETECTION
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G90
    

    {% for step in p.motion_report.steppers if step.startswith('stepper_') and (axes_to_home.split())|select('in', step)|list %}
        SET_STEPPER_ENABLE STEPPER={step} ENABLE=1
    {% endfor %}
    G4 P50


    #── safely move away from docks if are close ────────────────────────────────────
    {% if th.homed_axes and tch.get_distance_to_docks(th.position)|float < 150  %}
        {accel_z}
        G0 Z{3 + th.position.z} F{tc.params_fast_speed/4}
        {accel_xy}
        G0 Y{[tc.params_safe_y, th.position.y]|max} F{tc.params_fast_speed}
    {% endif %}

    {% if 'z' not in th.homed_axes %}
        # ---< home Z
        G28 Z
        G0 Z{safe_z}
    {% else %}
        # ---< or come down from whereever we are
        {accel_z}
        G0 Z{safe_z} F{tc.params_fast_speed/4}
    {% endif %}

    #── home Y if requested, sensorless or normal ────────────────────────────────────
    {% if 'y' in axes_to_home %}
        {accel_xy}
        M400
        {hh.set_axis_current('y', 1.0)}
        G4 P50
        G28 Y
        M400
        {hh.set_axis_current('y')}
        _MOVE_AWAY_FROM_AXIS_EXTREME AXIS=y AMOUNT={xy_retract}
        M400
        G4 P50
    {% endif %}

    #── home X if requested, sensorless or normal ────────────────────────────────────
    {% if 'x' in axes_to_home %}
        {accel_xy}
        M400
        {hh.set_axis_current('x', 1.0)}
        G4 P50
        G28 X
        M400
        {hh.set_axis_current('x')}
        _MOVE_AWAY_FROM_AXIS_EXTREME AXIS=x AMOUNT={xy_retract}
        M400
        G4 P50
    {% endif %}

    #── Home Z axis in the middle of the bed ────────────────────────────────────
    {% if 'z' in axes_to_home %}
        ROUNDED_G0 X={center_x} F={tc.params_fast_speed} D={cfg.stepper_x.position_max/4}
        ROUNDED_G0 Y={center_y} F={tc.params_fast_speed} D=0
        G28 Z
        _TC_ADJUST_HOME_OFFSET
    {% endif %}
    
    {tch.restore_vel()}
    
    TC_LOAD_OFFSETS
    


[gcode_macro G32]
gcode:
    {% from toolchanger_helper import check_ok with context %}
    {check_ok()}
    QUAD_GANTRY_LEVEL
    MOVE_TO_CENTER
    G28




[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: "Fine/Coarse with rounded approach to first probe point"
variable_fine_move: 0.5  # your preferred fine-move height
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set qg_cfg   = printer.configfile.settings.quad_gantry_level %}
    {% set fast     = printer.toolchanger.params_fast_speed %}
    {% set act_z    = printer.tool_probe_endstop.active_tool_probe_z_offset %}
    {% set cur      = printer.toolhead.position %}
    {% set is_level = printer.quad_gantry_level.applied %}

    {tch.check_ok()}
    G90
    {tch.try_divide_accel()}

    {% set move_z = fine_move if is_level and not rawparams else qg_cfg.horizontal_move_z %}

    {% if cur[2] < [move_z, 2]|max %}
        ROUNDED_G0 Z={[move_z, 2]|max} F={ fast / 4.0 } D=10
    {% endif %}

    # ---< select a pretty non tangling approach
    {% set pnt = qg_cfg.points[0] %}
    {% set dist_y = tch.get_y_distance_to_docks(cur)|float %}
    {% if dist_y < 80 %}
        ROUNDED_G0 Y={ cur[1] + (90 - dist_y) } F={ fast } D=100
        ROUNDED_G0 X={ pnt[0] } Y={ pnt[1] }    F={ fast } D=0
    {% elif cur[1] > pnt[1] %}
        ROUNDED_G0 X={ pnt[0] } F={ fast } D=100
        ROUNDED_G0 Y={ pnt[1] } F={ fast } D=0
    {% else %}
        ROUNDED_G0 Y={ pnt[1] } F={ fast } D=100
        ROUNDED_G0 X={ pnt[0] } F={ fast } D=0
    {% endif %}
    
    STOP_TOOL_PROBE_CRASH_DETECTION

    # ---< Decide 'coarse' -> 'fine' | just 'fine'
    {% if rawparams %}
        _QUAD_GANTRY_LEVEL { rawparams }
    {% elif not is_level %}
        _QUAD_GANTRY_LEVEL RETRY_TOLERANCE={ fine_move }
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z={ move_z - act_z }
        {tch.restore_vel()}
        MOVE_TO_CENTER
    {% else %}
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z={ move_z - act_z }
    {% endif %}
    {tch.restore_vel()}


[gcode_macro PAIN_GANTRY_LEVEL]
description: "forgive me"
gcode:
    {% set z_steppers = [] %}
    {% for step in printer.motion_report.steppers if step.startswith('stepper_z') %}
        SET_TMC_CURRENT STEPPER={step} CURRENT=0.2
        {% set _ = z_steppers.append(step) %}
    {% endfor %}
    SET_KINEMATIC_POSITION Z=30
    G0 Z0 F600
    M400
    {% for obj in printer if obj.split() and obj.split()[1] in z_steppers %}
        SET_TMC_CURRENT STEPPER={obj.split()[1]} CURRENT={printer[obj].get('run_current')}
    {% endfor %}
    G0 Z10 F600


# BED_MESH_CALIBRATE PROFILE=<name> METHOD=[manual | automatic | scan | rapid_scan]
# [<probe_parameter>=<value>] [<mesh_parameter>=<value>] [ADAPTIVE=[0|1] [ADAPTIVE_MARGIN=<value>]

# BED_MESH_CLEAR
# BED_MESH_PROFILE SAVE=<name> LOAD=<name> REMOVE=<name>
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% import toolchanger_helper as tc with context %}
    {tc.check_ok()}
    {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    BED_MESH_CLEAR
    {% set tool_z = printer[printer.toolchanger.tool].gcode_z_offset %}
    {% set actp_z = printer.tool_probe_endstop.active_tool_probe_z_offset %}

    {tc.try_divide_accel()}
    STOP_TOOL_PROBE_CRASH_DETECTION
    _BED_MESH_CALIBRATE {rawparams}
    {% if printer.print_stats.state|lower != "printing" %}
        MOVE_TO_CENTER Z=10
    {% endif %}

    {tc.restore_vel()}




#TODO
# Z_OFFSET_APPLY_PROBE
# needs to save to SAVE_CONFIG with substracted gcode offset. atleast if we babystepped regularly.





[gcode_macro _SET_GCODE_OFFSET_UI]
variable_settings:{'active_color':'rgba(255, 255, 255, 0.2)', 'inactive_color':'rgba(0, 0, 0, 0.2)'}
gcode:
    {%- macro ui(txt) -%}{action_respond_info('action:prompt_' ~ txt)}{%- endmacro -%}

    {% set modes = ['all', 'probe', 'gcode', 'none'] %}
    {% set current_mode = printer['gcode_macro SET_GCODE_OFFSET'].get('mode', 'all') %}
    {ui('begin Select Z-Adjustment Mode')}
    {ui('text Select how subsequent Z adjustments will be applied.')}
    {ui('text Current Mode: ' ~ current_mode|replace('_', ' ')|title)}
    {ui('button_group_start')}
    {% for mode in modes %}
        {% set color = settings.inactive_color if mode != current_mode else settings.active_color %}
        {ui('button ' ~ mode|replace('_', ' ') ~ '|_SET_GCODE_OFFSET_UI MODE=' ~ mode ~ '|' ~ color)}
    {% endfor %}
    {ui('button_group_end')}
    {ui('text NONE OF THIS WORKS YET JUST FYI')}
    {ui('text Explanation:')}
    {ui('text all - adjusts kin, and all probes + ttbz of calibration probe probe')}
    {ui('text probe - adjust kin and just the probe of the tool used for homing')}
    {ui('text gcode - adjusts ONLY currently active tools gcode offset')}
    {ui('text none - only force moves, meaning next time you home you will be exactly where we were before you pressed this button.')}
    {ui('footer_button [Close]|RESPOND type=command msg=action:prompt_end|error')}
    {ui('show')}

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET_ORIGINAL
description: "highjacked version (_SET_GCODE_OFFSET_ORIGINAL is the original), when called with z-adjust will 'babystep' it all!"
variable_sequence: {'want': [-0.005,  0.005]}
variable_mode: 'all'
variable_state: {}
gcode:
    {% import variable_helper    as svh with context %}
    {% import toolchanger_helper as tch with context %}
    
    {%- macro _reset_popup() -%}
        {%- macro ui(txt) -%} { action_respond_info('action:prompt_' ~ txt) } {%- endmacro -%}
        {% set BUTS   = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
        { ui('begin Reset babystepping to last restart?') } { ui('button_group_start') }
        { ui('button ' ~ BUTS.confirm[0] ~ '|SET_GCODE_OFFSET Z_ADJUST=' ~ (-1 * state.get('z_adjusted', 0)) ~ ' MOVE=1|' ~ BUTS.confirm[1] ) }
        { ui('button ' ~ BUTS.cancel[0]  ~ '|RESPOND TYPE=command MSG=action:prompt_end|' ~ BUTS.cancel[1]) }
        { ui('button_group_end') } { ui('show') }
    {%- endmacro -%}

    {% if 'Z_ADJUST' in params and params.get('MOVE', none)|int(none) == 1 %}
        {% set amount = params.Z_ADJUST|float %}

        #---< detect right sequence to open UI
        {% set idx = sequence.get('got', 0) %}
        {% if amount == sequence.want[idx] %}
            {svh.gcode_var_update('SET_GCODE_OFFSET', 'sequence.got', idx + 1)}
            {% if idx + 1 == sequence.want|length %}
                {svh.gcode_var_update('SET_GCODE_OFFSET', 'sequence.got', 0)}
                _SET_GCODE_OFFSET_UI
            {% endif %}
        {% else %}
            #---< wrong? just adjust
            {svh.gcode_var_update('SET_GCODE_OFFSET', 'sequence.got', 0)}
            {% if 'xyz' in printer.toolhead.homed_axes|lower %}

                #───< move by that amount
                SAVE_GCODE_STATE NAME=TC_ADJUST_Z_ALL
                SET_KINEMATIC_POSITION Z={printer.toolhead.position[2] - amount}
                G90
                {% set move_z = printer.toolhead.position[2] - printer.gcode_move.homing_origin[2] %}
                G0 Z{move_z} F10000 #───< move by amount, gaslight printer into believing we didnt.
                RESTORE_GCODE_STATE NAME=TC_ADJUST_Z_ALL MOVE=0
                
                #───< update every probe with our new offsets 
                {% for tname in printer.toolchanger.tool_names %}
                    {% set key = 'offsets_' ~ tname|lower|replace('tool ', '') ~ '.probe'%}
                    {svh.svf_edit_value(key, -1.0 * amount)}
                {% endfor %}
                {svh.svf_edit_value('probe_position.trigger_to_bottom_z', amount)}
                {svh.gcode_var_edit_value('SET_GCODE_OFFSET', 'state.z_adjusted', amount)}
                {tch.update_tool_probe_from_svf(printer.tool_probe_endstop.active_tool_number, False)} 
            {% endif %}
        {% endif %}
    {% elif params.get('Z', none)|int(none) == 0 and params.get('MOVE', none)|int(none) == 1 and params.keys()|list|length == 2 %}
        {_reset_popup()}
    {% else %}
        _SET_GCODE_OFFSET_ORIGINAL {rawparams}
    {% endif %}


[gcode_macro TC_LOAD_OFFSETS]
description: "Loads offsets for a tool, syncing from [save_variables] if they differ. Usage: TC_LOAD_OFFSETS T=<tool_number>"
gcode:
    # ------------------ SETUP AND HELPER LOADING ------------------
    {% import toolchanger_helper as tc with context %}
    {% import variable_helper as svh with context %}

    {% set tn = params.T|int if 'T' in params else tc.get_mounted_tn()|int %}

    # ------------------ MAIN LOGIC ------------------
    {% if tn != -1 %}
        {% set ns = namespace(needs_sync=False) %}
        {% set tool_name = printer.toolchanger.tool_names[tn] %}
        {% set svf_offsets = printer.save_variables.variables.get('offsets_' ~ tc.tk_lower(tn), {}) %}
        # --- Get Offsets from Both Sources
        {% set live_offsets = {
            'x': printer[tool_name].gcode_x_offset,
            'y': printer[tool_name].gcode_y_offset,
            'z': printer[tool_name].gcode_z_offset
        } %}
        # --- Compare and Sync if Necessary
        {% for axis in ['x', 'y', 'z'] if not ns.needs_sync %}
            {% set ns.needs_sync = (live_offsets[axis]|round(3)) != (svf_offsets.get(axis, 0)|float(0)|round(3)) %}
        {% endfor %}
        # --- If a sync is needed, use helper to update the live state
        {% if svf_offsets and ns.needs_sync %}
            {tc.update_tool_offsets_from_svf(tn)}
            {tc.update_tool_probe_from_svf(tn)}
        {% endif %}
        SET_GCODE_OFFSET X={svf_offsets.get('x', 0)} Y={svf_offsets.get('y', 0)} Z={svf_offsets.get('z', 0)} MOVE=0
    {% else %}
        {tc.respond_colored("No tool specified via 'T=' and no tool is currently active.", 'TC_LOAD_OFFSETS', 'orange') }
    {% endif %}




[gcode_macro _TC_ADJUST_HOME_OFFSET]
description: Depending on the selected tool at the time of homing, the physical Z endstop position is offset. This corrects for that using current tool offset.
variable_macro_html: "?tCorrects for the missing gcode offset at the time of probing (homing z).?nDrives to Z10 and setting kinematic position to Z(10 + probe + z offset)?p_TC_ADJUST_HOME_OFFSET "
variable_height_to_adjust_at: 5 
gcode:
    # ── variables alias ─────────────────────
    {% set msg = macro_html %}
    {% set p = printer %}
    {% set max_offset = p['gcode_macro _toolchanger_settings'].get('svf', {}).get('max_offs', 999) * 2 %}

    {% set tc, tpes = p.toolchanger, p.tool_probe_endstop %}
    {% set actn, probe_offset = tpes.active_tool_number|int, tpes.active_tool_probe_z_offset|float %}
    {% set tool = p[tc.tool_names[actn]] %}

    {% if actn != -1 %}
        {% if probe_offset == 0 %}
            {% set msg = msg ~ "?tProbe offset is 0. Defaulting to -1.4 as a safety measure.?s3?mProbe offset is ?c0?c!" %}
            {% set probe_offset = -1.400 %}
        {% endif %}
        # ── total calc + sanity check ───────────────────── 
        {% set total_offset = (tool.gcode_z_offset|float + probe_offset)|round(4) %}

        {% set msg = msg ~ "?s3?tgcode z offset for " ~ tool.name ~ " appears to be 0, although it is not T0.?mPlease verify your offsets!" if "0" not in tool.name and tool.gcode_z_offset == 0 else msg %}
        {% set msg = msg ~ "?s4?t?mCalculated total offset (" ~ total_offset ~ "mm) seems unusual. Please check tool offsets." if total_offset|abs > max_offset|abs else msg %}
        {% set msg = msg ~ "?t?s0?mHome shifted by: ?c" ~ total_offset ~ "mm?c" %}

        # ── offset application ───────────────────── 
        G90
        G0 Z{height_to_adjust_at} F1000
        M400
        SET_KINEMATIC_POSITION Z={height_to_adjust_at + total_offset}
        TC_LOAD_OFFSETS
    {% else %}
        {% set msg = msg ~ "?tNo tool found. Please reinitialize or detect active tool probe to fix this.?s4?mCouldnt adjust home, no active tool probe." %}
        SET_KINEMATIC_POSITION CLEAR_HOMED=XYZ
    {% endif %}
    _UNIFIED_RESPOND MSG="{msg}"




      








      