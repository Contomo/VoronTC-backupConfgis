
# see 'tc_heat_soak.cfg' for why this isnt called "PRINT_START"
[gcode_macro _PRINT_START]
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}
    {tch.check_ok()}
    # ---< settings from macro settings
    {% set p            = printer %}
    {% set tcs          = p['gcode_macro _toolchanger_settings'] %}
    {% set pstrts       = tcs.get('print_start', {}) %}
    {% set tcs_clean    = tcs.get('clean_nozzle_macro', {}) %}
    {% set clean_name   = tcs_clean.get('macro', '') %}
    # ---< toolchanger shorts
    {% set tc           = p.toolchanger %}
    {% set ctn          = tc.tool_number %}
    {% set actn         = tch.get_mounted_tn()|int %}
    {% set init_tn      = (params.get('INITIAL_TOOL', params.get('TOOL', actn)|string))|replace('T', '')|int %}
    {% set t_temp_args  = [] %}
    {% set tns_used     = [] %}

    # ---< quick macro to makes things down the line cleaner.
    {% macro temp_param(n) -%}{'T' ~ n|string ~ '_TEMP'}{%- endmacro %}

    # ---<  update last used temps for knowing whats loaded.
    {% for tn in tc.tool_numbers if temp_param(tn) in params %}
        {svh.svf_update('recent_tooltemps.' ~ tch.tk_lower(tn), params[temp_param(tn)]|int)}
    {% endfor %}

    _UNIFIED_RESPOND MSG="{'?t?pPRINT_START ?t?s5?m' ~ rawparams}"

    # ---<  build list of tools
    {% for tn in tc.tool_numbers if temp_param(tn) in params %}
        {% set _ = t_temp_args.append(temp_param(tn) ~ '=' ~ params[temp_param(tn)]) %}
        {% set _ = tns_used.append(tn) %}
    {% endfor %}

        
    CLEAR_PAUSE
    # ---< if we have a tool equipped go on
    {% if actn != -1 %}
        STOP_TOOL_PROBE_CRASH_DETECTION

        {'M140 S' ~ params.BED_TEMP if 'BED_TEMP' in params else ''} # start heating bed.

        # ---< start heating all
        HEAT_TOOLS {'OFFSET=-40 ' ~ t_temp_args|join(' ')}

        # ---< find tool offsets of all used, if its > 1
        {'TC_FIND_TOOL_OFFSETS T=' ~ tns_used|join(',') if tns_used|length > 1 and pstrts.get('calibrate_tools_at_start') else ''}

        # ---< start part cooling fan to blow hot air around if temp > 230 (assume its abs or asa)
        {'M106 S100' if params.TOOL_TEMP|int > 230 else ''}

        # ---< start heating all
        HEAT_TOOLS {'OFFSET=-40 ' ~ t_temp_args|join(' ')}

        # ---< Heat all that arent initial tool
        HEAT_TOOLS {t_temp_args|join(' ')} # starts heating all full

        # ---< move to center of bed, lower a little, and blow hot air around.
        MOVE_TO_CENTER Z=5

        # ---< wait for tool to be at or below 150°C
        M109 S150

        # ---< wait for bed temp
        M190 S{params.BED_TEMP}

        # ---< clean at macro brush if we have
        {clean_name ~ ' T=' ~ init_tn ~ ' TEMP=' ~ (params.TOOL_TEMP|int - 35) if clean_name else ''}

        # ---< G32 if we have, if not homo regular
        {'G28' if 'gcode_macro G32' not in p else 'G32'}

        # ---< heat up all the tools for prime lines
        HEAT_TOOLS {t_temp_args|join(' ') ~ ' MODE=heating'} # waits for all to have a target
        
        # ---< Prime lines if enabled.
        {% if pstrts.get('prime_tools_at_start') %}
        PRIME_LINES INITIAL_TOOL={init_tn}
        MOVE_TO_CENTER Z=10
        {% endif %}

        # ---< select initial tool if not already selected
        T{init_tn}

        # ---< cool tool if it isnt used in the print.
        {('M104 S0 T' ~ actn) if actn not in tns_used else ''}

        # ---< wait for final heat.
        M109 T{init_tn} S{params.TOOL_TEMP}

        # ---< turn off the fan, null extruder
        M107
        G92 E0
        START_TOOL_PROBE_CRASH_DETECTION
    {% endif %}






[gcode_macro HEATSOAK]
description: "my heatsoak macro"
gcode:
    # Will recieve all the same parameters handed into print start to use.
    M140 S{params.BED_TEMP}
    # move to center
    MOVE_TO_CENTER Z=5
    # blow hot air
    M106 S255

    # preheat all the tools
    {% for tn in printer.toolchanger.tool_numbers if 'T' ~ tn ~ '_TEMP' in params %}
        M109 T{tn} S130
    {% endfor %}






[gcode_macro CANCEL_PRINT]
gcode:
    PRINT_END
    CANCEL_PRINT_BASE

[gcode_macro PRINT_END]
gcode:
    {% import toolchanger_helper as tch with context %}
    M400
    SET_PRESSURE_ADVANCE ADVANCE=0
    {% if tch.tool_can_extrude(printer.toolchanger.tool_number) %}
        M83
        G1 E-2 F1800
        G92 E0
    {% endif %}
        
    _MOVE_BACK_END_PAUSE_CANCEL
    STOP_TOOL_PROBE_CRASH_DETECTION
    
    {% for name in printer.toolchanger.tool_names if 'fan' in printer[name] %}
        SET_FAN_SPEED FAN={printer[name].fan} SPEED=0
    {% endfor %}

    TURN_OFF_HEATERS

    M220 S100
    M221 S100
    M82
    G90
    CLEAR_PAUSE

    {'BED_MESH_CLEAR' if 'BED_MESH_CLEAR' in printer.gcode.commands else ''}


[gcode_macro _MOVE_BACK_END_PAUSE_CANCEL]
variable_lift_z:       50
variable_y_move_zmax:  150 # sort of \ in y move back when going up to avoid umbicals
variable_y_move_zmin:  50  # (also you want it further back if its lower cause easier to get plate out)
variable_speed:        100
gcode:
    {% import toolchanger_helper as tch with context %}

    # ───< short names for less writing later
    {% set p, th, tc        = printer, printer.toolhead, printer.toolchanger %}
    {% set pos_min, pos_max = th.axis_minimum, th.axis_maximum %}
    {% set cur              = th.position %}

    # ───< calc endpoints, y at a slanted z (move less back when high to avoid umbilical strain)
    {% set z_ratio = cur.z / pos_max.z %} # on a scale of 0-1, how high are you
    {% set y_end   = pos_max.y - (y_move_zmin|float * (1 - z_ratio) + y_move_zmax|float * z_ratio) %}
    {% set x_end   = (pos_min.x + pos_max.x) / 2.0 %}
    {% set z_end   = [cur.z + lift_z|float, pos_max.z - 1]|min %}
    {% set small_z = [cur.z + 1, pos_max.z - 1]|min %}

    {tch.try_divide_accel()}

    G0 Z{small_z}
    ROUNDED_G0 Y={y_end} D={50}   F={tc.params_fast_speed/3}
    {% if (x_end - cur.x)|abs <= 50 %}
        ROUNDED_G0 X={x_end} Z={z_end} D=0 F={tc.params_fast_speed/3}
    {% else %}
        ROUNDED_G0 X={x_end} D={50}   F={tc.params_fast_speed/3}
        ROUNDED_G0 Z={z_end} D=0      F={tc.params_fast_speed/3}
    {% endif %}
    
    {tch.restore_vel()}





[gcode_macro HEAT_TOOLS]
description: Batched multi-tool heater
variable_tol:           10          # ±°C band counted as “at temp”
variable_default_max_heating: 2     # how many at a time can be heating
gcode:
    # ───< settings/short alias
    {% set svf        = printer.save_variables.variables %}
    {% set ps         = printer['gcode_macro _toolchanger_settings'].get('print_start', {}) %}
    {% set max_heat   = [1, ps.get('max_tools_heating_at_once', default_max_heating)|int]|max %}
    {% set states     = svf.get('runout_states', {}) %}
    {% set tc         = printer.toolchanger %}
    {% set mode       = params.MODE|default('full')|lower %}
    {% set started, heating, request, batch  = [], [], [], [] %}

    # ───< object helpers
    {%- macro t_param_temp(tn) -%}{- params.get('T' ~ tn ~ '_TEMP', '') -} {%- endmacro -%}
    {%- macro e_id(n)  -%}{'extruder' ~ (n>0 and n|string or '')}          {%- endmacro -%}
    {%- macro e_tmp(n) -%}{printer[e_id(n)].temperature}                   {%- endmacro -%}
    {%- macro e_tgt(n) -%}{printer[e_id(n)].target}                        {%- endmacro -%}

    # ───< check helpers
    {%- macro is_heated(tn, temp) -%}{- 'true' if e_tmp(tn)|int >= (temp|int - tol) else '' -}{%- endmacro -%}

    # ───< build list of 'heating' and 'request' (T2_TEMP=200 -> {tn: 2, temp: 200})
    {% for tn in tc.tool_numbers if e_id(tn) in printer %}
        {% set _ = heating.append(tn) if e_tmp(tn)|int + tol < e_tgt(tn)|int else '' %}
        {% if t_param_temp(tn) %}
            {% set _ = request.append({'tn': tn|int, 'temp': t_param_temp(tn)|int}) %}
        {% endif %}
    {% endfor %}

    # ───< heat the next tools if possible
    {% for r in request if r.tn not in heating %}
        {% if (heating|length + started|length) < max_heat %}
            {'M104 T' ~ r.tn ~ ' S' ~ r.temp}
            {% set _ = started.append(r.tn) %}
        {% endif %}
    {% endfor %}

    # ───< make sure all requested are "M104"
    {% for r in request if mode == 'heating' %}
        {% if r.tn not in heating or not is_heated(r.tn, r.temp) %}
            {% if heating|length >= max_heat %}
                {% set wait_t = heating[0] %}
                {'M109 T' ~ wait_t ~ ' S' ~ e_tgt(wait_t)|int}
                {% set _ = heating.pop(0) %}
            {% endif %}
            {'M104 T' ~ r.tn ~ ' S' ~ r.temp}
            {% set _ = heating.append(r.tn) %}
        {% endif %}
    {% endfor %}

    # ───< make sure all requested are "M109"
    {% for r in request if mode == 'heated' %}
        {% set _ = batch.append(r) %}
        {% if batch|length == max_heat or loop.last %}
            {% for i in batch %}
                {'M104 T' ~ i.tn ~ ' S' ~ i.temp}
            {% endfor %}
            {% for i in batch %}
                {'M109 T' ~ i.tn ~ ' S' ~ i.temp}
            {% endfor %}
            {% set _ = batch.clear() %}
        {% endif %}
    {% endfor %}



