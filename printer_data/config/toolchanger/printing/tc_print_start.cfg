[gcode_macro _PRINT_START]
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}
    {tch.check_ok()}
    # ---< settings from macro settings
    {% set p            = printer %}
    {% set tcs          = p['gcode_macro _toolchanger_settings'] %}
    {% set pstrts       = tcs.get('print_start', {}) %}
    {% set tcs_clean    = tcs.get('clean_nozzle_macro', {}) %}
    {% set clean_name   = tcs_clean.get('macro', '') %}
    # ---< toolchanger shorts
    {% set tc           = p.toolchanger %}
    {% set ctn          = tc.tool_number %}
    {% set actn         = tch.get_mounted_tn()|int %}
    {% set init_tn      = (params.get('INITIAL_TOOL', params.get('TOOL', actn)|string))|replace('T', '')|int %}
    {% set t_temp_args  = [] %}
    {% set tns_used     = [] %}

    # ---< quick macro to makes things down the line cleaner.
    {% macro temp_param(n) -%}{'T' ~ n|string ~ '_TEMP'}{%- endmacro %}

    # ---<  update last used temps for knowing whats loaded.
    {% for tn in tc.tool_numbers if temp_param(tn) in params %}
        {svh.svf_update('recent_tooltemps.' ~ tch.tk_lower(tn), params[temp_param(tn)]|int)}
    {% endfor %}

    _UNIFIED_RESPOND MSG="{'?t?pPRINT_START ?t?s5?m' ~ rawparams}"

    # ---<  build list of tools
    {% for tn in tc.tool_numbers if temp_param(tn) in params %}
        {% set _ = t_temp_args.append(temp_param(tn) ~ '=' ~ params[temp_param(tn)]) %}
        {% set _ = tns_used.append(tn) %}
    {% endfor %}

        
    CLEAR_PAUSE
    # ---< if we have a tool equipped go on
    {% if actn != -1 %}
        STOP_TOOL_PROBE_CRASH_DETECTION

        {'M140 S' ~ params.BED_TEMP if 'BED_TEMP' in params else ''} # start heating bed.

        # ---< start heating all
        HEAT_TOOLS {'OFFSET=-40 ' ~ t_temp_args|join(' ')}

        # ---< find tool offsets of all used, if its > 1
        {'TC_FIND_TOOL_OFFSETS T=' ~ tns_used|join(',') if tns_used|length > 1 and pstrts.get('calibrate_tools_at_start') else ''}

        # ---< start part cooling fan to blow hot air around if temp > 230 (assume its abs or asa)
        {'M106 S100' if params.TOOL_TEMP|int > 230 else ''}

        # ---< start heating all
        HEAT_TOOLS {'OFFSET=-40 ' ~ t_temp_args|join(' ')}

        # ---< Heat all that arent initial tool
        HEAT_TOOLS {t_temp_args|join(' ')} # starts heating all full

        # ---< move to center of bed, lower a little, and blow hot air around.
        MOVE_TO_CENTER Z=5

        # ---< wait for tool to be at or below 150°C
        M109 S150

        # ---< wait for bed temp
        M190 S{params.BED_TEMP}

        # ---< clean at macro brush if we have
        {clean_name ~ ' T=' ~ init_tn ~ ' TEMP=' ~ (params.TOOL_TEMP|int - 35) if clean_name else ''}

        # ---< G32 if we have, if not homo regular
        {'G28' if 'gcode_macro G32' not in p else 'G32'}

        # ---< heat up all the tools for prime lines
        HEAT_TOOLS {t_temp_args|join(' ') ~ ' MODE=heating'} # waits for all to have a target
        
        # ---< Prime lines if enabled.
        {% if pstrts.get('prime_tools_at_start') %}
        PRIME_LINES INITIAL_TOOL={init_tn}
        MOVE_TO_CENTER Z=10
        {% endif %}

        # ---< select initial tool if not already selected
        T{init_tn}

        # ---< cool tool if it isnt used in the print.
        {('M104 S0 T' ~ actn) if actn not in tns_used else ''}

        # ---< wait for final heat.
        M109 T{init_tn} S{params.TOOL_TEMP}

        # ---< turn off the fan, null extruder
        M107
        G92 E0
        START_TOOL_PROBE_CRASH_DETECTION
    {% endif %}


[gcode_macro CANCEL_PRINT]
gcode:
    PRINT_END

[gcode_macro PRINT_END]
gcode:
    {% import toolchanger_helper as tch with context %}
    M400
    SET_PRESSURE_ADVANCE ADVANCE=0
    {% if tch.tool_can_extrude(printer.toolchanger.tool_number) %}
        M83
        G1 E-2 F1800
        G92 E0
    {% endif %}
        
    _MOVE_BACK_END_PAUSE_CANCEL
    STOP_TOOL_PROBE_CRASH_DETECTION
    
    {% for name in printer.toolchanger.tool_names if 'fan' in printer[name] %}
        SET_FAN_SPEED FAN={printer[name].fan} SPEED=0
    {% endfor %}

    TURN_OFF_HEATERS

    M220 S100
    M221 S100
    M82
    G90
    CLEAR_PAUSE

    {'BED_MESH_CLEAR' if 'BED_MESH_CLEAR' in printer.gcode.commands else ''}


[gcode_macro _MOVE_BACK_END_PAUSE_CANCEL]
variable_lift_z:       50
variable_y_move_zmax:  150 # sort of \ in y move back when going up to avoid umbicals
variable_y_move_zmin:  50  # (also you want it further back if its lower cause easier to get plate out)
variable_speed:        100
gcode:
    {% import toolchanger_helper as tch with context %}

    # ───< short names for less writing later
    {% set p, th, tc        = printer, printer.toolhead, printer.toolchanger %}
    {% set pos_min, pos_max = th.axis_minimum, th.axis_maximum %}
    {% set cur              = th.position %}

    # ───< calc endpoints, y at a slanted z (move less back when high to avoid umbilical strain)
    {% set z_ratio = cur.z / pos_max.z %} # on a scale of 0-1, how high are you
    {% set y_end   = pos_max.y - (y_move_zmin|float * (1 - z_ratio) + y_move_zmax|float * z_ratio) %}
    {% set x_end   = (pos_min.x + pos_max.x) / 2.0 %}
    {% set z_end   = [cur.z + lift_z|float, pos_max.z - 1]|min %}
    {% set small_z = [cur.z + 1, pos_max.z - 1]|min %}

    {tch.try_divide_accel()}

    G0 Z{small_z}
    ROUNDED_G0 Y={y_end} D={50}   F={tc.params_fast_speed/3}
    {% if (x_end - cur.x)|abs <= 50 %}
        ROUNDED_G0 X={x_end} Z={z_end} D=0 F={tc.params_fast_speed/3}
    {% else %}
        ROUNDED_G0 X={x_end} D={50}   F={tc.params_fast_speed/3}
        ROUNDED_G0 Z={z_end} D=0      F={tc.params_fast_speed/3}
    {% endif %}
    
    {tch.restore_vel()}


[gcode_macro HEATSOAK]
description: "my heatsoak macro"
gcode:
    # Will recieve all the same parameters handed into print start to use.
    M140 S{params.BED_TEMP}
    # move to center
    MOVE_TO_CENTER Z=5
    # blow hot air
    M106 S255

    # preheat all the tools
    {% for tn in printer.toolchanger.tool_numbers if 'T' ~ tn ~ '_TEMP' in params %}
        M109 T{tn} S130
    {% endfor %}

[delayed_gcode _HEAT_SOAK_UPDATE]
gcode:
    PRINT_START TICK=1

[gcode_macro PRINT_START]
variable_soak_settings: {
        'enabled':                 True,     # <- change if dont want
        'min_temp_to_trigger':     65,      # Skip soak for prints with bed temp lower then this
        'min_duration_to_trigger': 30,      # Skip soak for prints shorter than this
        'soak_seconds_per_minute': 5,       # Seconds to soak for each minute of estimated print time.
        'soak_time': {      'min': 5,       # minutes defining upper and lower heat soaking time to clamp to
                            'max': 45,
        },  
    }
variable_state: {}
gcode: 
    #PRINT_PRINTER_PATH PATH=virtual_sdcard
    #PRINT_PRINTER_PATH PATH=printer.print_stats
    #PRINT_PRINTER_PATH PATH=exclude_object
    #PRINT_PRINTER_PATH PATH=display_status 

    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set BUTS    = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
    {% set COLS    = printer['gcode_macro UI_CENTRAL'].ui_settings.colors %}
    {% set SELF    = 'PRINT_START' %}
    {% set SS      = soak_settings %}
    {% set th      = printer.toolhead %}
    {% set p_stats = printer.print_stats %}
    {% set t_idled = p_stats.total_duration  %}
    {% set t_now   = th.estimated_print_time %}

    # ╭───────────────────────────────────────────────── Helpers ─────────────────────────────────────────────────╮
    {%- macro ui(msg)  -%}          { action_respond_info('action:prompt_' ~ msg) }                  {%- endmacro -%}
    {%- macro add(msg) -%}          { ui(msg) } { ui('show') }                                       {%- endmacro -%}
    {%- macro center_but(label) -%} { (label).center(7, '⠀') }                                       {%- endmacro -%}
    {%- macro sign(val) -%}         { val / (val|abs) }                                              {%- endmacro -%}

    {%- macro clamp(val) -%}        
        { [ [ SS.soak_time.min * 60.0, val|float(0) ]|max, SS.soak_time.max * 60.0 ]|min } 
    {%- endmacro -%}

    {%- macro format_time(sec) -%}
        {%- set ns = namespace(remain = sec|int(-1)) -%}                               
        {%- set units, parts = [ ('days', 86400), ('hours', 3600), ('minutes', 60), ('seconds', 1) ], [] -%}
        {%- for label, size in units -%}
            {% set val = ns.remain // size %}
            {%- if val or (size == 1 and not parts) -%}
                {%- set _ = parts.append(val ~ ' ' ~ (label if val > 1 else label.rstrip('s'))) -%}
            {%- endif -%}
            {%- set ns.remain = ns.remain % size -%}
        {%- endfor -%}
        {%- if parts|length > 1 -%}
            {%- set last = parts.pop() -%}
            { parts|join(' ') ~ ' and ' ~ last }
        {%- else -%}
            { parts|first|default('-1s')}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro get_duration_from_name(fname) -%}
        {%- set units   = {'d': 86400, 'h': 3600, 'm': 60, 's': 1} -%}
        {%- set ns      = namespace(best = none, fallback = none) -%}
        {%- set groups  = (fname.rstrip('.gcode')|replace('-', '_')|replace('.', '_')).split('_')|reverse -%}
        {%- for g in groups if ns.best is none and g and g[0].isdigit() -%}
            {%- set parts = (g|replace('d',' d ')|replace('h',' h ')|replace('m',' m ')|replace('s',' s ')|trim).split() -%}
            {%- set ok    = namespace(v = (parts|length is even)) -%}
            {%- if ok.v -%}
                {%- set pairs, seen = parts|batch(2), [] -%} # always pairs -> day/hour...hour/minute...
                {%- set tot   = namespace(sec = 0) -%}
                {%- for p in pairs -%} # for num, u in pairs
                    {%- set num, u = p[0], p[1] -%}
                    {%- if not num.isdigit() or u not in units or u in seen -%}
                        {%- set ok.v = False -%}
                    {%- else -%}
                        {%- set _        = seen.append(u) -%}
                        {%- set tot.sec = tot.sec + (num|int * units[u]) -%}
                    {%- endif -%}
                {%- endfor -%}
            {%- endif -%}
            {%- if ok.v -%}
                {%- if seen|length == 1 and 's' in seen and ns.fallback is none -%}
                    {%- set ns.fallback = tot.sec -%}
                {%- else -%}
                    {%- set ns.best = tot.sec -%}
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
        { ns.best if ns.best is not none else ns.fallback|default(-1) }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────────────────── Reset and start print ──────────────────────────────────────────╮
    {%- macro _resume_and_print() -%}
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0
        M107 ;
        RESUME_BASE
        _PRINT_START {state.params|xmlattr}
        # ---< preserve print history
        { svh.gcode_var_update(SELF, 'state', {'history': state.get('history', {})}, mode='replace') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────────────────────── Open Popup ───────────────────────────────────────────────╮
    {%- macro _show_UI(soak_for) -%}    
        { ui('begin heat soaking for ' ~ p_stats.filename.split('_')[0]|default('next print')) }
        { ui('text upcoming print duration: ' ~ format_time(state.get('print_duration', -1)))}
        { ui('text heat soaking for: ' ~ format_time(soak_for))}
        { ui('button_group_start') }
        {% for step in [15, 10, 5, -15, -10, -5] %}
            { ui('button ' ~ center_but(('+' if step > 0 else '') ~ step ~ ' 𝗆𝗂𝗇')  ~ '|' ~ SELF ~ ' ADJUST=' ~ step ~ '|' ~ COLS.choices[-1 if step > 0 else 0]) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('button_group_start') }
        { ui('button ' ~ BUTS.stop[0] ~ ' Cancel|' ~ SELF ~ ' CANCEL=1|' ~ BUTS.stop[1]) }
        { ui('button ' ~ BUTS.play[0] ~ ' Skip|'   ~ SELF ~ ' SKIP=1|'   ~ BUTS.play[1]) }
        { add('button_group_end') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────────────────────── Update Popup ───────────────────────────────────────────────╮
    {%- macro _tick(seconds_left) -%}
        {%- set s = seconds_left|int -%}
        {%- if s <= 0 -%}
            { ui('end') }
            { _resume_and_print() }
        {%- else -%}
            {%- if s > 300 -%}      # more than 5 min → update every 5 min
                {% set interval = 300 %}
            {%- elif s > 60 -%}     # 1–5 min → update every 1 min
                {% set interval = 60  %}
            {%- elif s > 10 -%}     # 10–60 s → update every 10 s
                {% if not state.get('reminded', False) %} { _show_UI(seconds_left) } {% endif %}
                { svh.gcode_var_update(SELF, 'state.reminded', True) }
                {% set interval = 10  %}
            {%- else -%}
                {% set interval = 5   %}
            {%- endif -%}
            UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION={interval}
            { add('text ' ~ format_time(s) ~ ' remaining…') }
        {%- endif -%}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────────────── Two step initialization ─────────────────────────────────────────╮
    {% if 'params' not in state %}
        {% set print_duration = get_duration_from_name(p_stats.filename)|int %}
        {% set time_to_soak   = clamp(SS.soak_seconds_per_minute * (print_duration / 60.0))|float %}
        # ---< save to check later if we even need to.
        {% set new_state = { 'params': params, 'time_to_soak': time_to_soak, 'print_duration': print_duration, 'history': {print_duration: p_stats} } %}
        { svh.gcode_var_update(SELF, 'state', new_state) }
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0.1
        PAUSE_BASE
    {% endif %}

    {% if not state.get('initialized', False) and 'params' in state %}
        { svh.gcode_var_update(SELF, 'state.initialized', True) }
        {% set skip = state.get('print_duration', -1) < SS.min_duration_to_trigger %}
        {% set skip = soak_settings.min_temp_to_trigger > state.params.get('BED_TEMP', -1)|int(-1) or skip %}
        {% set skip = not soak_settings.enabled or skip %}
        {% if skip %} # <-- skip down here, cause we wanna record history to skip soak if two back to back
            { _resume_and_print() }
        {% else %}
            { _show_UI(state.get('time_to_soak', -1)) }
            {tch.check_ok()}
            HEATSOAK {state.params|xmlattr}
        {% endif %}
    {% endif %}
     # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    {% if 'ADJUST' in params %}
        {% set new_duration = clamp(state.get('time_to_soak', 0.0) + params.ADJUST|float(0.0) * 60.0)|float %}
        { svh.gcode_var_update(SELF, 'state.time_to_soak', new_duration) }
        { _show_UI(new_duration) }
    {% elif 'CANCEL' in params %}
        { svh.gcode_var_update(SELF, 'state', {'history': state.get('history', {})}, mode='replace') }
        { ui('end') }
        CANCEL_PRINT
    {% elif 'SKIP' in params %}
        { ui('end') }
        { _resume_and_print() }
    {% elif 'TICK' in params %}
        {% set remaining = state.get('time_to_soak', 0.0) - t_idled %}
        { _tick(remaining) }
    {% endif %}





[gcode_macro HEAT_TOOLS]
description: Batched multi-tool heater
variable_tol:           10          # ±°C band counted as “at temp”
variable_default_max_heating: 2     # how many at a time can be heating
gcode:
    # ───< settings/short alias
    {% set svf        = printer.save_variables.variables %}
    {% set ps         = printer['gcode_macro _toolchanger_settings'].get('print_start', {}) %}
    {% set max_heat   = [1, ps.get('max_tools_heating_at_once', default_max_heating)|int]|max %}
    {% set states     = svf.get('runout_states', {}) %}
    {% set tc         = printer.toolchanger %}
    {% set mode       = params.MODE|default('full')|lower %}
    {% set started, heating, request, batch  = [], [], [], [] %}

    # ───< object helpers
    {%- macro t_param_temp(tn) -%}{- params.get('T' ~ tn ~ '_TEMP', '') -} {%- endmacro -%}
    {%- macro e_id(n)  -%}{'extruder' ~ (n>0 and n|string or '')}          {%- endmacro -%}
    {%- macro e_tmp(n) -%}{printer[e_id(n)].temperature}                   {%- endmacro -%}
    {%- macro e_tgt(n) -%}{printer[e_id(n)].target}                        {%- endmacro -%}

    # ───< check helpers
    {%- macro is_heated(tn, temp) -%}{- 'true' if e_tmp(tn)|int >= (temp|int - tol) else '' -}{%- endmacro -%}

    # ───< build list of 'heating' and 'request' (T2_TEMP=200 -> {tn: 2, temp: 200})
    {% for tn in tc.tool_numbers if e_id(tn) in printer %}
        {% set _ = heating.append(tn) if e_tmp(tn)|int + tol < e_tgt(tn)|int else '' %}
        {% if t_param_temp(tn) %}
            {% set _ = request.append({'tn': tn|int, 'temp': t_param_temp(tn)|int}) %}
        {% endif %}
    {% endfor %}

    # ───< heat the next tools if possible
    {% for r in request if r.tn not in heating %}
        {% if (heating|length + started|length) < max_heat %}
            {'M104 T' ~ r.tn ~ ' S' ~ r.temp}
            {% set _ = started.append(r.tn) %}
        {% endif %}
    {% endfor %}

    # ───< make sure all requested are "M104"
    {% for r in request if mode == 'heating' %}
        {% if r.tn not in heating or not is_heated(r.tn, r.temp) %}
            {% if heating|length >= max_heat %}
                {% set wait_t = heating[0] %}
                {'M109 T' ~ wait_t ~ ' S' ~ e_tgt(wait_t)|int}
                {% set _ = heating.pop(0) %}
            {% endif %}
            {'M104 T' ~ r.tn ~ ' S' ~ r.temp}
            {% set _ = heating.append(r.tn) %}
        {% endif %}
    {% endfor %}

    # ───< make sure all requested are "M109"
    {% for r in request if mode == 'heated' %}
        {% set _ = batch.append(r) %}
        {% if batch|length == max_heat or loop.last %}
            {% for i in batch %}
                {'M104 T' ~ i.tn ~ ' S' ~ i.temp}
            {% endfor %}
            {% for i in batch %}
                {'M109 T' ~ i.tn ~ ' S' ~ i.temp}
            {% endfor %}
            {% set _ = batch.clear() %}
        {% endif %}
    {% endfor %}



