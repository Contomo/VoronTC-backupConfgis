
[gcode_macro PRIME_LINES]
description: Prime all active tools before printing.
  INITIAL_TOOL= Tool number, optional.
# ---< common
variable_lines_per_tool:       4      # Number of prime lines per tool
variable_line_step_y:          2      # Distance between lines in Y axis
variable_spacing:              7      # Distance between each tools prime lines
variable_ratio:                4      # Distance to move per 1mm of extrusion
# ---< position
variable_x_neg_offset:         20      # Distance from Edge of the bed on the -X axis
variable_x_length:             150     # space in x avalible from edge
variable_y_offset:             50      # Distance from Edge of the bed on the -Y axis
# ---< misc
variable_pre_prime:            5      # Amount of extrude to do before starting prime line
variable_wipe_length:          6      # Wipe length after prime
variable_initial_tool_retract: 0.2    # Retraction distance for the initial tool (if defined) after prime
variable_docked_tool_retract:  0.5    # Retraction distance for docked tools after prime
variable_z_prime_pos:          0.3    # Distance from bed on Z axis while priming
variable_z_move_pos:           1      # Distance from bed on Z axis while moving
variable_prime_speed:          2000   # Prime move speed
variable_wipe_speed:           5000   # Wipe move speed
variable_temp_drop:            50     # Amount of temperature drop applied to nozzles that are being docked
gcode:
  SAVE_GCODE_STATE NAME=PRIME_LINE_STATE
  {% set t_temp_args = [] %}
  {% set tools_to_use = [] %}
  {% set print_tools = [] %}
  {% set cfgf         = printer.configfile %}
  {% set max_x        = cfgf.config["stepper_x"]["position_max"]|float %}
  {% set all_tns      = printer.toolchanger.tool_numbers %}
  {% set cur          = printer.toolchanger.tool_number  %}
  {% set init         = params.INITIAL_TOOL|default(-1)|int %}
  {% set move_speed   = printer.toolchanger.params_fast_speed %}
  {% set tools_per_x  = all_tns|length / 2 %}
  {% set line_length  = (max_x - (x_neg_offset + max_x - x_length) - (spacing * (tools_per_x - 1))) / tools_per_x %}

  _UNIFIED_RESPOND MSG="{'?t?pPRIME_LINES ?t?s5?m' ~ rawparams}"

  {% macro e_tgt(e_id) -%}{printer[e_id].target}{%- endmacro %}
  {% macro temp_p(n) -%}{'T' ~ n|string ~ '_TEMP'}{%- endmacro %}
  
  # ---<  build list of tools
  {% for tn in all_tns if temp_p(tn) in params %}
      {% set _ = t_temp_args.append(temp_p(tn) ~ '=' ~ params[temp_p(tn)]) %}
      {% set _ = tools_to_use.append(tn) %}
  {% endfor %}


  {% set tools_to_include = all_tns if tools_to_use|length <= 0 else tools_to_use %}

  # ---< sort list cur tool first, init tool last, rest idc
  {% set others = tools_to_include|reject('equalto', cur)|reject('equalto', init)|list %}
  {% set ordered = ([cur] * (cur != init)) + others + ([init] * (init >= 0)) %}

  # ---< go over list, keep all tools that are heating.
  {% for tn in ordered %}
    {% set e_id = "extruder" ~ (tn > 0 and tn|string or "") %}
    {% if e_tgt(e_id)|int >= cfgf.settings[e_id].min_extrude_temp %}
      {% set _ = print_tools.append((tn, e_id)) %}
    {% endif %}
  {% endfor %}

  # ---< run through list, purge da tools
  {% for tn, e_id in print_tools if print_tools|length > 0 %}
    {% set y_idx   = loop.index0 // tools_per_x %}
    {% set x_idx   = loop.index0 %  tools_per_x %} #-< spaced chunks in x 

    {% set start_x = x_neg_offset + x_idx*(line_length + spacing) %}
    {% set start_y = y_offset + y_idx*spacing + line_step_y*(lines_per_tool-1) %}

    # ---< change tool & move in
    T{tn} X={start_x} Y={start_y} Z={z_move_pos}
    ROUNDED_G0 X={start_x} F={move_speed} D=100
    ROUNDED_G0 Y={start_y} F={move_speed} D=100
    ROUNDED_G0 Z={z_move_pos} F={move_speed} D=0
    G0 X{start_x} Y{start_y} Z{z_move_pos} F{move_speed}
    G0 Z{z_prime_pos} F{move_speed}
    M109 S{e_tgt(e_id)|int} T{tn}

    M117 Priming T{tn}
    M83
    G92 E0
    G91
    # ---< pre squirt a lil
    G1  E{pre_prime} F{prime_speed*2} 

    # ---< actually do the block now
    {% for i in range(lines_per_tool) %} 
      {% set seg   = (line_length/ratio)|int + (-2 if loop.last else 1) %}
      {% set dir   =  1 if loop.index0 is even else -1 %} #loop.cycle
      {% for _ in range(seg) %} # ---< step through line
        G1 X{dir*ratio} E1 F{prime_speed}
      {% endfor %}
      {% if not loop.last %} # ---< step if not last
        {% if tn != init %}
          M104 S{e_tgt(e_id)|int - temp_drop} T{tn} # ---< cool any non-initial tools (before wipe/retracts) 
        {% endif %}
        G1 Y-{line_step_y} E{line_step_y/ratio} F{move_speed}
      {% endif %}
    {% endfor %}

    # ---< retract & wipe
    {% set retract  = initial_tool_retract if tn==init else docked_tool_retract %}
    {% set wipe_dir = 1 if lines_per_tool is even else -1 %}
    G1 E-{retract} F{wipe_speed}
    G0 X{ wipe_dir*0.5 }                     F{wipe_speed}
    G0 X{ -wipe_dir*(wipe_length-0.5) }      F{wipe_speed}
    G0 Z{z_move_pos}

    G90
  {% else %}
    RESPOND TYPE=error MSG="No valid tools to process."
  {% endfor %}
  RESTORE_GCODE_STATE NAME=PRIME_LINE_STATE
  TC_LOAD_OFFSETS

