


# ROLE={extrusion_role} <- orca
#
# orca gives this:
# perimeter, externalperimeter, overhangperimeter, internalinfill, solidinfill, topsolidinfill
# bottomsurface, bridgeinfill, gapinfill, ironing, skirt, brim, supportmaterial, supportmaterialinterface
# supporttransition, wipetower, mixed


[delayed_gcode _LAZY_PAUSE_CHECK]
gcode:
    LAZY_PAUSE

[gcode_macro LAZY_PAUSE]
description: "pause, but allow for coasting/wait until at non critical feature"
variable_pause_settings: {
    'delay_pause':               0.25,  # seconds to keep printing while heating is turned off (to prevent ooze or something)
    'delay_till_extrusion_role': True,   # if true we wait until the extruder role becomes any of "extrusion_roles"
    'extrusion_roles':           ['InternalInfill'] # which ones to consider pausable
    }
variable_state: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}
    
    {% set p, cfg, th, tc = printer, printer.configfile.settings, printer.toolhead, printer.toolchanger %}
    {% set ps = pause_settings %}

    {%- macro start_coasting() -%}
        UPDATE_DELAYED_GCODE ID=_LAZY_PAUSE_CHECK DURATION=0 # Stop any previous loops
        {svh.save_tool_targets_to_variable('PAUSE', 'paused_tooltemps', turn_heaters_off=True)}
        {svh.gcode_var_update('LAZY_PAUSE', 'state.trigger_time', th.estimated_print_time)}
        {tch.respond_colored("Coasting for " ~ ps.delay_pause ~ "s ...", "LAZY_PAUSE", 'info--text')}
        UPDATE_DELAYED_GCODE ID=_LAZY_PAUSE_CHECK DURATION=0.05
    {%- endmacro -%}

    {%- macro finish(because='') -%}
        UPDATE_DELAYED_GCODE ID=_LAZY_PAUSE_CHECK DURATION=0
        {svh.gcode_var_update('LAZY_PAUSE', 'state', {}, mode='replace')}
        {tch.respond_colored("Triggering PAUSE " ~ because, "LAZY_PAUSE", 'success--text')}
        PAUSE
    {%- endmacro -%}

    {% if state.get('trigger_time', none) is not none %}
        {% if th.print_time - state.trigger_time >= ps.delay_pause  %}
            {finish('extrusion' if ps.delay_till_extrusion_role else '')}
        {% else %}
            UPDATE_DELAYED_GCODE ID=_LAZY_PAUSE_CHECK DURATION=0.05
        {% endif %}

    {% elif 'TRIGGER' in params %}
        {% if ps.delay_pause %}
            {start_coasting()}
        {% else %}
            {finish('extrusion')}
        {% endif %}
    {% else %}
        {% if p.pause_resume.is_paused %}
            {tch.respond_colored("printer is already paused.", "LAZY_PAUSE", 'warning--text') }
        {% elif p.idle_timeout.state|lower != "printing" %}
            {tch.respond_colored("Cannot PAUSE, printer is not printing.", "PAUSE", 'warning--text') }
        {% elif p.idle_timeout.state|lower == 'idle' %}
            {tch.respond_colored("idle timeout triggered. cannot pause?.", "RESUME", 'warning--text') }
        {% elif ps.delay_till_extrusion_role and ps.extrusion_roles %}
            {tch.respond_colored("blahasjf", "LAZY_PAUSE", 'accent--text') }
            SET_PAUSE_AT_EXTRUSION_ROLE MACRO="LAZY_PAUSE TRIGGER=1" ROLE="{ps.extrusion_roles}"
        {% elif ps.delay_pause != 0 %}
            {start_coasting()}
        {% elif ps.delay_pause == 0 %}
            {tch.respond_colored("Queed pause for next layer", "LAZY_PAUSE", 'accent--text') }
            SET_PAUSE_NEXT_LAYER
        {% else %}
            {finish('(settings dont allow lazy)')}
        {% endif %}
    {% endif %}



[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_pause_settings: {
        'stash_toolhead_at_pause':     True,
        'pickup_toolhead_before_idle': True,
        'retract_length':              2.0
    }
variable_pause_info:       {}
variable_paused_tooltemps: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set p, cfg, th, tc = printer, printer.configfile.settings, printer.toolhead, printer.toolchanger %}
    {% set state           = p.idle_timeout.state|lower %}

    {% if p.pause_resume.is_paused %}
        {tch.respond_colored("Print is already paused.", "PAUSE", 'warning--text') }
    {% elif state != "printing" %}
        {tch.respond_colored("Cannot PAUSE, printer is not printing.", "PAUSE", 'warning--text') }
    {% elif state == "idle" %}
        {tch.respond_colored("Cannot PAUSE, is idle", "PAUSE", 'warning--text') }
    {% else %}
        SAVE_GCODE_STATE NAME=_TC_PAUSE

        #---< save temps, and position
        {svh.save_tool_targets_to_variable('PAUSE', 'paused_tooltemps', turn_heaters_off=True) if not paused_tooltemps else ''}
        {% set last_pos = {'x': th.position.x, 'y': th.position.y, 'z': th.position.z, 'e': th.position.e} %}
        {svh.gcode_var_update('PAUSE', 'pause_info.last_position', last_pos)}
        
        M83 #---< relative extruder and retract
        G1 E{pause_settings.retract_length|abs * -1}

        {% if not pause_settings.stash_toolhead_at_pause %}
            #---< regular pause to the back
            _MOVE_BACK_END_PAUSE_CANCEL
        {% else %}
            #---< Dropoff tool, an prob ensure it doesnt turn off motors without one.
            {svh.gcode_var_update('PAUSE', 'pause_info.stashed_toolhead', tc.tool_number)}
            UNSELECT_TOOL RESTORE_AXIS=""
            UPDATE_DELAYED_GCODE ID=_ENSURE_TOOLHEAD_BEFORE_TIMEOUT DURATION={10 if pause_settings.pickup_toolhead_before_idle else 0}
        {% endif %}

        #---< final pause
        PAUSE_BASE 
    {% endif %}


[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_resume_settings: {
        'unretract_extra_distance': 0.1,
        'prime_feed': 500
    }
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set p, th, tc        = printer, printer.toolhead, printer.toolchanger %}

    {% set pa_macro         = p['gcode_macro PAUSE'] %}
    {% set info, settings   = pa_macro.pause_info, pa_macro.pause_settings %}
    {% set last_pos         = info.get('last_position', {}) %}
    {% set stashed_tn       = info.get('stashed_toolhead', -1)|int(-1) %}

    {% if not p.pause_resume.is_paused %}
        {tch.respond_colored("printer is not paused.", "RESUME", 'warning--text') }
    {% elif p.idle_timeout.state|lower == 'idle' %}
        {tch.respond_colored("idle timeout triggered. not save to resume.", "RESUME", 'warning--text') }
    {% elif last_pos.keys()|length >= 3 %}
        UPDATE_DELAYED_GCODE ID=_ENSURE_TOOLHEAD_BEFORE_TIMEOUT DURATION=0 # Cancel the timeout checker

        #---< reheat all tools
        {svh.restore_tool_targets_from_variable('PAUSE', 'paused_tooltemps', 'M109')}

        #---< restore to where we left off
        {% if stashed_tn != -1 and tc.tool_number == -1 %}
            SELECT_TOOL T={stashed_tn} X={last_pos.x} Y={last_pos.y} Z={last_pos.z}
        {% endif %}
        G0 X{last_pos.x} Y{last_pos.y} Z{last_pos.z} F{printer.toolchanger.params_fast_speed}

        #---< relative extruder
        M83 
        G1 E{settings.retract_length + resume_settings.unretract_extra_distance} F{resume_settings.prime_feed}

        #---< just to make sure
        G92 E{last_pos.e}

        #---< clean-up
        {svh.gcode_var_update('PAUSE', 'pause_info',       {}, mode='replace')}
        {svh.gcode_var_update('PAUSE', 'paused_tooltemps', {}, mode='replace')}

        RESTORE_GCODE_STATE NAME=_TC_PAUSE
        RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=0 # restore with move 0 (RESUME always restores with 1...)
        SAVE_GCODE_STATE NAME=PAUSE_STATE # save it again so it doesnt error...
        RESUME_BASE
    {% else %}
        # todo UI
        {tch.respond_colored("something went wrong... please do manually and call RESUME_BASE", "RESUME", 'warning--text') }
    {% endif %}

[delayed_gcode _ENSURE_TOOLHEAD_BEFORE_TIMEOUT]
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set p, cfg, th, tc = printer, printer.configfile.settings, printer.toolhead, printer.toolchanger %}

    #---< make sure we werent called multiple times
    UPDATE_DELAYED_GCODE ID=_ENSURE_TOOLHEAD_BEFORE_TIMEOUT DURATION=0
    {% if 'idle_timeout' in cfg %}
        {% set timeout         = p.printer.lookup_object('idle_timeout').idle_timeout %} # soon to be {% set timeout   = p.idle_timeout.idle_timeout %}
        {% set state           = p.idle_timeout.state|lower %}
        {% set time_idle       = th.estimated_print_time - th.print_time %}
        {% set time_until_idle = timeout - time_idle %}
        {% set stashed_tn      = p['gcode_macro PAUSE'].pause_info.get('stashed_toolhead', -1) %}
        UPDATE_DELAYED_GCODE ID=_ENSURE_TOOLHEAD_BEFORE_TIMEOUT DURATION=1
        {% if time_until_idle < 30 and state != 'idle' and stashed_tn != -1 and tc.tool_number == -1 %}
            # try to get the tool again, and kick in idle timeout (resets when we move)
            {tch.respond_colored('Picking up ' ~ tc.tool_names[stashed_tn]|replace('tool ', '') ~ ' to prevent idle timeout.', '_ENSURE_TOOLHEAD_BEFORE_TIMEOUT', 'info--text')}
            {svh.gcode_var_update('PAUSE', 'pause_info.last_timeout', timeout)}
            SELECT_TOOL T={stashed_tn}
            SET_IDLE_TIMEOUT TIMEOUT=29
            UPDATE_DELAYED_GCODE ID=_ENSURE_TOOLHEAD_BEFORE_TIMEOUT DURATION=30
        {% elif state == 'idle' and tc.tool_number == -1 %}
            # job done or fucked up, we are idle now. time to restore and say goodbye :(
            SET_IDLE_TIMEOUT TIMEOUT={p['gcode_macro PAUSE'].pause_info.get('last_timeout', cfg.idle_timeout.timeout)}
            {svh.gcode_var_update('PAUSE', 'pause_info.last_timeout', None)}
            UPDATE_DELAYED_GCODE ID=_ENSURE_TOOLHEAD_BEFORE_TIMEOUT DURATION=0
        {% elif stashed_tn != -1 and tc.tool_number == -1 %}
            UPDATE_DELAYED_GCODE ID=_ENSURE_TOOLHEAD_BEFORE_TIMEOUT DURATION=10
        {% endif %}
    {% endif %}





