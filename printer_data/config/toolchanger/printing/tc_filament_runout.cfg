
# #───< Filament sensor ---------------------------------------------------------
# [gcode_button runout_T0]
# debounce_delay: 1
# pin: ^!et0:PB9
# press_gcode:
#   FILAMENT_RUNOUT INSERT=0 # <- tool number
# release_gcode:
#   FILAMENT_RUNOUT REMOVE=0

#------------------------------------------------------------------------------------------------------------------

# WORKFLOW
#-> assign backup/toggle sensors with '_FILAMENT_RUNOUT_MANAGER'
#-> runout event from button gets sent to 'FILAMENT_RUNOUT' 
#-> 'FILAMENT_RUNOUT' reads settings from '_FILAMENT_RUNOUT_MANAGER'
#       and schedules the runout event to execute in '_RUNOUT_WATCHDOG'
#
# '_RUNOUT_WATCHDOG' triggers a pause based on your settings:
# -> it preferably pauses/swaps at a layer change or infill.
# -> the settings define how long/how much we want to wait/extrude before we say "nah, we gotta change now"
#

[delayed_gcode _FILAMENT_RUNOUT_STARTUP_UNLOCK]
initial_duration: 10
gcode: # dude idk ui keeps popping up at start !?!?!
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=startup_lock VALUE=False

[gcode_macro FILAMENT_RUNOUT]
variable_runout_settings: {
                    'max_delay'  : 20, # <- how many seconds after runout to force trigger the runout
                    'max_extrude': 22, # <- mm to allow extrusion after runout before force trigger the runout
    }                   
variable_active_config:{}
variable_startup_lock: True
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    # ╭──────────────────────────────── shorts ────────────────────────────────╮
    {% set p, th, tc = printer, printer.toolhead, printer.toolchanger %}
    {% set tcs       = p['gcode_macro _toolchanger_settings'] %}
    {% set now       = th.estimated_print_time %}
    {% set state     = p.print_stats.state|lower %}
    {% set PARENT    = '_FILAMENT_RUNOUT_MANAGER' %}
    {% set SELF      = 'FILAMENT_RUNOUT' %}
    {% set CHILD     = '_RUNOUT_WATCHDOG' %}
    {% set settings  = p['gcode_macro ' ~ PARENT].ui_settings %}
    {% set sens_key  = settings.svf_sensor_key %}
    {% set SET       = runout_settings %}
    # ╰────────────────────────────────────────────────────────────────────────╯

    {% set action = 'REMOVE' if 'REMOVE' in params else 'INSERT' if 'INSERT' in params else False %}
    {% if action %}
        {% set tn     = params[action]|int %}
        {% set key    = tch.tk_lower(tn) %}

        # ╭────────────── update svf if inserted/removed ──────────────╮
        {% if action == 'REMOVE' %}
            {svh.svf_update(sens_key ~      '.' ~ key, 'absent')}
            {svh.svf_update('recent_tooltemps.' ~ key, None)}
            _UNIFIED_RESPOND MSG="?t?p{tch.tool_key(tn)}?t?s0?mfilament removed"
        {% elif action == 'INSERT' %}
            {svh.svf_update(sens_key ~ '.' ~ key, 'present')}
            {PARENT} INITIALIZE=1 # make sure the user chosen settings are loaded into active config.
            {% if not startup_lock %} #now >= 25 %} # ignore the startup, they always trigger once (MULTIPLE TIMES!?!?) on start.
                _UNIFIED_RESPOND MSG="?t?p{tch.tool_key(tn)}?t?s0?mfilament inserted"
                _FILAMENT_INSERT_MANAGER INSERT={tn}
            {% endif %}
        {% endif %}
        # ╰─────────────────────────────────────────────────────────────╯

        # ╭──────────────────────────────────────── runout event handling ────────────────────────────────────────╮
        {% if state == 'printing' and action == 'REMOVE' %}
            {PARENT} RUNOUT={tn}
            {% if tn == tc.tool_number %} # currently printing tool just ran out.
                #–-–< save for checking
                {svh.gcode_var_update(CHILD, 'runout_event.runout_time',   now)}
                {svh.gcode_var_update(CHILD, 'runout_event.runout_length', th.position[3])}
                {svh.gcode_var_update(CHILD, 'runout_event.tn',            tn)}

                #–-–< add our backup tn to info, and start preheating it.
                {% if 'backup' in active_config.get(key, {}) %}
                    {% set backup_tn   = active_config.get(key).backup %}
                    {% set cur_temp    = tch.get_tool_target(tn) %}
                    M104 T{backup_tn} S{cur_temp - 25}
                    {svh.gcode_var_update(CHILD, 'runout_event.backup_temp', cur_temp)}
                    {svh.gcode_var_update(CHILD, 'runout_event.backup_tn',   backup_tn)}
                {% endif %}

                #–-–< que macro for earlier then timeout/after runout distance trigger
                SET_PAUSE_AT_EXTRUSION_ROLE  MACRO={CHILD} TRIGGER=ROLE ROLE=infill
                SET_PAUSE_NEXT_LAYER         MACRO={CHILD} TRIGGER=LAYER
                {CHILD}
            {% else %} # edge case, removed while parked?
                {% set tools_used_in_print = [] %}
                {% for n in tc.tool_numbers if tch.get_tool_target(n)|int >= 80  %}
                    {% set _ = tools_used_in_print.append(n) %}
                {% endfor %}
            {% endif %}
        {% endif %}
        # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────╯
    {% endif %}
    #------------------------------------------------------------------------------------------------------------------

[delayed_gcode _RUNOUT_WATCHDOG_LOOP]
gcode:
    UPDATE_DELAYED_GCODE ID=_RUNOUT_WATCHDOG_LOOP DURATION=0 # ensure not multiple callbacks at once
    _RUNOUT_WATCHDOG

[gcode_macro _RUNOUT_WATCHDOG]
variable_runout_event: {}
variable_abort_on_paused: True
variable_loop_delay: 0.15
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set p, th, tc    = printer, printer.toolhead, printer.toolchanger %}
    {% set PARENT       = p['gcode_macro FILAMENT_RUNOUT'] %}
    {% set SETTINGS     = PARENT.get('runout_settings', {}) %}
    {% set max_delay    = SETTINGS.get('max_delay')|float(0) %}
    {% set max_extrude  = SETTINGS.get('max_extrude')|float(0) %}

    # ╭─────────────────────── runout_change ────────────────────────╮
    {%- macro runout_change(tool_number, backup_number) -%}
        SAVE_GCODE_STATE NAME=_RUNOUT_WATCHDOG
        M83
        M104 T{backup_number} S{runout_event.backup_temp}
        M104 T{tool_number} S0
        {svh.gcode_var_update('T' ~ tool_number, 'tool_number', backup_number)}
        T{tool_number}
        RESTORE_GCODE_STATE NAME=_RUNOUT_WATCHDOG MOVE=0
        TC_LOAD_OFFSETS
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────╯

    # ╭─────────────────────── cleanup ────────────────────────╮
    {%- macro cleanup() -%}
        SET_PAUSE_AT_EXTRUSION_ROLE ENABLE=0 MACRO=PAUSE
        SET_PAUSE_NEXT_LAYER ENABLE=0 MACRO=PAUSE
        {svh.gcode_var_update('_RUNOUT_WATCHDOG', 'runout_event', {}, mode='replace')}
        UPDATE_DELAYED_GCODE ID=_RUNOUT_WATCHDOG_LOOP DURATION=0
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────╯

    {% if p.print_stats.state|lower != 'printing' %}
        {tch.respond_colored('we arent printing anymore, aborting', '_RUNOUT_WATCHDOG', 'warning--text')}
        {cleanup()}
    {% elif p.pause_resume.is_paused %}
        {tch.respond_colored('print has been paused, watchdog disabled.', '_RUNOUT_WATCHDOG', 'warning--text')}
        {svh.gcode_var_update('T' ~ runout_event.tn, 'tool_number', runout_event.backup_tn) if not abort_on_paused and runout_event|length > 0 else ''}
        {cleanup()}
    {% elif runout_event|length > 0 %}

        # ╭────────────────────────────────── check if we should ───────────────────────────────────╮
        {% set exceeded_t  = th.estimated_print_time - runout_event.runout_time >= max_delay %}
        {% set delta_e     = th.position[3] - runout_event.runout_length %}
        {% set exceeded_e  = delta_e < 0 or delta_e >= max_extrude %}

        {% if max_delay == 0 and max_extrude == 0 %}
            {% set reason = 'settings dont allow for delay.' %}
        {% elif 'TRIGGER' in params %}
            {% set reason = 'layer change' if params.TRIGGER == 'LAYER' else 'chosen extrusion role' %}
        {% elif exceeded_e or exceeded_t %}
            {% set reason = 'hit extrusion limit' if exceeded_e else 'timed out' %}
        {% else %}
            UPDATE_DELAYED_GCODE ID=_RUNOUT_WATCHDOG_LOOP DURATION={loop_delay}
        {% endif %}
        # ╰──────────────────────────────────────────────────────────────────────────────────────────╯
        {% if reason %}
            {% if runout_event.get('backup_tn', -1) != -1 %}
                {tch.respond_colored('selecting backup: ' ~ reason ~ ' (' ~ tool_key(runout_event.tn) ~ ' → ' ~ tool_key(runout_event.backup_tn) ~ ')', '_RUNOUT_WATCHDOG', 'success--text')}
                {runout_change(runout_event.tn, runout_event.backup_tn)}
                {cleanup()}
            {% else %}
                {tch.respond_colored('pausing: ' ~ reason ~ ' (' ~ tool_key(runout_event.tn) ~ ')', '_RUNOUT_WATCHDOG', 'success--text')}
                {cleanup()}
                PAUSE
            {% endif %}
        {% endif %}
    {% else %}
        {tch.respond_colored('please fill "runout_event" with data first.', '_RUNOUT_WATCHDOG', 'warning--text')}
    {% endif %}
