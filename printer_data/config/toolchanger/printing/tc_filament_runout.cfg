
# #───< Filament sensor ---------------------------------------------------------
# [gcode_button runout_T0]
# debounce_delay: 1
# pin: ^!et0:PB9
# press_gcode:
#   FILAMENT_RUNOUT INSERT=0 # <- tool number
# release_gcode:
#   FILAMENT_RUNOUT REMOVE=0

#------------------------------------------------------------------------------------------------------------------


[gcode_macro FILAMENT_RUNOUT]
variable_runout_delay:5 # <- how many seconds after runout to trigger the runout
variable_active_config:{}
gcode:
    {% import toolchanger_helper as tch with context %}

    #───< shorts
    {% set p, th, tc = printer, printer.toolhead, printer.toolchanger %}
    {% set tcs       = p['gcode_macro _toolchanger_settings'] %}
    {% set now       = estimated_print_time %}
    {% set state     = p.print_stats.state|lower %}
    {% set settings  = p['gcode_macro _FILAMENT_RUNOUT_MANAGER'].ui_settings %}
    {% set sens_key  = settings.svf_sensor_key %}
    #------------------------------------------------------------------------------------------------------------------
    {%- macro tool_key(i) -%} { tc.tool_names[i]|replace('tool ','')} {%- endmacro -%}
    {%- macro tk_lower(i) -%} { tool_key(i)|lower }                    {%- endmacro -%}
    #------------------------------------------------------------------------------------------------------------------
    {% set action = 'REMOVE' if 'REMOVE' in params else 'INSERT' if 'INSERT' in params else False %}

    {% if action %}
        {% set tn     = params[action]|int %}
        {% set key    = tk_lower(tn) %}
        #───< update variables and temps if inserted/removed
        {% if action == 'REMOVE' %}
            {tch.svf_update(sens_key ~      '.' ~ key, 'absent')}
            {tch.svf_update('recent_tooltemps.' ~ key, None)}
            _UNIFIED_RESPOND MSG="?t?pFil ?t?s0?mfilament removed"
        {% elif action == 'INSERT' %}
            {% set action = 'insert' %}
            {% set key = tk_lower(params.INSERT|int) %}
            {tch.svf_update(sens_key ~ '.' ~ key, 'present')}
            _UNIFIED_RESPOND MSG="?t?pT0_Fil ?t?s0?mfilament inserted"
        {% endif %}

        #------------------------------------------------------------------------------------------------------------------
        {% if state == 'printing' and action == 'removed' %}
            #───< record time of runout and extruder pos, prepare for action
            {% set key = tk_lower(tn) %}
            {tch.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ key ~ '.runout_time',   now)}
            {tch.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ key ~ '.runout_length', th.position[3])}
            {% if 'backup_tool' not in active_config.get(tn, {}) %}
                
                PAUSE
            {% else %}
                #───< assign the backup tool, que forced toolchange if it didnt happen in time or exceeded extrude "after sensor"
                {% set backup_tn = active_config.get(tn) %}
                {tch.gcode_var_update('T' ~ tn, 'tool_number', backup_tn)}
                # retract
                # actual runout logic
            {% endif %}
        {% else %}
      {% endif %}
    {% endif %}
    #------------------------------------------------------------------------------------------------------------------





[gcode_macro T98]
description: will open the filament runout sensor selection.
gcode:
    _FILAMENT_RUNOUT_MANAGER

[gcode_macro _FILAMENT_RUNOUT_MANAGER]
variable_ui_settings: {
        'nav_color_map': {
            'back':  'success',
            'close': 'error',
            'save':  'success',
            'reset': 'warning',
        },
        'button_color_map': {
            'enabled':  'green',
            'problem':  'yellow',
            'disabled': 'red',
            'n/a':      'rgba(50, 50, 50, 0.2)',
            'backup':   'accent',
            'unassign': 'rgba(0, 238, 255, 1)',
        },
        'button_prefix':   'gcode_button runout_',      # gcode_button prefix
        'svf_sensor_key':  'runout_sensors',
        'svf_settings_key':'runout_settings',
        'state_map':       {'RELEASED': 'absent', 'TRIGGERED': 'present'}
    }
variable_last_button: None
variable_initialized: False
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set tc,       svv     = printer.toolchanger,          printer.save_variables.variables %}
    {% set but_col,  nav_col = ui_settings.button_color_map, ui_settings.nav_color_map %}
    {% set sens_key, set_key = ui_settings.svf_sensor_key,   ui_settings.svf_settings_key %}
    {% set set_key_defaults  = {'state': 'disabled', 'backup': none} %}
    {% set parent            = printer['gcode_macro FILAMENT_RUNOUT'] %}
    {% set self_name         = '_FILAMENT_RUNOUT_MANAGER' %}
    # ---------------------------- helpers ----------------------------
    {%- macro ui(txt) -%}         { action_respond_info('action:prompt_' ~ txt) } {%- endmacro -%}
    {%- macro add_ui(txt) -%}     { ui(txt)}{ui('show') }                         {%- endmacro -%}
    {%- macro tool_key(i) -%}     { tc.tool_names[i]|replace('tool ','') }        {%- endmacro -%}
    {%- macro tk_lower(i) -%}     { tool_key(i)|lower }                           {%- endmacro -%}
    {%- macro btn_name(i) -%}     { ui_settings.button_prefix ~ tool_key(i) }     {%- endmacro -%}
    {%- macro backup_arrow(i) -%} { '' if i is none else ' -> ' ~ tool_key(i) }   {%- endmacro -%}
    {%- macro is_loaded(i) -%}    
        { '' if svv.get(sens_key, {}).get(tk_lower(i), {}) != 'present' else 'present'} 
    {%- endmacro -%}
    
    # -------------------------- one‑time init ------------------------
    {% if not initialized %}
        {% for tn in tc.tool_numbers %}
            {% set key     = tk_lower(tn) %}
            {% set desired = svv.get(set_key, {}).get(key, set_key_defaults) %}
            {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key, desired)}
            {tch.svf_update(set_key  ~ '.' ~ key, desired)}# todo move out of UI!
            {% set cur_state = None if btn_name(tn) not in printer else ui_settings.state_map[printer[btn_name(tn)].state] %}
            {tch.svf_update(sens_key ~ '.' ~ key, svv.get(sens_key, {}).get(key, cur_state))}
        {% endfor %}
        {tch.gcode_var_update(self_name, 'initialized', True)}
    {% endif %}

    # ------------------------- Save / Reset -------------------------
    {% if params.get('SVF') == 'SAVE' %}
        {% for tn in tc.tool_numbers %}
            {% set key = tk_lower(tn) %}
            {% set cur = parent.active_config.get(key, {}) %}
            {tch.svf_update(set_key ~ '.' ~ key, {'state':cur.get('state','disabled'),'backup':cur.get('backup', none)})}
        {% endfor %}
        {add_ui('text Saved current state') if last_button != 'save'}
        {tch.gcode_var_update(self_name, 'last_button', 'save')}
    {% elif params.get('SVF') == 'RESET' %}
        {% for tn in tc.tool_numbers %}
            {% set key = tk_lower(tn) %}
            {tch.svf_update(set_key ~ '.' ~ key, set_key_defaults)}
            {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key, set_key_defaults)}
        {% endfor %}
        {tch.gcode_var_update(self_name, 'last_button', 'reset')}
    {% endif %}

    # --------------------------- Toggle -----------------------------
    {% if 'TOGGLE' in params %}
        {% set i = params.TOGGLE|int %}
        {% if btn_name(i) in printer %}
            {% set key = tk_lower(i) %}
            {% set conf = parent.active_config.get(key, {}) %}
            {% set ns = 'enabled' if conf.get('state') != 'enabled' else 'disabled' %}
            {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key ~ '.state', ns)}
        {% endif %}
    {% endif %}

    # ------------------- Backup assign / remove ---------------------
    {% if params.get('BACKUP') and params.get('SELECT') %}
        {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ tk_lower(params.BACKUP|int) ~ '.backup', params.SELECT|int)}
    {% elif params.get('REMOVE') %}
        {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ tk_lower(params.REMOVE|int) ~ '.backup', none)}
    {% endif %}

    # ----------------------------- UI -------------------------------
    {%- macro render_main() -%}
        {% set backup_but_empty, enabled_but_empty = [], [] %}
        {ui('begin toggle runout sensor')}
        {ui('button_group_start')}
        {% for tn in tc.tool_numbers %}
            {% set conf    = parent.active_config.get(tk_lower(tn), {}) %}
            {% set exists  = btn_name(tn) in printer %}
            {% set cur_bkp = conf.get('backup', none)%}
            {% set state   = conf.get('state') if conf.get('state') == 'disabled' or is_loaded(tn) else 'problem' %}
            {% set color   = but_col['n/a'] if not exists else but_col[state] %}
            {% set action  = ' TOGGLE=' if exists else ' INVALID='  %}
            {ui('button ' ~ tool_key(tn) ~ backup_arrow(cur_bkp) ~ '|' ~ self_name ~ action ~ tn ~ '|' ~ color)}
            {% set _ = backup_but_empty.append("'" ~ tool_key(tn) ~ "'") if cur_bkp is not none and not is_loaded(tn) %}
            {% set _ = enabled_but_empty.append("'" ~ tool_key(tn) ~ "'") if state == 'problem' %}
        {% endfor %}
        {ui('button_group_end')}
        {ui('footer_button [Backup]|' ~ self_name ~ ' BACKUP=OPEN|' ~ but_col['backup'])}
        {ui('footer_button [Save]|'   ~ self_name ~ ' SVF=SAVE|' ~      nav_col['save'])}
        {ui('footer_button [Reset]|'  ~ self_name ~ ' SVF=RESET|' ~    nav_col['reset'])}
        {ui('footer_button [Close]|'  ~ self_name ~ ' UI=CLOSE|' ~     nav_col['close'])}
        {ui('show')}
        {add_ui('text [INFO] Tool(s) ' ~ enabled_but_empty|join(', ') ~ " Are enabled but no filament detected!") if enabled_but_empty else ''}
        {add_ui('text [INFO] Tool(s) ' ~ backup_but_empty|reject('in', enabled_but_empty)|list|join(', ') ~ " have a backup assigned but no filament was detected!") if backup_but_empty|reject('in', enabled_but_empty)|list else ''}
    {%- endmacro -%}

    {%- macro render_backup_list() -%}
        {ui('begin select tool to assign backup for')}
        {ui('button_group_start')}
        {% for tn in tc.tool_numbers %}
            {% set exists = btn_name(tn) in printer %}
            {% set conf   = parent.active_config.get(tk_lower(tn), {}) %}
            {% set color  = but_col['backup'] if exists else but_col['n/a'] %}
            {% set action = ' BACKUP=' if exists else ' INVALID=' %}
            {ui('button ' ~ tool_key(tn) ~ backup_arrow(conf.get('backup', none)) ~ '|' ~ self_name ~ action ~ tn  ~ '|' ~ color)}
        {% endfor %}
        {ui('button_group_end')}
        {ui('footer_button [back]|'   ~ self_name ~ '|' ~ nav_col['back'])}
        {ui('footer_button [Close]|'  ~ self_name ~ ' UI=CLOSE|' ~ nav_col['close'])}
        {ui('show')}
    {%- endmacro -%}

    {%- macro render_backup_select(src) -%}
        {ui('begin select backup for ' ~ tc.tool_names[src])}
        {ui('button_group_start')}
        {% set cur_bkp = parent.active_config.get(tk_lower(src), {}).get('backup', none) %}
        {% for tn in tc.tool_numbers if tn != src %}
            {% set action_color = ' REMOVE=' ~ src ~ '|' ~ but_col['unassign'] if cur_bkp == tn else ' BACKUP=' ~ src ~ ' SELECT=' ~ tn ~ '|' ~ but_col['backup'] %}
            {ui('button ' ~ tool_key(tn) ~ '|' ~ self_name ~ action_color)}
        {% endfor %}
        {ui('button_group_end')}
        {ui('footer_button [back]|'  ~ self_name ~ ' BACKUP=OPEN|' ~ nav_col['back'])}
        {ui('footer_button [Close]|' ~ self_name ~ ' UI=CLOSE|'    ~ nav_col['close'])}
        {% if not is_loaded(src) %}
            {add_ui('text [INFO] this tool is currently empty.')}
        {% endif %}
        {ui('show')}
    {%- endmacro -%}

    {%- macro close() -%}
        {ui('end')}
        {tch.gcode_var_update(self_name, 'last_button', 'close')}
    {%- endmacro -%}

    # decide which view to render
    {% if not params or 'TOGGLE' in params or params.get('SVF') == 'RESET' %}
        {render_main()}
        {add_ui('text save to also reset/apply to save variables.') if printer['gcode_macro ' ~ self_name].last_button == 'reset' else ''}
    {% elif params.get('BACKUP') == 'OPEN' or 'REMOVE' in params or (params.get('BACKUP') and params.get('SELECT')) %}
        {render_backup_list()}
    {% elif params.get('BACKUP') and not params.get('SELECT') %}
        {render_backup_select(params.BACKUP|int)}
    {% elif params.get('UI') == 'CLOSE' %}
        {close()}
    {% endif %}


 # gcode.commands.SET_PAUSE_AT_LAYER (dict)
 # gcode.commands.SET_PAUSE_NEXT_LAYER (dict)
 # gcode.commands.SET_PRINT_STATS_INFO.help: Overwrite, to get pause_next_layer and pause_at_layer feature (str)
 # configfile.settings.gcode_macro set_print_stats_info.variable_pause_at_layer: { 'enable': False, 'layer': 0, 'call': "PAUSE" } (str)
 # configfile.settings.gcode_macro set_print_stats_info.variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" } (str)


#TODO
[gcode_macro _HANDLE_RUNOUT_SWAP]
description: "Delayed action to perform the physical tool swap after a runout."
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set p, tc = printer, printer.toolchanger %}
    
    {% set last_tn = tc.last_tool_number %}
    {% set last_tn_str = last_tn|string %}
    {% set runout_states = p.save_variables.variables.get(parent.variables_key, {}) %}

    {% if runout_states.get(last_tn_str, True) == False %}
        {% set active_conf = parent.active_config.get(last_tn_str, {}) %}
        {% set backup_tn = active_conf.get('backup_tool', -1) %}

        _UNIFIED_RESPOND MSG="?pRUNOUT ?s0?t?mExecuting filament backup swap: T{last_tn} -> T{backup_tn}"

        T{last_tn}
    {% else %}
        _UNIFIED_RESPOND MSG="?pRUNOUT ?s0?t?mRunout swap for T{last_tn_str} aborted. Filament was re-inserted."
        {tch.gcode_var_update('T' ~ last_tn_str, 'tool_number', last_tn_str)}
    {% endif %}

