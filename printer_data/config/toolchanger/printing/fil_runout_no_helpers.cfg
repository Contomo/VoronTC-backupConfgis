
# #───< Filament sensor ---------------------------------------------------------
# [gcode_button runout_T0]
# debounce_delay: 1
# pin: ^!et0:PB9
# press_gcode:
#   FILAMENT_RUNOUT INSERT=0 # <- tool number
# release_gcode:
#   FILAMENT_RUNOUT REMOVE=0

#------------------------------------------------------------------------------------------------------------------

# WORKFLOW
#-> assign backup/toggle sensors with '_FILAMENT_RUNOUT_MANAGER'
#-> runout event from button gets sent to 'FILAMENT_RUNOUT' 
#-> 'FILAMENT_RUNOUT' reads settings from '_FILAMENT_RUNOUT_MANAGER'
#       and schedules the runout event to execute in '_RUNOUT_WATCHDOG'
#
# '_RUNOUT_WATCHDOG' triggers a pause based on your settings:
# -> it preferably pauses/swaps at a layer change or infill.
# -> the settings define how long/how much we want to wait/extrude before we say "nah, we gotta change now"
#

[delayed_gcode _FILAMENT_RUNOUT_STARTUP_UNLOCK]
initial_duration: 10
gcode: # dude idk ui keeps popping up at start !?!?!
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=startup_lock VALUE=False

[gcode_macro FILAMENT_RUNOUT]
variable_runout_settings: {
                    'max_delay'  : 20, # <- how many seconds after runout to force trigger the runout
                    'max_extrude': 22, # <- mm to allow extrusion after runout before force trigger the runout
    }                   
variable_active_config:{}
variable_startup_lock: True
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    # ╭──────────────────────────────── shorts ────────────────────────────────╮
    {% set p, th, tc = printer, printer.toolhead, printer.toolchanger %}
    {% set tcs       = p['gcode_macro _toolchanger_settings'] %}
    {% set now       = th.estimated_print_time %}
    {% set state     = p.print_stats.state|lower %}
    {% set PARENT    = '_FILAMENT_RUNOUT_MANAGER' %}
    {% set SELF      = 'FILAMENT_RUNOUT' %}
    {% set CHILD     = '_RUNOUT_WATCHDOG' %}
    {% set settings  = p['gcode_macro ' ~ PARENT].ui_settings %}
    {% set sens_key  = settings.svf_sensor_key %}
    {% set SET       = runout_settings %}
    # ╰────────────────────────────────────────────────────────────────────────╯

    {% set action = 'REMOVE' if 'REMOVE' in params else 'INSERT' if 'INSERT' in params else False %}
    {% if action %}
        {% set tn     = params[action]|int %}
        {% set key    = tch.tk_lower(tn) %}

        # ╭────────────── update svf if inserted/removed ──────────────╮
        {% if action == 'REMOVE' %}
            {svh.svf_update(sens_key ~      '.' ~ key, 'absent')}
            {svh.svf_update('recent_tooltemps.' ~ key, None)}
            _UNIFIED_RESPOND MSG="?t?p{tch.tool_key(tn)}?t?s0?m filament removed"
        {% elif action == 'INSERT' %}
            {svh.svf_update(sens_key ~ '.' ~ key, 'present')}
            {PARENT} INITIALIZE=1 # make sure the user chosen settings are loaded into active config.
            {% if not startup_lock %} #now >= 25 %} # ignore the startup, they always trigger once (MULTIPLE TIMES!?!?) on start.
                _UNIFIED_RESPOND MSG="?t?p{tch.tool_key(tn)}?t?s0?m filament inserted"
                _FILAMENT_INSERT_MANAGER INSERT={tn}
            {% endif %}
        {% endif %}
        # ╰─────────────────────────────────────────────────────────────╯

        # ╭──────────────────────────────────────── runout event handling ────────────────────────────────────────╮
        {% if state == 'printing' and action == 'REMOVE' %}
            {% set tool_cfg = active_config.get(key, {}) %}
            {% if tool_cfg.get('state') == 'enabled' %} # ignore if not enabled.
                {PARENT} RUNOUT={tn}
                {% if tn == tc.tool_number %} # currently printing tool just ran out.
                    #–-–< save for checking
                    {svh.gcode_var_update(CHILD, 'runout_event.runout_time',   now)}
                    {svh.gcode_var_update(CHILD, 'runout_event.runout_length', th.position[3])}
                    {svh.gcode_var_update(CHILD, 'runout_event.tn',            tn)}

                    #–-–< add our backup tn to info, and start preheating it.
                    {% set backup_tn = tool_cfg.get('backup', None)|int(None) %}
                    {% if backup_tn is not none and backup_tn >= 0 %}
                        {% set cur_temp  = tch.get_tool_target(tn)|float %}
                        M104 T{backup_tn} S{cur_temp - 25.0}
                        {svh.gcode_var_update(CHILD, 'runout_event.backup_temp', cur_temp)}
                        {svh.gcode_var_update(CHILD, 'runout_event.backup_tn',   backup_tn)}
                    {% endif %}

                    #–-–< que macro for earlier then timeout/after runout distance trigger
                    SET_PAUSE_AT_EXTRUSION_ROLE  MACRO={CHILD} TRIGGER=ROLE ROLE=infill
                    SET_PAUSE_NEXT_LAYER         MACRO={CHILD} TRIGGER=LAYER
                    {CHILD}
                {% else %} # edge case, removed while parked?
                    {% set tools_used_in_print = [] %}
                    {% for n in tc.tool_numbers if tch.get_tool_target(n)|int >= 80  %}
                        {% set _ = tools_used_in_print.append(n) %}
                    {% endfor %}
                    #TODO
                {% endif %}
            {% else %}
                {tch.respond_colored('ignoring runout for disabled sensor ' ~ tch.tool_key(tn), SELF, 'info--text')}
            {% endif %}
        {% endif %}
        # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────╯
    {% endif %}
    #------------------------------------------------------------------------------------------------------------------

[delayed_gcode _RUNOUT_WATCHDOG_LOOP]
gcode:
    UPDATE_DELAYED_GCODE ID=_RUNOUT_WATCHDOG_LOOP DURATION=0 # ensure not multiple callbacks at once
    _RUNOUT_WATCHDOG

[gcode_macro _RUNOUT_WATCHDOG]
variable_runout_event: {}
variable_abort_on_paused: True
variable_loop_delay: 0.10
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set p, th, tc    = printer, printer.toolhead, printer.toolchanger %}
    {% set PARENT       = p['gcode_macro FILAMENT_RUNOUT'] %}
    {% set SETTINGS     = PARENT.get('runout_settings', {}) %}
    {% set max_delay    = SETTINGS.get('max_delay')|float(0) %}
    {% set max_extrude  = SETTINGS.get('max_extrude')|float(0) %}

    # ╭─────────────────────── runout_change ────────────────────────╮
    {%- macro runout_change(tool_number, backup_number) -%}
        SAVE_GCODE_STATE NAME=_RUNOUT_WATCHDOG
        M83
        M104 T{backup_number} S{runout_event.backup_temp}
        M104 T{tool_number} S0
        {svh.gcode_var_update('T' ~ tool_number, 'tool_number', backup_number)}
        T{tool_number}
        RESTORE_GCODE_STATE NAME=_RUNOUT_WATCHDOG MOVE=0
        TC_LOAD_OFFSETS
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────╯

    # ╭─────────────────────── cleanup ────────────────────────╮
    {%- macro cleanup() -%}
        SET_PAUSE_AT_EXTRUSION_ROLE ENABLE=0 MACRO=PAUSE
        SET_PAUSE_NEXT_LAYER ENABLE=0 MACRO=PAUSE
        {svh.gcode_var_update('_RUNOUT_WATCHDOG', 'runout_event', {}, mode='replace')}
        UPDATE_DELAYED_GCODE ID=_RUNOUT_WATCHDOG_LOOP DURATION=0
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────╯

    {% if p.print_stats.state|lower != 'printing' %}
        {tch.respond_colored('we arent printing anymore, aborting', '_RUNOUT_WATCHDOG', 'warning--text')}
        {cleanup()}
    {% elif p.pause_resume.is_paused %}
        {tch.respond_colored('print has been paused, watchdog disabled.', '_RUNOUT_WATCHDOG', 'warning--text')}
        {svh.gcode_var_update('T' ~ runout_event.tn, 'tool_number', runout_event.backup_tn) if not abort_on_paused and runout_event|length > 0 else ''}
        {cleanup()}
    {% elif runout_event|length > 0 %}

        # ╭────────────────────────────────── check if we should ───────────────────────────────────╮
        {% set exceeded_t  = th.estimated_print_time - runout_event.runout_time >= max_delay %}
        {% set delta_e     = th.position[3] - runout_event.runout_length %}
        {% set exceeded_e  = delta_e < 0 or delta_e >= max_extrude %}

        {% if max_delay == 0 and max_extrude == 0 %}
            {% set reason = 'settings dont allow for delay.' %}
        {% elif 'TRIGGER' in params %}
            {% set reason = 'layer change' if params.TRIGGER == 'LAYER' else 'chosen extrusion role' %}
        {% elif exceeded_e or exceeded_t %}
            {% set reason = 'hit extrusion limit' if exceeded_e else 'timed out' %}
        {% else %}
            UPDATE_DELAYED_GCODE ID=_RUNOUT_WATCHDOG_LOOP DURATION={loop_delay}
        {% endif %}
        # ╰──────────────────────────────────────────────────────────────────────────────────────────╯
        {% if reason %}
            {% set backup_tn = runout_event.get('backup_tn', None)|int(None) %}
            {% if backup_tn is not none and backup_tn >= 0 %}
                {tch.respond_colored('selecting backup: ' ~ reason ~ ' (' ~ tch.tool_key(runout_event.tn) ~ ' → ' ~ tch.tool_key(runout_event.backup_tn) ~ ')', '_RUNOUT_WATCHDOG', 'success--text')}
                {runout_change(runout_event.tn, runout_event.backup_tn)}
                {cleanup()}
            {% else %}
                {tch.respond_colored('pausing: ' ~ reason ~ ' (' ~ tch.tool_key(runout_event.tn) ~ ')', '_RUNOUT_WATCHDOG', 'success--text')}
                {cleanup()}
                PAUSE
            {% endif %}
        {% endif %}
    {% else %}
        {tch.respond_colored('please fill "runout_event" with data first.', '_RUNOUT_WATCHDOG', 'warning--text')}
    {% endif %}


[gcode_macro _FILAMENT_RUNOUT_MANAGER]
variable_ui_settings: {
        'button_color_map': {
            'enabled':  'green',
            'problem':  'yellow',
            'disabled': 'red',
            'n/a':      'rgba(50, 50, 50, 0.2)',
            'backup':   'accent',
            'unassign': 'rgba(0, 238, 255, 1)',
        },
        'button_prefix':   'gcode_button runout_',      # gcode_button prefix
        'svf_sensor_key':  'runout_sensors',            # key in save_variables for sensor states
        'svf_settings_key':'runout_settings',           # key in save_variables for configuration
        'state_map':       {'RELEASED': 'absent', 'TRIGGERED': 'present'}
    }
variable_last_button: None
variable_initialized: False
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set tc       = printer.toolchanger %}
    {% set svv      = printer.save_variables.variables %}
    {% set BUTS     = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
    {% set UI_CFG   = ui_settings %}
    {% set BUT_COL  = UI_CFG.button_color_map %}
    {% set SENS_KEY = UI_CFG.svf_sensor_key %}
    {% set SET_KEY  = UI_CFG.svf_settings_key %}
    {% set SET_DEFAULTS = {'state': 'disabled', 'backup': none} %}
    {% set PARENT   = printer['gcode_macro FILAMENT_RUNOUT'] %}
    {% set SELF     = '_FILAMENT_RUNOUT_MANAGER' %}

    # ╭─────────────────────────────────────── UI Helpers ───────────────────────────────────────╮
    {%- macro ui(msg) -%}         { action_respond_info('action:prompt_' ~ msg) }   {%- endmacro -%}
    {%- macro add(msg) -%}        { ui(msg) }{ ui('show') }                         {%- endmacro -%}
    {%- macro btn_name(i) -%}     { UI_CFG.button_prefix ~ tch.tool_key(i) }        {%- endmacro -%}
    {%- macro backup_arrow(i) -%} { '' if i is none else ' → ' ~ tch.tool_key(i) }  {%- endmacro -%}
    {%- macro is_loaded(i) -%}    { '' if svv.get(SENS_KEY, {}).get(tch.tk_lower(i), '') != 'present' else 'present' } {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── Initialisation ───────────────────────────────╮
    {% if not initialized %}
        {% for tn in tc.tool_numbers %}
            {% set key = tch.tk_lower(tn) %}
            {% set conf = svv.get(SET_KEY, {}).get(key, SET_DEFAULTS) %}
            { svh.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ key, conf) }
            { svh.svf_update(SET_KEY ~ '.' ~ key, conf) }
            {% set cur = None if btn_name(tn) not in printer else UI_CFG.state_map[printer[btn_name(tn)].state] %}
            { svh.svf_update(SENS_KEY ~ '.' ~ key, svv.get(SENS_KEY, {}).get(key, cur)) }
        {% endfor %}
        { svh.gcode_var_update(SELF, 'initialized', True) }
    {% endif %}
    # ╰──────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── Save / Reset ───────────────────────────────╮
    {% if params.get('SVF') == 'SAVE' %}
        {% for tn in tc.tool_numbers %}
            {% set key = tch.tk_lower(tn) %}
            {% set cur = PARENT.active_config.get(key, {}) %}
            { svh.svf_update(SET_KEY ~ '.' ~ key, {'state': cur.get('state', 'disabled'), 'backup': cur.get('backup', none)}) }
        {% endfor %}
        {% if last_button != 'save' %}{ add('text Saved current state') }{% endif %}
        { svh.gcode_var_update(SELF, 'last_button', 'save') }

    {% elif params.get('SVF') == 'RESET' %}
        {% for tn in tc.tool_numbers %}
            {% set key = tch.tk_lower(tn) %}
            { svh.svf_update(SET_KEY ~ '.' ~ key, SET_DEFAULTS) }
            { svh.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key, SET_DEFAULTS) }
        {% endfor %}
        { svh.gcode_var_update(SELF, 'last_button', 'reset') }
    {% endif %}
    # ╰────────────────────────────────────────────────────────────────────────────╯

    # ╭──────────────────────────────── Toggle ───────────────────────────────╮
    {% if 'TOGGLE' in params %}
        {% set i = params.TOGGLE|int %}
        {% if btn_name(i) in printer %}
            {% set key = tch.tk_lower(i) %}
            {% set conf = PARENT.active_config.get(key, {}) %}
            {% set newstate = 'enabled' if conf.get('state') != 'enabled' else 'disabled' %}
            { svh.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key ~ '.state', newstate) }
        {% endif %}
    {% endif %}
    # ╰──────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────── Backup assign / remove ───────────────────────╮
    {% if params.get('BACKUP') and params.get('SELECT') %}
        {% set _key = tch.tk_lower(params.BACKUP|int) %}
        { svh.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ _key ~ '.backup', params.SELECT|int) }
    {% elif params.get('REMOVE') %}
        {% set _key = tch.tk_lower(params.REMOVE|int) %}
        { svh.gcode_var_update('FILAMENT_RUNOUT', 'active_config.' ~ _key ~ '.backup', None) }
    {% endif %}
    # ╰─────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────── Main page render ───────────────────────────────╮
    {%- macro render_main() -%}
        {% set backup_but_empty, enabled_but_empty = [], [] %}
        { ui('begin toggle runout sensor') }
        { ui('button_group_start') }
        {% for tn in tc.tool_numbers %}
            {% set conf    = PARENT.active_config.get(tch.tk_lower(tn), {}) %}
            {% set exists  = btn_name(tn) in printer %}
            {% set cur_bkp = conf.get('backup', none)%}
            {% set state   = conf.get('state') if conf.get('state') == 'disabled' or is_loaded(tn) else 'problem' %}
            {% set color   = BUT_COL['n/a'] if not exists else BUT_COL[state] %}
            {% set action  = ' TOGGLE=' if exists else ' INVALID='  %}
            { ui('button ' ~ tch.tool_key(tn) ~ backup_arrow(cur_bkp) ~ '|' ~ SELF ~ action ~ tn ~ '|' ~ color) }
            {% if cur_bkp is not none and not is_loaded(tn) %}
                {% set _ = backup_but_empty.append("'" ~ tch.tool_key(tn) ~ "'") %}
            {% endif %}
            {% if state == 'problem' %}
                {% set _ = enabled_but_empty.append("'" ~ tch.tool_key(tn) ~ "'") %}
            {% endif %}
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~ '|UI_CENTRAL|' ~ BUTS.back[1]) }
        { ui('footer_button [ Backup ]|' ~ SELF ~ ' BACKUP=OPEN|' ~ BUT_COL['backup']) }
        { ui('footer_button ' ~ BUTS.save[0] ~  '|' ~ SELF ~ ' SVF=SAVE|'  ~ BUTS.save[1]) }
        { ui('footer_button ' ~ BUTS.reset[0] ~ '|' ~ SELF ~ ' SVF=RESET|' ~ BUTS.reset[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|'  ~ BUTS.close[1]) }
        { ui('show') }
        {% if enabled_but_empty %}
            { add('text ' ~ BUTS.info[0] ~ ' Tool/s ' ~ enabled_but_empty|join(', ') ~ ' are enabled but no filament detected!') }
        {% endif %}
        {% set backup_filtered = backup_but_empty|reject('in', enabled_but_empty)|list %}
        {% if backup_filtered %}
            { add('text ' ~ BUTS.info[0] ~ ' Tool/s ' ~ backup_filtered|join(', ') ~ ' have a backup assigned but no filament was detected!') }
        {% endif %}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────── Select a tool to back up ───────────────────────────╮
    {%- macro render_backup_list() -%}
        { ui('begin select tool to assign backup for') }
        { ui('button_group_start') }
        {% for tn in tc.tool_numbers %}
            {% set exists = btn_name(tn) in printer %}
            {% set conf   = PARENT.active_config.get(tch.tk_lower(tn), {}) %}
            {% set color  = BUT_COL['backup'] if exists else BUT_COL['n/a'] %}
            {% set action = ' BACKUP=' if exists else ' INVALID=' %}
            { ui('button ' ~ tch.tool_key(tn) ~ backup_arrow(conf.get('backup', none)) ~ '|' ~ SELF ~ action ~ tn ~ '|' ~ color) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~  '|' ~ SELF ~ '|' ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|' ~ BUTS.close[1]) }
        { ui('show') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    # ╭──────────────────── select a tool as backup for that tool ────────────────────╮
    {%- macro render_backup_select(src) -%}
        { ui('begin select backup for ' ~ tc.tool_names[src]) }
        { ui('button_group_start') }
        {% set cur_bkp = PARENT.active_config.get(tch.tk_lower(src), {}).get('backup', none) %}
        {% for tn in tc.tool_numbers if tn != src %}
            {% if cur_bkp == tn %}
                { ui('button ' ~ tch.tool_key(tn) ~ '|' ~ SELF ~ ' REMOVE=' ~ src ~ '|' ~ BUT_COL['unassign']) }
            {% else %}
                { ui('button ' ~ tch.tool_key(tn) ~ '|' ~ SELF ~ ' BACKUP=' ~ src ~ ' SELECT=' ~ tn ~ '|' ~ BUT_COL['backup']) }
            {% endif %}
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.back[0] ~  '|' ~ SELF ~ ' BACKUP=OPEN|' ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|'    ~ BUTS.close[1]) }
        {% if not is_loaded(src) %}
            { add('text ' ~ BUTS.info[0] ~ ' this tool is currently empty.') }
        {% endif %}
        { ui('show') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────── small popup when it runs out  ────────────────────────╮
    {%- macro render_runout_message(tool_number) -%}
        { ui('begin ' ~ BUTS.warn[0] ~ ' ' ~ tch.tool_key(tool_number) ~ ' just ran out of filament!') }
        { add('text action will be taken shorty, this just serves as a reminder toggle sensors/assign backup tools. (bit of a stub right now here)') }
        { ui('button_group_start') }
            { ui('button ' ~ BUTS.edit[0] ~  '|' ~ SELF ~ '|' ~ BUTS.edit[1]) }
            { ui('button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|' ~ BUTS.close[1]) }
        { add('button_group_end') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────╯

    {%- macro close() -%}
        { ui('end') }
        { svh.gcode_var_update(SELF, 'last_button', 'close') }
    {%- endmacro -%}

    # ╭────────────────────────────── Dispatcher ───────────────────────────────╮
    {% if not params or 'TOGGLE' in params or params.get('SVF') == 'RESET' %}
        { render_main() }
        {% if printer['gcode_macro ' ~ SELF].last_button == 'reset' %}
            { add('text ' ~ BUTS.info[0] ~ ' save to also reset/apply to save variables.') }
        {% endif %}
    {% elif params.get('BACKUP') == 'OPEN' or 'REMOVE' in params 
            or (params.get('BACKUP') and params.get('SELECT')) %}
        { render_backup_list() }
    {% elif params.get('BACKUP') and not params.get('SELECT') %}
        { render_backup_select(params.BACKUP|int) }
    {% elif params.get('UI') == 'CLOSE' %}
        { close() }
    {% elif 'RUNOUT' in params %}
        { render_runout_message(params.RUNOUT|int(-1)) }
    {% endif %}
    # ╰───────────────────────────────────────────────────────────────────────────╯


[gcode_macro _FILAMENT_INSERT_MANAGER]
variable_state: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}
    {% set tc     = printer.toolchanger %}
    {% set svv    = printer.save_variables.variables %}
    {% set MAIN   = printer['gcode_macro UI_CENTRAL'] %}
    {% set ARRWS  = MAIN.ui_settings.arrows %}
    {% set BUTS   = MAIN.ui_settings.buttons %}
    {% set COL    = MAIN.ui_settings.colors %}
    {% set SELF   = '_FILAMENT_INSERT_MANAGER' %}
    {% set PILE   = svv.get('datapile', {}).get(SELF, {}) %}
    # ╭─────────────────────────────────────── UI Helpers ───────────────────────────────────────╮
    {%- macro ui(msg) -%}           { action_respond_info('action:prompt_' ~ msg) }   {%- endmacro -%}
    {%- macro add(msg) -%}          { ui(msg) }{ ui('show') }                         {%- endmacro -%}
    {%- macro center_but(label) -%} { (label).center(6, '⠀') }                        {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭──────────────────────────── render insert popup ─────────────────────────────╮
    {%- macro render_popup(tool_number) -%}
        {% set is_selected = tool_number == printer.toolchanger.tool_number %}
        {% set possible_temps = ['270', '255', '240', '225', '210', '205']%}
        { ui('begin ' ~ tch.tool_key(tool_number) ~ ' filament inserted!') }
        { ui('text Want to assign a temperature? (will get updated next in a print this tool is used in)') }
        { ui('button_group_start') }
        {% for temp in possible_temps %}
            { ui('button ' ~ temp ~ '°C|' ~ SELF ~ ' TEMP=' ~ temp ~ ' T=' ~ tool_number ~ '|' ~ COL.choices[loop.index]) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('show') }
        {% if printer.print_stats.state|lower != 'printing' %}
            {% set col_conf, col_canc = BUTS.confirm[1], BUTS.cancel[1] %}
        {% else %}
            { ui('text Unavalible during print...') }
            {% set col_conf, col_canc = COL['n/a'], COL['n/a'] %}
        {% endif %}
        { ui('text Want to ' ~ ('select, ' if not is_selected else '') ~ 'heat and center the tool?') }
        { ui('button_group_start') }
        { ui('button ' ~ BUTS.confirm[0] ~ '|' ~ SELF ~ ' SELECT=' ~ tool_number ~ '|' ~ col_conf) }
        { ui('button ' ~ BUTS.cancel[0]  ~ '|' ~ SELF ~ ' CANCEL=' ~ tool_number ~ '|' ~ col_canc) }
        { ui('button_group_end') }
        { ui('footer_button ' ~ BUTS.config[0] ~ ' dont show again|' ~ SELF ~ ' DISABLE=' ~ tool_number ~ '|' ~ BUTS.config[1]) }
        { ui('footer_button ' ~ BUTS.back[0] ~ '|UI_CENTRAL|' ~ BUTS.back[1]) }
        { ui('footer_button ' ~ BUTS.close[0] ~ '|' ~ SELF ~ ' UI=CLOSE|'  ~ BUTS.close[1]) }
        { ui('show') }
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── temp selection ────────────────────────────────╮
    {%- macro save_selected_temp(tool_number, temp) -%}
        {% set key   = tch.tk_lower(tool_number) %}
        {% set short = tch.tool_key(tool_number) %}
        {% if state.get(key, {}).get('tmp', none) != temp %}
            { add('text ' ~ BUTS.save[0] ~ ' saved: ' ~ temp|int(-1) ~ ' °C for: ' ~ short) }
        {% endif %}
        { svh.svf_update('recent_tooltemps.' ~ key, temp) }
        { svh.gcode_var_update(SELF, 'state.' ~ key ~ '.tmp', temp) }
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────────╯

    {% macro add_extrude_some() %}
        { ui('button_group_start') }
        { ui('button ' ~ BUTS.next[0] ~ ' Extrude some?|' ~ SELF ~ ' EXTRUDE=OPEN' ~ '|' ~ BUTS.next[1]) }
        { add('button_group_end') }
    {%- endmacro -%}
    
    # ╭────────────────────────────────── select/heat ───────────────────────────────────╮
    {%- macro select_n_heat(tool_number) -%}
        {% if printer.print_stats.state|lower != 'printing' %}
            {tch.check_ok()}
            {% set key = tch.tk_lower(tool_number) %}
            {% if not state.get(key, {}).get('clicked') %}
                { add_extrude_some() }
            {% endif %}
            { svh.gcode_var_update(SELF, 'state.' ~ key ~ '.clicked', True) }

            {% set is_selected = tool_number == tch.get_mounted_tn()|int %}
            { ('MOVE_TO_CENTER Z=25 T=' ~ tool_number) if not is_selected else 'MOVE_TO_CENTER Z=25' }

            {% set temp = svv.get('recent_tooltemps', {}).get(key, 222) %}
            M104 S{temp}
        {% endif %}
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────── how much to extrude page ──────────────────────────────────╮
    {%- macro render_extrude_select(feed, extrude) -%}
        {% if printer.print_stats.state|lower != 'printing' %}
            {% set feeds   = [ 30, 15, 5, 20, 10, 2 ] %}
            {% set lengths = [ 100, 50, 5, 75, 10, 1 ] %}
            {% set selected_feed = state.get('feed', feeds[2]) if feed is not number else feed %}
            {% if extrude is none or feed is not none %}
                { svh.gcode_var_update(SELF, 'state.feed', selected_feed) }
                { add('begin Select Amount/Feed') }
                { ui('button_group_start') }
                {% for f in feeds %}
                    {% set col = COL.select3[(0 if f == selected_feed else 1)]  %}
                    { ui('button ' ~ center_but(f ~ '𝗆𝗆³∕𝗌') ~ '|' ~ SELF ~ ' FEED=' ~ f ~ '|' ~ col) }
                {% endfor %}
                { add('button_group_end') }
                { ui('button_group_start') }
                {% for l in lengths %}
                    { ui('button ' ~ center_but(l ~ '𝗆𝗆') ~ '|' ~ SELF ~ ' EXTRUDE=' ~ l ~ '|' ~ COL.default) }
                {% endfor %}
                { ui ('button_group_end') }
                { ui ('footer_button [ ' ~ ARRWS.large[2] ~ ' - retract 1mm ]|' ~ SELF ~ ' EXTRUDE=-1' ~ '|' ~ BUTS.info[1]) }
                { ui ('footer_button '   ~ BUTS.back[0]   ~ '|' ~ SELF ~ ' T=' ~ state.last_tn         ~ '|' ~ BUTS.back[1]) }
                { add('footer_button '   ~ BUTS.close[0]  ~ '|' ~ SELF ~ ' UI=FIN|' ~ BUTS.close[1]) }
            {% else %}
                {% if not tch.tool_can_extrude(state.last_tn) %}
                    M109 S{tch.get_tool_target(state.last_tn)} T{state.last_tn}
                {% endif %}
                SAVE_GCODE_STATE NAME=RENDER_EXTRUDE_SELECT
                M83
                G1 E{extrude} F{(selected_feed / 2.405) * 60}
                RESTORE_GCODE_STATE NAME=RENDER_EXTRUDE_SELECT
            {% endif %}
        {% endif %}
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────── disable me ────────────────────────────────╮
    {%- macro disable_popup(tool_number) -%}
        { ui('begin Are you sure?') }{ ui('button_group_start') }
        { ui('button ' ~ BUTS.confirm[0] ~ '|' ~ SELF ~ ' CONFIRM=YES|' ~ BUTS.confirm[1] ) }
        { ui('button ' ~ BUTS.cancel[0]  ~ '|' ~ SELF ~ ' INSERT='  ~ tool_number ~ '|' ~ BUTS.cancel[1]) }
        { ui('button_group_end') }{ ui('text this will be enabled again on reset of the save variables file or by calling:') }
        { add('   ' ~ SELF ~ ' ENABLE=YES') }
    {%- endmacro -%}
    # ╰────────────────────────────────────────────────────────────────────────────╯

    {% if not PILE.get('disable', False) %}
        {% if 'T' in params and params.keys()|list|length == 1 %}
            { render_popup(params.T|int) }
            { add_extrude_some() }
        {% elif 'INSERT' in params%}
            { render_popup(params.INSERT|int) }
            { svh.gcode_var_update(SELF, 'state', {}, mode='replace') }
            { svh.gcode_var_update(SELF, 'state.last_tn', params.INSERT|int) }
        {% elif 'SELECT' in params %}
            { select_n_heat(params.SELECT|int) }
        {% elif 'CONFIRM' in params %}
            { svh.svf_update('datapile.' ~ SELF ~ '.disable', True) }
            { ui('end') }
        {% elif 'TEMP' in params  %}
            { save_selected_temp(params.T|int, params.TEMP|int) }
        {% elif 'UI' in params or 'CANCEL' in params %}
            {'M104 S0' if params.UI|default(none) == 'FIN'}
            { ui('end') }
            { svh.gcode_var_update(SELF, 'state', {}, mode='replace') }
        {% elif 'DISABLE' in params %}
            { disable_popup(params.DISABLE|int) }
        {% elif 'ENABLE' in params %}
            { svh.svf_update('datapile.' ~ SELF ~ '.disable', False) }
        {% elif 'EXTRUDE' in params or 'FEED' in params %}
            { render_extrude_select(params.FEED|default(none)|float(none), params.EXTRUDE|default(none)|float(none)) }
        {% elif not params  %}
            { ui('end') }
        {% else %}
            { ui('end') }
        {% endif %}
    {% endif %}