[gcode_macro _toolchanger_led_vars]
variable_status: {} # ---< status overwrite dict{'logo':{'0': 'busy', '1....}, 'nozzle':{....}}
# ---< NAMED: rainbow, fast-equals-bright
variable_invert: True # ---< Invert the current status during probing.
variable_colors: { 
    'logo': { 
        'busy'         :{'r':1.00, 'g':0.00, 'b':0.50, 'w':0.00},
        'ready'        :{'r':0.10, 'g':0.10, 'b':0.10, 'w':0.10},
        'idle'         :{'r':0.00, 'g':0.01, 'b':0.01, 'w':0.00},
        'homing'       :{'r':0.30, 'g':1.00, 'b':0.00, 'w':0.00},
        'leveling'     :{'r':0.00, 'g':0.60, 'b':1.00, 'w':0.00},
        'printing'     :'fast-equals-bright',  #{'r':1.00, 'g':1.00, 'b':1.00, 'w':0.00},
        'changing'     :{'r':0.00, 'g':0.00, 'b':1.00, 'w':0.00},
        'changed'      :{'r':0.00, 'g':0.80, 'b':1.00, 'w':0.00},
        'calibrating'  :{'r':0.00, 'g':1.00, 'b':0.00, 'w':0.00},
        'paused'       :'rainbow',
        'error'        :{'r':1.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00}, # manual status
        'meshing'      :{'r':0.20, 'g':1.00, 'b':0.00, 'w':0.00}, # manual status
        'cleaning'     :{'r':0.00, 'g':0.02, 'b':0.50, 'w':0.00}, # manual status
    },
    'nozzle': {
        'hot'          :{'r':1.00, 'g':0.05, 'b':0.00, 'w':0.01},
        'cold'         :{'r':0.00, 'g':0.30, 'b':0.20, 'w':0.03},
        # these may be named types too \/
        'on'           :{'r':0.90, 'g':0.90, 'b':0.90, 'w':1.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'ready'        :{'r':0.10, 'g':0.10, 'b':0.10, 'w':0.20},
        'idle'         :{'r':0.00, 'g':0.01, 'b':0.01, 'w':0.00},
    },
  }
gcode: # <- This section is required.  Do Not Delete.






[gcode_macro STATUS_OFF]
gcode:
  _OVERWRITE_STATUS LOCATION=NOZZLE STATUS=OFF T={params.T|default(printer.toolchanger.tool_number)|int}
  _OVERWRITE_STATUS LOCATION=LOGO   STATUS=OFF T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro STATUS_CLEANING]
gcode:
  _OVERWRITE_STATUS LOCATION=LOGO   STATUS=CLEANING T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro STATUS_MESHING]
gcode:
  _OVERWRITE_STATUS LOCATION=LOGO   STATUS=MESHING T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro STATUS_ON]
gcode:
  _OVERWRITE_STATUS LOCATION=NOZZLE   STATUS=ON T={params.T|default(printer.toolchanger.tool_number)|int}






[gcode_macro STATUS_READY]
gcode:
  STATUS_IDLE {rawparams}

[gcode_macro STATUS_RESET]
gcode:
  STATUS_IDLE {rawparams}

[gcode_macro STATUS_IDLE]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
    {% set status = printer['gcode_macro _toolchanger_led_vars'].status %}
    {% set logo   = status.get('logo',   {}) %}
    {% set nozzle = status.get('nozzle', {}) %}
    {% set _ =   logo.pop(tn|string, None) %}
    {% set _ = nozzle.pop(tn|string, None) %}
    {% set _ = status.update({'logo': logo, 'nozzle':nozzle}) %}
    SET_GCODE_VARIABLE MACRO='_toolchanger_led_vars' VARIABLE='status' VALUE="{status}"


[gcode_macro _OVERWRITE_STATUS]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
    {% set status = printer['gcode_macro _toolchanger_led_vars'].status %}
    {% set location   = status.get(params.LOCATION|default('None')|lower,   {}) %}
    {% set _ = location.update({tn: params.STATUS|default('ready')|lower}) %}
    {% set _ = status.update({params.LOCATION|default('None')|lower: location}) %}
    SET_GCODE_VARIABLE MACRO='_toolchanger_led_vars' VARIABLE='status' VALUE="{status}"



# ---< initialize if we are currently not moving, if not, try again until we arent
[delayed_gcode _INITIALIZE_TOOL_LED_TEMPLATES]
initial_duration: 2
gcode:
  {% if printer.motion_report.live_velocity <= 0.001 %}
    {% for tn in printer.toolchanger.tool_numbers %}
      LOAD_TOOL_LED_TEMPLATE NAME='nozzle' TEMPLATE='nozzle' T={tn} 
      LOAD_TOOL_LED_TEMPLATE NAME='logo'   TEMPLATE='logo'   T={tn} 
    {% endfor %}
  {% else %}
    UPDATE_DELAYED_GCODE ID=_INITIALIZE_TOOL_LED_TEMPLATES DURATION=1
  {% endif %}


# ---< Main macro for loading templates, includes error proofing and dynamic parameter parsing
[gcode_macro LOAD_TOOL_LED_TEMPLATE]
description: "usage: [NAME=nozzle/logo...] [TEMPLATE=thermal...]  [T=0,1,2...]"
gcode:                               
  # ---< short forms
  {% set p, tc, cfg = printer, printer.toolchanger, printer.configfile.settings %}

  # ---< Parameter parsing
  {% set name       = params.NAME|default(None)|lower if params.NAME is defined else None %}
  {% set template   = params.TEMPLATE|default(None) %}
  {% set tn         = params.T|default(tc.tool_number)|int %}

  # ---< get all the required macros/variables
  {% set tkey       = tc.tool_names[tn]|replace('tool ', '') if tn != -1            else None %}
  {% set macro_name = 'gcode_macro _' ~ tkey ~ '_vars'       if tkey                else None %}
  {% set tmpl_name  = 'display_template ' ~ template         if template            else None %}
  {% set tool_macro = p[macro_name]                          if macro_name in p     else None %}
  {% set led_name   = tool_macro.get(name ~ '_led_name')     if tool_macro and name else None %}
  {% set led_idxs   = tool_macro.get(name ~ '_idx')|string   if tool_macro and name else None %}

  # ---< Macro for adding parameters if the template needs them
  {% macro try_add_param(key_name, value, extra_list) %}
    {% set _ = extra_list.append(key_name ~ '=' ~ value) if key_name in cfg[tmpl_name] %}
  {% endmacro %}

  # ---< check if all is there to not later error hard in the set template
  {%- set errors = [
      "Required parameter 'NAME' is missing."                         if name is none,
      "Required parameter 'TEMPLATE' is missing."                     if template is none,
      "Required 'T' or active tool is missing."                       if tn == -1,
      "Macro '[" ~ macro_name ~ "]' not found."                       if macro_name and macro_name not in p,
      "Template '[" ~ tmpl_name ~ "]' not found."                     if tmpl_name  and tmpl_name not in cfg,
      "variable_'" ~ name ~ "_led_name' not in [" ~ macro_name ~ "]." if tool_macro and name and not led_name,
      "variable_'" ~ name ~ "_idx' not in [" ~ macro_name ~ "]."      if tool_macro and name and not led_idxs,
      "Device '[neopixel " ~ led_name ~ "]' not found."               if led_name   and 'neopixel ' ~ led_name not in p
    ]|select|list|join('\n')
  -%}

  {% if not errors %}
    # ---< we all gucci, do the thing
    {% set e_name = cfg[tc.tool_names[tn]|lower].extruder %}
    {% set min_t = (cfg['heater_fan ' ~ e_name|lower] or {}).get('heater_temp', 50.0)|float %}
    {% set led_bright = (tool_macro.get(name ~ '_brightness', '1')|replace(' ','')).split(',') %}

    # ---< loop over all the led indicies assigned
    {% for idx in (led_idxs|replace('[', '')|replace(']', '')).split(',') %}
      {% set brightness = (led_bright[loop.index0] if loop.index0 < led_bright|length else led_bright[-1])|float %}

      # ---< reset our extras list for this index, and add the needed parameters.
      {% set extra = [] %}
      {try_add_param('param_brightness', brightness,  extra)}
      {try_add_param('param_idx',        loop.index0, extra)}
      {try_add_param('param_tn',         tn,          extra)}
      {try_add_param('param_min_temp',   min_t,       extra)}
      
      SET_LED_TEMPLATE LED={led_name} TEMPLATE={template} INDEX={idx|trim}{' ' ~ extra|join(' ') if extra else ''}
    {% endfor %}
    {action_respond_info("Applied '" ~ template ~ "' to '" ~ led_name ~ "(" ~ led_idxs ~ ")'")}
  {% else %}
    # ---< we not okay :(
    {action_respond_info(errors)}
  {% endif %}