[gcode_macro _toolchanger_led_vars]
variable_status: {} # ---< status overwrite dict{'0': 'busy', '1....}
variable_colors: { # rainbow, fast-equals-bright
    'logo': { 
        'busy'         :{'r':1.00, 'g':0.00, 'b':0.50, 'w':0.00},
        'standby'      :{'r':0.05, 'g':0.05, 'b':0.05, 'w':0.00},
        'homing'       :{'r':0.30, 'g':1.00, 'b':0.00, 'w':0.00},
        'leveling'     :{'r':0.00, 'g':0.60, 'b':1.00, 'w':0.00},
        'printing'     :'fast-equals-bright',  #{'r':1.00, 'g':1.00, 'b':1.00, 'w':0.00},
        'changing'     :{'r':0.00, 'g':0.00, 'b':1.00, 'w':0.00},
        'changed'      :{'r':0.00, 'g':0.80, 'b':1.00, 'w':0.00},
        'calibrating'  :{'r':0.00, 'g':1.00, 'b':0.00, 'w':0.00},
        'error'        :{'r':1.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00}, # manual status
        'meshing'      :{'r':0.20, 'g':1.00, 'b':0.00, 'w':0.00}, # manual status
        'cleaning'     :{'r':0.00, 'g':0.02, 'b':0.50, 'w':0.00}, # manual status
    },
    'nozzle': {
        'heating'      :{'r':1.00, 'g':0.50, 'b':0.00, 'w':0.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'on'           :{'r':0.90, 'g':0.90, 'b':0.90, 'w':1.00},
        'standby'      :{'r':0.05, 'g':0.05, 'b':0.05, 'w':0.05},
    },
    'thermal': {
        'hot'          :{'r':1.00, 'g':0.10, 'b':0.00, 'w':0.30},
        'cold'         :{'r':0.00, 'g':0.00, 'b':0.40, 'w':0.50},
    }
  }
gcode: # <- This section is required.  Do Not Delete.


# ---< initialize if we are currently not moving, if not, try again until we arent
[delayed_gcode _INITIALIZE_TOOL_LED_TEMPLATES]
initial_duration: 2
gcode:
  {% if printer.motion_report.live_velocity <= 0.001 %}
    {% for tn in printer.toolchanger.tool_numbers %}
      _LOAD_TOOL_LED_TEMPLATE NAME='nozzle' TEMPLATE='thermal' T={tn} 
      _LOAD_TOOL_LED_TEMPLATE NAME='logo'   TEMPLATE='logo'    T={tn} 
    {% endfor %}
  {% else %}
    UPDATE_DELAYED_GCODE ID=_INITIALIZE_TOOL_LED_TEMPLATES DURATION=1
  {% endif %}


# ---< Main macro for loading templates, includes error proofing and dynamic parameter parsing
[gcode_macro _LOAD_TOOL_LED_TEMPLATE]
description: "usage: [NAME=nozzle/logo...] [TEMPLATE=thermal...]  [T=0,1,2...]"
gcode:
  # ---< short forms
  {% set tc            = printer.toolchanger %}
  {% set cfg           = printer.configfile.settings %}
  # ---< param parsing
  {% set tn            = params.T|default(tc.tool_number)|int %}
  {% set name          = params.NAME|default(None)|lower %}
  {% set template      = params.TEMPLATE|default(None) %}
  # ---< convert to names for lookup
  {% set tkey          = tc.tool_names[tn]|replace('tool ', '') %}
  {% set macro_name    = 'gcode_macro _' ~ tkey ~ '_vars' %}
  {% set template_name = 'display_template ' ~ template %}
  # ---< lists for dynamic param and reporting what set.
  {% set extra, idxs   = [], [] %}
  {% if name == None or template == None %}
    {action_respond_info("APPLY_LED_TEMPLATE_TO_ALL requires both name and TEMPLATE parameters.")}
  {% elif tn == -1 %}
    {action_respond_info("APPLY_LED_TEMPLATE_TO_ALL dunno which tool, none provided, none selected")}
  {% else %}
    {% if macro_name in printer %}
      {% set vars = printer[macro_name] %}
      {% set led_name = vars.get(name ~ '_led_name', None) %}
      {% set led_idxs = vars.get(name ~ '_idx', None) %}
      {% if not led_name or not led_idxs or not 'neopixel ' ~ led_name in printer %}
        {action_respond_info("Cannot set template for '" ~ tkey ~ "'. Required vars ('" ~ name ~ "_led_name'/'" ~ name ~ "_idx') or LED device ('neopixel " ~ led_name ~ "') not found.")}
      {% elif template_name not in cfg %}
        {action_respond_info("template: '" ~ template_name ~ "' does not exist.")}
      {% else %}
        {% for idx in led_idxs.split(',') %}
          {% set _ = idxs.append(idx|trim) %}
          {% if 'param_idx' in cfg[template_name] %}{% set _ = extra.append('param_idx=' ~ loop.index0) %}{% endif %}
          {% if 'param_tn'  in cfg[template_name] %}{% set _ = extra.append('param_tn=' ~ tn) %}          {% endif %}
          SET_LED_TEMPLATE LED={led_name} TEMPLATE={template} INDEX={idx|trim}{' ' ~ extra|join(' ') if extra else ''}
        {% endfor %}
        {action_respond_info("Applied '" ~ template ~ "' for '" ~ led_name ~ "(" ~ idxs|join(',') ~ ")'")}
      {% endif %}
    {% else %}
      {action_respond_info("led variable macro '[" ~ macro_name ~ "]' not found.")}
    {% endif %}
  {% endif %}








[gcode_macro status_off]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}

[gcode_macro status_cleaning]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}

[gcode_macro status_meshing]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}

