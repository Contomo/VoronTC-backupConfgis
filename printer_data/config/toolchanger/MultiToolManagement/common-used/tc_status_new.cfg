[gcode_macro _toolchanger_led_vars]
variable_status: {} # ---< status overwrite dict{'logo':{'0': 'busy', '1....}, 'nozzle':{....}}
# ---< NAMED: rainbow, fast-equals-bright
variable_colors: { 
    'logo': { 
        'busy'         :{'r':1.00, 'g':0.00, 'b':0.50, 'w':0.00},
        'standby'      :{'r':0.10, 'g':0.10, 'b':0.10, 'w':0.10},
        'homing'       :{'r':0.30, 'g':1.00, 'b':0.00, 'w':0.00},
        'leveling'     :{'r':0.00, 'g':0.60, 'b':1.00, 'w':0.00},
        'printing'     :'fast-equals-bright',  #{'r':1.00, 'g':1.00, 'b':1.00, 'w':0.00},
        'changing'     :{'r':0.00, 'g':0.00, 'b':1.00, 'w':0.00},
        'changed'      :{'r':0.00, 'g':0.80, 'b':1.00, 'w':0.00},
        'calibrating'  :{'r':0.00, 'g':1.00, 'b':0.00, 'w':0.00},
        'error'        :{'r':1.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00}, # manual status
        'meshing'      :{'r':0.20, 'g':1.00, 'b':0.00, 'w':0.00}, # manual status
        'cleaning'     :{'r':0.00, 'g':0.02, 'b':0.50, 'w':0.00}, # manual status
    },
    'nozzle': {
        'hot'          :{'r':1.00, 'g':0.05, 'b':0.00, 'w':0.01},
        'cold'         :{'r':0.00, 'g':0.30, 'b':0.20, 'w':0.03},
        # these may be named types too \/
        'on'           :{'r':0.90, 'g':0.90, 'b':0.90, 'w':1.00},
        'off'          :{'r':0.00, 'g':0.00, 'b':0.00, 'w':0.00},
        'standby'      :{'r':0.10, 'g':0.10, 'b':0.10, 'w':0.20},
    },
  }
gcode: # <- This section is required.  Do Not Delete.




[gcode_macro status_off]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}

[gcode_macro status_cleaning]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}

[gcode_macro status_meshing]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}

[gcode_macro STATUS_READY]
gcode:
  STATUS_IDLE {rawparams}

[gcode_macro STATUS_IDLE]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
    {% set status = printer['gcode_macro _toolchanger_led_vars'].status %}
    {% set logo   = status.get('logo',   {}) %}
    {% set nozzle = status.get('nozzle', {}) %}
    {% set _ =   logo.pop(tn|string, None) %}
    {% set _ = nozzle.pop(tn|string, None) %}
    {% set _ = status.update({'logo': logo, 'nozzle':nozzle}) %}
    SET_GCODE_VARIABLE MACRO='_toolchanger_led_vars' VARIABLE='status' VALUE={status}




# ---< initialize if we are currently not moving, if not, try again until we arent
[delayed_gcode _INITIALIZE_TOOL_LED_TEMPLATES]
initial_duration: 2
gcode:
  {% if printer.motion_report.live_velocity <= 0.001 %}
    {% for tn in printer.toolchanger.tool_numbers %}
      _LOAD_TOOL_LED_TEMPLATE NAME='nozzle' TEMPLATE='nozzle' T={tn} 
      _LOAD_TOOL_LED_TEMPLATE NAME='logo'   TEMPLATE='logo'   T={tn} 
    {% endfor %}
  {% else %}
    UPDATE_DELAYED_GCODE ID=_INITIALIZE_TOOL_LED_TEMPLATES DURATION=1
  {% endif %}


# ---< Main macro for loading templates, includes error proofing and dynamic parameter parsing
[gcode_macro _LOAD_TOOL_LED_TEMPLATE]
description: "usage: [NAME=nozzle/logo...] [TEMPLATE=thermal...]  [T=0,1,2...]"
gcode:
  # ---< short forms
  {% set p   = printer %}
  {% set tc  = p.toolchanger %}
  {% set cfg = p.configfile.settings %}

  # ---< param parsing
  {% set tn       = params.T|default(tc.tool_number)|int %}
  {% set name     = params.NAME|default(None)|lower %}
  {% set template = params.TEMPLATE|default(None) %}

  # ---< convert to names for lookup
  {% set tkey       = tc.tool_names[tn]|replace('tool ', '') %}
  {% set macro_name = 'gcode_macro _' ~ tkey ~ '_vars' %}
  {% set tmpl_name  = 'display_template ' ~ template %}
  {% set e_name     = cfg[tc.tool_names[tn]|lower].extruder %}

  # ---< lists for dynamic param and reporting what set.
  {% set ns          = namespace(min_t = 50.0) %}
  {% set extra, idxs, bright = [], [], [] %}

  # ---< get min temp for this tool
  {% for section in cfg if section.startswith('heater_fan ') and cfg[section].heater == e_name %}
      {% set ns.min_t = cfg[section].heater_temp|float %}
  {% endfor %}
  
  # ---< macro for easy parameter adding
  {% macro try_add_param(key_name, value) %}
    {% if key_name in cfg[tmpl_name] %}{% set _ = extra.append(key_name ~ '=' ~ value) %}{% endif %}
  {% endmacro %}

  {% if name == None or template == None %}
    {action_respond_info("APPLY_LED_TEMPLATE_TO_ALL requires both name and TEMPLATE parameters.")}
  {% elif tn == -1 %}
    {action_respond_info("APPLY_LED_TEMPLATE_TO_ALL dunno which tool, none provided, none selected")}
  {% elif macro_name in p %}

    # ---< get name and config
    {% set led_name   = p[macro_name].get(name ~ '_led_name', None) %}
    {% set led_idxs   = p[macro_name].get(name ~ '_idx', None) %}
    {% set led_bright = (p[macro_name].get(name ~ '_brightness', None)|default('1', true)|replace(' ','')).split(',') %}

    # ---< check if we gucci
    {% if not led_name or not led_idxs or not 'neopixel ' ~ led_name in p %}
      {action_respond_info("Cannot set template for '" ~ tkey ~ "'. Required vars ('" ~ name ~ "_led_name'/'" ~ name ~ "_idx') or LED device ('neopixel " ~ led_name ~ "') not found.")}
    {% elif tmpl_name not in cfg %}
      {action_respond_info("template: '" ~ tmpl_name ~ "' does not exist.")}
    {% else %}
      {% for idx in led_idxs.split(',') %}
        {% set _ = idxs.append(idx|trim) %}
        {% set _ = bright.append((led_bright[loop.index0] if loop.index0 < led_bright|length else led_bright[led_bright|length-1])|float) %}
        {try_add_param('param_brightness', (led_bright[loop.index0] if loop.index0 < led_bright|length else led_bright[led_bright|length-1])|float)}
        {try_add_param('param_idx', loop.index0)}
        {try_add_param('param_tn', tn)}
        {try_add_param('param_min_temp', ns.min_t)}
        # ---< set the template to the index
        SET_LED_TEMPLATE LED={led_name} TEMPLATE={template} INDEX={idx|trim}{' ' ~ extra|join(' ') if extra else ''}
      {% endfor %}
      #{action_respond_info("Applied '" ~ template ~ "' for '" ~ led_name ~ "(" ~ idxs|join(',') ~ ")'" ~ "brightness: (" ~ bright|join(',') ~ ")'")}
    {% endif %}
  {% else %}
      {action_respond_info("led variable macro '[" ~ macro_name ~ "]' not found.")}
  {% endif %}



[gcode_macro TEST_NOZZLE_TEMPLATE]
# usage: TEST_NOZZLE_TEMPLATE T=<tool number> IDX=<led index>
gcode:
  {% set tn  = params.T|default(0)|int %}
  {% set idx = params.IDX|default(0)|int %}
  {% set out = render('nozzle',
                      param_tn=tn,
                      param_idx=idx,
                      param_brightness=1.0,
                      param_min_temp=50,
                      param_max_temp=160) %}
  RESPOND MSG="tool {tn}, idx {idx} â†’ {out}"
