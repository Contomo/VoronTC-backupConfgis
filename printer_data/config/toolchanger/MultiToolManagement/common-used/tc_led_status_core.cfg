####################################### MAIN LED TEMPLATES FOR NOZZLE AND LOGO #######################################

#---< main logo template autodetects: 
# - homing, calibrating, qgl, idle
# - toolchanging, printing, used in print
[display_template logo]
param_tn: 'None'
param_brightness: 1.0
param_idx: 0
param_max_idx: 0
text:
  # ---< pos/speed tolerance for autodetect.
  {% set pos_tol, vel_tol, brush_tol = 0.1, 0.1, 5 %} #mm | mm/s | mm
  # ---< short terms
  {% set p, _dbg          = printer, [] %}
  {% set th, tc, cfg, tpe = p.toolhead, p.toolchanger, p.configfile.settings, p.tool_probe_endstop %}
  {% set probe_name, actn = tpe.active_tool_probe, tpe.active_tool_number %}
  {% set timeout_state    = p.idle_timeout.state|lower %} # printing (does anything) ready (does nothing) idle (idle timeout triggered)
  {% set print_state      = p.print_stats.state|lower %} # standby
  {% set tool             = p[tc.tool_names[param_tn|int]] %}
  {% set ledvars, c       = p['gcode_macro _toolchanger_led_vars'], {'r':0, 'g':0, 'b':0, 'w':0} %}
  {% set brush_location   = ledvars.get('cache', {}).get('clean_location', False) %}
  {% set bright, invert   = param_brightness|float, False %}

  # ---< needed variables in here.
  {% set th_pos, now  = th.position, th.estimated_print_time %}
  {% set target_temp  = p[tool.extruder].target %}
  {% set qgl_points   = cfg.quad_gantry_level.points %}
  {% set live_pos     = p.motion_report.live_position %}
  {% set current_vel  = p.motion_report.live_velocity %}
  {% set speed_factor = p.gcode_move.speed_factor %}

  # ---< keeping track and getting main settings
  {% set colors          = ledvars.get('colors', {}).get('logo', {}) %}
  {% set flags = {'at_qgl_square':    False,   'at_qgl_point':          False,  
                  'at_probing_speed': False,   'at_probing_lift_speed': False,  
                  'at_homing_speed':  False,   'out_of_bounds':         False,
                  'at_brush':         False
                  } %}

  {% set ns = namespace(status='ready') %}

  {%- macro try_set_status(status, condition) -%}
    {% if status|string in colors and (colors[status]|string|length >= 4 or colors[status] is mapping) %}
      {%- set ns.status = status|string if condition else ns.status -%}
    {% elif status %}{%- set _ = _dbg.append("missing '" ~ status|string ~ "' in _toolchanger_led_vars.colors") -%}{% endif %}
  {%- endmacro -%}
  
  {%- macro set_flag(flag, condition) -%}{%- set _ = flags.update({flag: (condition or flags.get(flag))}) -%}{%- endmacro -%}

  
  # ====================================== STATE FLAGGING ======================================
  
  {% if actn == param_tn|int %}
    {% if timeout_state == 'printing' %}
      # ---< busy, will be overwritten with anything specifically busy...
      {try_set_status('busy', true)}

      # ---< check if at probing speed
      {% set _ = set_flag('at_probing_speed', (current_vel - (cfg[probe_name|lower]['speed'] * speed_factor))|abs < vel_tol) %}
      {% set _ = set_flag('at_probing_lift_speed', (current_vel - (cfg[probe_name|lower]['lift_speed'] * speed_factor))|abs < vel_tol if cfg[probe_name|lower]['lift_speed'] != cfg[probe_name|lower]['speed']) %}

      # ---< check if at homing speed
      {% for step in ['stepper_x', 'stepper_y', 'stepper_z'] %}
        {% for speed_name in ['homing_speed', 'homing_retract_speed', 'second_homing_speed'] if speed_name in cfg[step] %}
          {% set _ = set_flag('at_homing_speed', ((cfg[step][speed_name]) - current_vel)|abs < vel_tol) %}
          {% set _ = set_flag('at_probing_speed', ((cfg[step][speed_name]) - current_vel)|abs < vel_tol and 'z' in step) %}
        {% endfor %}
      {% endfor %}

      # ---< check if at out of bounds (probably homing)
      {% for i in range(3) %}
          {% set _ = set_flag('out_of_bounds', th_pos[i] <= th.axis_minimum[i] or th_pos[i] >= th.axis_maximum[i] or (th_pos[i] == 0.0 and False)) %} #todo reminder that i toggled this off
      {% endfor %}

      # ---< check if on lines of â–¡ with some tolerance and at or below QGL move height
      {% set coords = {'x': qgl_points|map(attribute=0)|list, 'y': qgl_points|map(attribute=1)|list} %}
      {% for ax, xa in [('x','y'), ('y','x')] %}
        {% if (th_pos[ax] - coords[ax]|min)|abs < pos_tol or (th_pos[ax] - coords[ax]|max)|abs < pos_tol %}
          {% if (coords[xa]|min - pos_tol) <= th_pos[xa] <= (coords[xa]|max + pos_tol) %}
            {% set _ = set_flag('at_qgl_square', th_pos[2] <= cfg.quad_gantry_level.horizontal_move_z + pos_tol) %}
          {% endif %}
        {% endif %}
      {% endfor %}
      {% for pt in qgl_points %} # ---< check if exactly on point.
        {% set _ = set_flag('at_qgl_point', (live_pos[0] - pt[0])|abs < pos_tol and (live_pos[1] - pt[1])|abs < pos_tol) %}
      {% endfor %}

      # ---< check if at brush if we found it.
      {% for ax in ['x', 'y', 'z'] if brush_location and target_temp >= 100 %} 
        {% set _ = set_flag('at_brush', (th_pos[ax] - brush_location[ax])|abs < (brush_tol if current_vel <= 10 else brush_tol*(5 - 2.5 * ax == 'z'))) %}
      {% endfor %}

      # ====================================== STATUS SELECTION ======================================
      {try_set_status('printing'   , print_state == 'printing')}
      {try_set_status('cleaning'   , flags.at_brush)}
      {try_set_status('homing'     , flags.at_homing_speed or flags.at_probing_speed or flags.out_of_bounds)}
      {try_set_status('leveling'   , flags.at_qgl_square)}
      {try_set_status('calibrating', not p.tools_calibrate.calibration_probe_inactive)}
      {try_set_status('changing'   , tc.status == 'changing')}

      # ---< safe to assume that currently probing (works sorta okay, just updates too slow)
      {% if ledvars.get('invert', False) %}
        {% set invert = (flags.at_probing_speed or flags.at_qgl_point) and ns.status in ['leveling', 'homing'] or invert %}
      {% else %}
        {try_set_status('probing' ,(flags.at_probing_speed or (flags.at_qgl_point and not flags.at_probing_lift_speed)) and ns.status in ['leveling', 'homing'])}
      {% endif %}
    {% endif %}
    
    # ---< active tool, but doesnt have to do something rn
    {try_set_status('paused', p.pause_resume.is_paused and 'pause_resume' in p)}

  {% else %} #status == 'ready' %}
    {try_set_status('busy', target_temp|int != 0)}
    {try_set_status('changed', tc.status == 'changing' and param_tn|int == tc.tool_number)} 
    {try_set_status('error'  , tc.status == 'error'    and param_tn|int == tc.tool_number)} #todo test!
  {% endif %}
  #{try_set_status('changed', tc.status == 'changing' and actn != tc.tool_number)}
  {try_set_status('idle'   , timeout_state == 'idle')}

  # ---< allow possible overwrite
  {try_set_status(ledvars.get('status', {}).get('logo', {}).get(param_tn|int, None), true)}
  

  # ====================================== STATUS COLOR APPLICATION ======================================
  {% set status_color = colors.get(ns.status, colors.get('ready', {})) %}

  # --------------------------------------< get the status colors if its colors.
  {% if status_color is mapping %}
    {% set _ = c.update(status_color) %}

  # --------------------------------------< if its a template, render it instead.
  {% elif status_color is string %}
    {% set tokens    = status_color.split() %}
    {% set tmpl_name = tokens[0] %}
    {% if 'display_template ' ~ tmpl_name not in cfg %}
      {%- set _ = _dbg.append('[display_template ' ~ tmpl_name ~ '] was not found in config.') -%}
    {% else %}
      # ---< add parameters from central template
      {% set render_parameters = {} %}
      {% set possible_parameters = {'param_tn': param_tn,
                                    'param_idx': param_idx, 
                                    'param_max_idx': param_max_idx,
                                    } %}
      # ---< add extra parameters from variable. (can overwrite default ones too)
      {% for tk in tokens[1:] %}
          {% set kv = tk.split('=', 1) %}
          {% set _ = possible_parameters.update({'param_' ~ (kv[0]|replace('param_', ''))|trim: kv[1]|trim}) if kv|length == 2 else None %}
      {% endfor %}
    
      # ---< now check if they are even needed, and if they are, push them on
      {% for k, v in possible_parameters.items() if k in cfg['display_template ' ~ tmpl_name] %}
          {% set _ = render_parameters.update({k: v}) %}
      {% endfor %}

      #{% set _ = _dbg.append("render_parameters: " ~ render_parameters) %}
      #{% set _ = _dbg.append("Config Keys: " ~ cfg['display_template ' ~ tmpl_name].keys()|string) %}
      #{% set _ = _dbg.append("Possible Params: " ~ possible_parameters.keys()|string) %}
      # ---< render template
      {% set rgbw_list = (render(tmpl_name, **render_parameters)|replace(' ', '')|replace('\n', '')).split(',')|map('float')|list %}
      {% for rgbw in c.copy().keys() %} {% set _ = c.update({rgbw: rgbw_list[loop.index0]|default(0)}) %} {% endfor %}
    {% endif %}
  {% endif %}

  # ====================================== ACTUAL LED OUTPUT ======================================
  # ---< Apply color inversion if wanted
  {% for k,v in c.copy().items() if invert %}{% set _ = c.update({k: (v-1)|abs}) %}{% endfor %}

  # ---< Add 0.004 (1/255) flicker to force klipper updates for static colors
  {% set kv = c|dictsort(false, 'value')|last if c.r or c.g or c.b or c.w else [] %}
  {% if kv and kv[1] > 0 and ledvars.get('force_updates', False) %}{% set _ = c.update({kv[0]: c[kv[0]] + ((now/0.5 % 2) * 2 - 1) * 0.00392}) %}{% endif %}

  # ---< push leds out
  {c.r * bright},{c.g * bright},{c.b * bright},{c.w * bright} # ---< RGBW output

  {% if param_tn|string in ledvars.get('debug', '')|string and _dbg and param_idx|int == 0 %} # and (now - now|int) < 0.5
    {action_respond_info(_dbg|join('\n'))}
  {% endif %}





#---------------------------------< Thermal, interpolating between min and max for provided tn
[display_template nozzle]
param_tn: 'None'
param_idx: 0
param_brightness: 1.0
param_min_temp: 50
param_max_temp: 160
text:
  {% set max_t = param_max_temp|float %}
  {% set min_t = param_min_temp|float %}
  #--- Short-form variables ---
  {% set p       = printer %}
  {% set cfg     = p.configfile.settings %}
  {% set tc      = p.toolchanger %}
  {% set ledvars = p['gcode_macro _toolchanger_led_vars'] %}
  {% set colors  = ledvars.get('colors', {}).get('nozzle', {}) %}
  {% set c       = {'r':0, 'g':0, 'b':0, 'w':0} %}
  {% set bright  = param_brightness|float %}
  {% set rend_pa = {} %}

  # ---< get temps etc
  {% set e_name    = cfg[tc.tool_names[param_tn|int]|lower].extruder %}
  {% set cur_t     = p[e_name].temperature|float %}
  {% set tar_t     = p[e_name].target|float %}
  {% set is_active = (param_tn|int == tc.tool_number|int) %}

  # ---< determine the status
  {% set status = ledvars.get('status', {}).get('nozzle', {}).get(param_tn|int, 'thermal') %}
  {% if status == 'thermal' %}
    {% if is_active %}
      {% set status = 'on' %}
    {% else %}
      {% set status = 'ready' if tar_t == 0 and cur_t <= min_t else status %}
    {% endif %}
  {% endif %}

  # ---< get the setting for that status
  {% set status_color = colors.get(status, None) %}

  {% if status == 'thermal' %}
    {% set c_cold = colors.get('cold', {'r':0.0, 'g':0.0, 'b':1.0, 'w':0.0}) %}
    {% set c_hot  = colors.get('hot',  {'r':1.0, 'g':0.0, 'b':0.0, 'w':0.0}) %}
    {% set scalar = [ [ 0.0, (cur_t - min_t) / ([ (max_t - min_t)|abs, 0.01 ]|max) ]|max, 1.0 ]|min %}
    {% for k in c %}
      {% set _ = c.update({k: c_cold[k] + (c_hot[k] - c_cold[k]) * scalar }) %}
    {% endfor %}

  # ---< get the status colors if its colors.
  {% elif status_color is mapping %}
    {% set _ = c.update(status_color) %}

  # ---< if its a template, render it instead.
  {% elif status_color is string and 'display_template ' ~ status_color in cfg %}
    # ---< add possible parameters.
    {% set pos_params = {'param_tn': param_tn, 'param_idx': param_idx} %}
    {% for k, v in pos_params.items() if k in cfg['display_template ' ~ status_color] %}
        {% set _ = rend_pa.update({k: v}) %}
    {% endfor %}
    # ---< render template
    {% set rgbw_list = render(status_color, **rend_pa).split(',')|map('float')|list %}
    {% if rgbw_list|length == 4 %}
      {% set _ = c.update({'r': rgbw_list[0], 'g': rgbw_list[1], 'b': rgbw_list[2], 'w': rgbw_list[3]}) %}
    {% endif %}
  {% endif %}

  # ---< Apply brightness scaling for this led, also flicker randomly to force updates.
  {% set kv = c|dictsort(false, 'value')|last if c.r or c.g or c.b or c.w else [] %}
  {% if kv and kv[1] > 0 %}
    {% set tick = (p.toolhead.estimated_print_time)|int %}
    {% set flicker = ((tick % 2) * 2 - 1) * 0.004 %}
    {% set _ = c.update({kv[0]: c[kv[0]] + flicker}) %}
  {% endif %}

  {(c.r * bright)|round(4)},{(c.g * bright)|round(4)},{(c.b * bright)|round(4)},{(c.w * bright)|round(4)}



[gcode_macro DEBUG_LED]
description: "Toggle debugging for 'T<tool_number> (default: active)'"
gcode:
  {% set cur = printer['gcode_macro _toolchanger_led_vars'].get('debug', None) %}
  {% set tn = params.get('T', printer.toolchanger.tool_number)|string %}
  {% if cur is not none %}
    {% set cur = cur|string|replace(tn, '') if tn in cur|string else cur|string ~ tn %}
    SET_GCODE_VARIABLE MACRO='_toolchanger_led_vars' VARIABLE='debug' VALUE="{cur|string}"
  {% endif %}



# ---< initialize if we are currently not moving, if not, try again until we arent
[delayed_gcode _INITIALIZE_TOOL_LED_TEMPLATES]
initial_duration: 1
gcode:
  {% if printer.motion_report.live_velocity <= 0.001 %}
    {% for tn in printer.toolchanger.tool_numbers %}
      LOAD_TOOL_LED_TEMPLATE NAME='nozzle' TEMPLATE='nozzle' T={tn} 
      LOAD_TOOL_LED_TEMPLATE NAME='logo'   TEMPLATE='logo'   T={tn} 
    {% endfor %}
  {% else %}
    UPDATE_DELAYED_GCODE ID=_INITIALIZE_TOOL_LED_TEMPLATES DURATION=1
    
  {% endif %}


# ---< Main macro for loading templates, includes error proofing and dynamic parameter parsing
[gcode_macro LOAD_TOOL_LED_TEMPLATE]
variable_led_type: 'neopixel'
description: "usage: [NAME=nozzle/logo...] [TEMPLATE=thermal...]  [T=0,1,2...]"
gcode:                               
  # ---< short forms
  {% set p, tc, cfg = printer, printer.toolchanger, printer.configfile.settings %}
  {% set var_cache  = printer['gcode_macro _toolchanger_led_vars'].cache %}

  # ---< Parameter parsing
  {% set name       = params.NAME|default(None)|lower if params.NAME is defined else None %}
  {% set template   = params.TEMPLATE|default(None) %}
  {% set tn         = params.T|default(tc.tool_number)|int %}

  # ---< get all the required macros/variables
  {% set tkey       = tc.tool_names[tn]|replace('tool ', '') if tn != -1            else None %}
  {% set macro_name = 'gcode_macro _' ~ tkey ~ '_vars'       if tkey                else None %}
  {% set tmpl_name  = 'display_template ' ~ template         if template            else None %}
  {% set tool_macro = p[macro_name]                          if macro_name in p     else None %}
  {% set led_name   = tool_macro.get(name ~ '_led_name')     if tool_macro and name else None %}
  {% set led_idxs   = tool_macro.get(name ~ '_idx')|string   if tool_macro and name else None %}

  # ---< Macro for adding parameters if the template needs them
  {% macro try_add_param(key_name, value, extra_list) %}
    {% set _ = extra_list.append(key_name ~ '=' ~ value) if key_name in cfg[tmpl_name] %}
  {% endmacro %}

  # ---< check if all is there to not later error hard in the set template
  {%- set errors = [
      "Required parameter 'NAME' is missing."                         if name is none,
      "Required parameter 'TEMPLATE' is missing."                     if template is none,
      "Required 'T' or active tool is missing."                       if tn == -1,
      "Macro '[" ~ macro_name ~ "]' not found."                       if macro_name and macro_name not in p,
      "Template '[" ~ tmpl_name ~ "]' not found."                     if tmpl_name  and tmpl_name not in cfg,
      "variable_'" ~ name ~ "_led_name' not in [" ~ macro_name ~ "]." if tool_macro and name and not led_name,
      "variable_'" ~ name ~ "_idx' not in [" ~ macro_name ~ "]."      if tool_macro and name and not led_idxs,
      "Device '[" ~ led_type ~ " " ~ led_name ~ "]' not found."       if led_name   and led_type ~ ' ' ~ led_name not in p
    ]|select|list|join('\n')
  -%}

  {% if not errors %}
    # ---< we all gucci, do the thing
    {% set e_name = cfg[tc.tool_names[tn]|lower].extruder %}
    {% set min_t = (cfg['heater_fan ' ~ e_name|lower] or {}).get('heater_temp', 50.0)|float %}
    {% set led_bright = (tool_macro.get(name ~ '_brightness', '1')|replace(' ','')).split(',') %}
    {% set led_idxs_list = (led_idxs|replace('[', '')|replace(']', '')).split(',') %}
    {% set led_brightness_list = [] %}
    # ---< loop over all the led indicies assigned
    {% for idx in led_idxs_list %}
      {% set brightness = (led_bright[loop.index0] if loop.index0 < led_bright|length else led_bright[-1])|float %}
      {% set _ = led_brightness_list.append(brightness) %}
      # ---< reset our extras list for this index, and add the needed parameters.
      {% set extra = [] %}
      {try_add_param('param_brightness', brightness,           extra)}
      {try_add_param('param_max_idx',    led_idxs_list|length, extra)}
      {try_add_param('param_idx',        loop.index0,          extra)}
      {try_add_param('param_tn',         tn,                   extra)}
      {try_add_param('param_min_temp',   min_t,                extra)}
      
      SET_LED_TEMPLATE LED={led_name} TEMPLATE={template} INDEX={idx|trim}{' ' ~ extra|join(' ') if extra else ''}
      #G4 P50
    {% endfor %}

    # ---< update loaded templates cache
    {% set loaded_templates = var_cache.get('loaded_templates', {}) %}
    {% set _ = loaded_templates.update({tn ~ '_' ~ template: {'led_name': led_type ~ ' ' ~ led_name,
                                                              'idx_list': led_idxs_list,
                                                              'brightness_list': led_brightness_list
                                                              } }) %}
    {% set _ = var_cache.update({'loaded_templates': loaded_templates}) %}
    SET_GCODE_VARIABLE MACRO=_toolchanger_led_vars VARIABLE=cache VALUE="{var_cache}"

    {action_respond_info("Applied '" ~ template ~ "' to '" ~ led_name ~ "(" ~ led_idxs ~ ")'")}
  {% else %}
    # ---< we not okay :(
    {action_respond_info(errors)}
  {% endif %}









# ---< these still allow manual overwrite
[gcode_macro STATUS_OFF]
gcode:
  _OVERWRITE_STATUS LOCATION=NOZZLE STATUS=OFF T={params.T|default(printer.toolchanger.tool_number)|int}
  _OVERWRITE_STATUS LOCATION=LOGO   STATUS=OFF T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro STATUS_MESHING]
gcode:
  _OVERWRITE_STATUS LOCATION=LOGO   STATUS=MESHING T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro STATUS_ON]
gcode:
  _OVERWRITE_STATUS LOCATION=NOZZLE   STATUS=ON T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro _OVERWRITE_STATUS]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
    {% set status = printer['gcode_macro _toolchanger_led_vars'].status %}
    {% set location   = status.get(params.LOCATION|default('logo')|lower,   {}) %}
    {% set _ = location.update({tn: params.STATUS|default('ready')|lower}) %}
    {% set _ = status.update({params.LOCATION|default('logo')|lower: location}) %}
    SET_GCODE_VARIABLE MACRO='_toolchanger_led_vars' VARIABLE='status' VALUE="{status}"


# ---< these are deprecated and auto managed
[gcode_macro STATUS_HEATING]
gcode:
  STATUS_IDLE {rawparams ~ (' ' if rawparams else '') ~ 'NOZZLE=ONLY'}

[gcode_macro STATUS_READY]
gcode:
  STATUS_IDLE {rawparams}

[gcode_macro STATUS_RESET]
gcode:
  STATUS_IDLE {rawparams}

[gcode_macro STATUS_IDLE]
gcode:
  {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
  {% set status = printer['gcode_macro _toolchanger_led_vars'].status %}

  {% if 'LOGO' not in params %}
    {% set nozzle = status.get('nozzle', {}) %}
    {% set _ = nozzle.pop(tn, None) %}
    {% set _ = status.update({'nozzle': nozzle}) %}
  {% endif %}

  {% if 'NOZZLE' not in params %}
    {% set logo = status.get('logo', {}) %}
    {% set _ = logo.pop(tn, None) %}
    {% set _ = status.update({'logo': logo}) %}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=_toolchanger_led_vars VARIABLE=status VALUE="{status}"




# ---< automatically loads brush location if it finds it.
[delayed_gcode _LOAD_CLEAN_NOZZLE_LOCATION]
initial_duration: 0.1
gcode:
  {% set var_cache = printer['gcode_macro _toolchanger_led_vars'].cache %}
  {% if var_cache.get('clean_location', None) is none and printer.motion_report.live_velocity <= 0.001 %}
    {% set cache, _cache = {}, {} %}
    {% for stuff in printer if 'gcode_macro' in stuff and not cache.values()|select|list %}
      {% if 'clean' in stuff|lower and 'nozzle' in stuff|lower %}
        {% for s in ['_', ''] if not cache.values()|select|list %}
          {% set _ = _cache.clear() %}
          {% for k, v in printer[stuff].items() if k[s|length-1:] in [s ~ 'x', s ~ 'y', s ~ 'z'] and v is number %}
            {% set _ = _cache.update({k[-1] : v|float}) %}
          {% endfor %}
        {% set _ = cache.update(_cache, name=stuff) if _cache.values()|select|list|length == 3 else None %}
      {% endfor %}
      {% endif %}
    {% endfor %}
    {% set _ = var_cache.update({'clean_location': (False if cache.values()|select|list|length != 4 else _cache)}) %}
    SET_GCODE_VARIABLE MACRO=_toolchanger_led_vars VARIABLE=cache VALUE="{var_cache}"
    {action_respond_info("brush found at '" ~ _cache|string|replace('{','')|replace('}','')|replace("'",'') ~ "', is that correct?")}
  {% else %}
    UPDATE_DELAYED_GCODE ID=_LOAD_CLEAN_NOZZLE_LOCATION DURATION=1
  {% endif %}


