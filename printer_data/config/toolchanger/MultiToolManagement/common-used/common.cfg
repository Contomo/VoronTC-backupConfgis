[gcode_macro _MOVE_TO_CENTER]
gcode:
  {% set p = printer %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set restoreAccel = p.toolhead.max_accel|float %}
  {% if p.tool_probe_endstop.active_tool_number|int != -1 %}
    {% set max_y = p.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_x = p.configfile.config["stepper_x"]["position_max"]|float %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}
    G90 ; absolute mode
    {% if p.idle_timeout.state|string|lower != "printing" %}
      SET_VELOCITY_LIMIT ACCEL={p.configfile.config.printer.max_accel|float // tcs.get('macro_accel_divider', 1)|float}
    {% endif %}
    ROUNDED_G0 Y={max_y//2} F=12000 D=80
    ROUNDED_G0 X={max_x//2} F=12000 D=80
    {% if params.Z is defined %} ROUNDED_G0 Z={params.Z} F=12000 D=80 {% endif %}
    ROUNDED_G0 D=0
    SET_VELOCITY_LIMIT ACCEL={restoreAccel}
  {% endif %}

# 
# In here one finds stuff like temperature commands 
# global required macros, and or fan stuffs
# 
[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
variable_macro_html: "?t[T<index>] [S<temperature>] if T not provided tries to use active?nIf S not provided assumes 0.?pM104 "
gcode:
  {% set msg = macro_html %}
  {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
  {% if tn != -1 %}
  {% set toolnames = printer.toolchanger.tool_names %}
    {% if tn >= toolnames|length %} {% set msg = msg ~ "?s3?tCheck how many tools are defined in [toolchanger].?mInvalid tool index:?cT=" ~ tn ~ " ?cis out of range." %}
    {% else %}
      {% set tool = toolnames[tn] %}
      {% if not printer[tool].extruder %} {% set msg = msg ~ "?s3?tTool has no extruder?mCannot set temperature, ?c" ~ tool ~ "?c has no 'extruder'" %}
      {% else %}
        {% set extruder = printer[tool].extruder %}
          # ------------------------------------------------------
          # Below here actual macro, up there just error checking.
          # ------------------------------------------------------
          {% set newparameters = " T=" ~ tn %}
          {% if params.S is defined %}
            {% set newparameters = newparameters ~ " TARGET=" ~ params.S %}
          {% endif %}
          {% if 'TARGET' in newparameters and params.S|int > 0 %}
            STATUS_HEATING {newparameters}
          {% else %}
            STATUS_READY {newparameters}
          {% endif %}
          {% set target = params.S|default(0)|float %}
          {% set current = printer[extruder].target|float %}
          {% set within_band = current > target - 10 and current < target + 10 %}

          {% if target > 0 and not within_band %}
            {% set msg = msg ~ "?s0?t[T<index>] [S<temperature>] Set temp.?mSet heater of ?c" ~ tool ~ "?c  to ?c" ~ target|round(1) ~ "°C?c" %}
          {% elif target == 0 and current > 0 %}
            {% set msg = msg ~ "?s0?t[T<index>] [S<temperature>] Off.?mTurned off ?c" ~ tool ~ "?c's heater." %}
            SET_HEATER_TEMPERATURE HEATER={extruder} TARGET=0
          {% endif %}
          # prevent too many messages if called with same temp.
          SET_TOOL_TEMPERATURE {newparameters}
      {% endif %}
    {% endif %}
  {% else %}
    {% set msg = msg ~ "?s3?t[T<index>] [S<temperature>]?nPlease provide a toolnumber as T=toolnum?mCalled with no ?cT<index>? and no ?cactive tool?c" %}
    M104.1 {rawparams}
  {% endif %}
  {% if msg != macro_html %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% endif %}



[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>] [D<Deadband>] [MIN<min temp>] [MAX<min temp>]
  Set tool temperature and wait.
  T=    Tool number [optional]. If this parameter is not provided, the current tool is used.
  S=    Target temperature
  D=    Dead-band, allows the temperature variance +/- the deadband
  MIN=  Minimum, overrides the lower temp bound
  MAX=  Maximum, overrides the upper temp bound
variable_default_deadband: 10.0
variable_macro_html: "?t[T<index>] [S<temperature>] [D<Deadband>]?nIf T not provided tries to use active.?nIf D not provided uses default (±5)?pM109 "
gcode:
  {% set msg = macro_html %}
  {% set s = params.S|default(-1)|float %}
  {% set deadband = params.D|default(default_deadband)|float %}
  {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}

  {% if tn != -1 %}
    {% set toolnames = printer.toolchanger.tool_names %}
    {% if tn >= toolnames|length %}
      {% set msg = msg ~ "?s3?tInvalid tool index. Check tool count in [toolchanger].?mT=" ~ tn ~ " is out of range." %}
    {% else %}
      {% set tool = toolnames[tn] %}
      {% if not printer[tool].extruder %}
        {% set msg = msg ~ "?s3?tCannot heat — tool has no extruder heater.?m ?c" ~ tool ~ "?c has no 'extruder'" %}
      {% else %}
        {% set extruder = printer[tool].extruder %}
        {% set newparameters = " T=" ~ tn %}

        {% set has_s = params.S is defined %}
        {% set has_min = params.MIN is defined %}
        {% set has_max = params.MAX is defined %}
        {% if has_min or has_max or has_s %}
          {% set target = s if has_s else printer[extruder].target %}
          {% set lower_bound = ((params.MIN|default(target)|float) - (deadband / 2))|float %}
          {% set upper_bound = ((params.MAX|default(target)|float) + (deadband / 2))|float %}
          {% if target < lower_bound or target > upper_bound %}
            {% set msg = msg ~ "?s0?t?mCannot wait for ?c" ~ tool ~ "?c to be within ?c" ~ lower_bound|round(2) ~ "°C?c to ?c" ~ upper_bound|round(2) ~ "°C?c" ~ " because its out of range of ?c" ~ target|round(2) ~ "°C?c" %}
          {% else %}
            {% if has_s %}
              {% set msg = msg ~ "?s0?tWaiting to reach temp.?nDeadband or explicit MIN/MAX applied.?mHeating/Cooling ?c" ~ tool ~ "?c to ?c" ~ target ~ "°C?c and " %}
              SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={target}
            {% endif %}
            {% set msg = msg ~ "waiting to be within ?c" ~ lower_bound|round(2) ~ "°C?c to ?c" ~ upper_bound|round(2) ~ "°C?c" %}
            _UNIFIED_RESPOND MSG="{msg}"
            TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={lower_bound} MAXIMUM={upper_bound}
            STATUS_HEATING {newparameters}
          {% endif %}
        {% else %}
          SET_HEATER_TEMPERATURE HEATER={extruder} TARGET=0
          STATUS_READY {newparameters}
          {% set msg = msg ~ "?s1?tTarget temp was 0.?nplease use M104 to disable a tools heater.?mDisabled heater for ?c" ~ tool ~ "?c." %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% else %}
    {% set msg = msg ~ "?s3?tNo active tool available.?nNo Toolnumber provided?mCalled with no ?c[T<index>]?c and no ?cactive tool?c present." %}
  {% endif %}
  {% if msg != macro_html and ('?s2' in msg or '?s3' in msg or '?s4' in msg) %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% endif %}



          # ------------------------------------------------------
          # Below here actual macro, up there just error checking.
          # ------------------------------------------------------
#################################################################################################################
# _TAP_PROBE_ACTIVATE ###########################################################################################
#################################################################################################################
[gcode_macro _TAP_PROBE_ACTIVATE] #TODO ADD RIGHT USAGE FOR OTHERS LATER
description: Ensure safe temp for bed probing
gcode:
  {% set tcs = printer['gcode_macro _toolchanger_settings'] %}
  {% if tcs.use_tap_requires_temperature == True %}
      {% set max_temp = 150 %}
      {% set actual_temp = printer[params.HEATER].temperature %}
      {% set target_temp = printer[params.HEATER].target %}
      {% if target_temp > max_temp %}
          # fix _UNIFIED_RESPOND
          { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
          SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
      {% endif %}
      # Temperature target is already low enough, but nozzle may still be too hot.
      {% if actual_temp > max_temp  + 2 %}
          { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
          TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
      {% endif %}
    {% endif %}
