[gcode_macro _TX_INFO]
description: "Provides detailed debug information about tool switching positions and offsets."
variable_macro_html: "?tProvides detailed debug information about tool switching positions and offsets.?p_TX_INFO"
gcode:
  {% if printer['gcode_macro _toolchanger_settings'].debug_messages %}
    {% set p = printer %}
    {% set new_tool = params.TNNEW|int %}
    {% set global_z_offset = params.GLOBAL_Z|float|default(0) %}
    {% set cur_tool = params.TNOLD|int %}
    {% set cur_tool_name = p.toolchanger.tool_names[cur_tool] %}
    {% set new_tool_name = p.toolchanger.tool_names[new_tool] %}
    {% set cur_key = 'offsets_' ~ cur_tool_name|replace('tool ', '')|lower %}
    {% set new_key = 'offsets_' ~ new_tool_name|replace('tool ', '')|lower %}
    {% set svf = p.save_variables.variables %}
    {% set old_offsets = svf[cur_key]|default({'x':0.0, 'y':0.0, 'z':0.0}) %}
    {% set new_offsets = svf[new_key]|default({'x':0.0, 'y':0.0, 'z':0.0}) %}
    # --------------------------------------------------------------
    # Calculate and show all our positions.
    # --------------------------------------------------------------
    {% set tx_start_pos = {"X": p.toolhead.position[0]|float|round(3), "Y": p.toolhead.position[1]|float|round(3), "Z": p.toolhead.position[2]|float|round(3)} %}
    {% set gcode_pos = {"X": (tx_start_pos.X - old_offsets['x'])|round(3), "Y": (tx_start_pos.Y - old_offsets['y'])|round(3), "Z": (tx_start_pos.Z - old_offsets['z'])|round(3)} %}

    {% set overwrite = p["gcode_macro TX"].overwrite_next_restore_position %}
    {% set tx_stop_pos = dict() %}
    {% if overwrite and ('X' in overwrite) %}{% set _ = tx_stop_pos.update({'X': overwrite.X|float}) %}
    {% else %}{% set _ = tx_stop_pos.update({'X': (gcode_pos.X + new_offsets['x'])|round(3)}) %}{% endif %}
    {% if overwrite and ('Y' in overwrite) %}{% set _ = tx_stop_pos.update({'Y': overwrite.Y|float}) %}
    {% else %}{% set _ = tx_stop_pos.update({'Y': (gcode_pos.Y + new_offsets['y'])|round(3)}) %}{% endif %}
    {% if overwrite and ('Z' in overwrite) %}{% set _ = tx_stop_pos.update({'Z': overwrite.Z|float}) %}
    {% else %}{% set _ = tx_stop_pos.update({'Z': (gcode_pos.Z + new_offsets['z'])|round(3)}) %}{% endif %}

    {% set debug_msg = macro_html %}
    {% set debug_msg = debug_msg ~ "?t?s6?mSwitching from " ~ cur_tool_name ~ " → " ~ new_tool_name %}
    {% set debug_msg = debug_msg ~ "?t?s6?mOld offsets: " ~ old_offsets ~ ", New offsets: " ~ new_offsets ~ ", Global Z: " ~ global_z_offset %}
    {% set debug_msg = debug_msg ~ "?t?s6?mGCODE-OLD POS: X=" ~ tx_start_pos.X ~ ", Y=" ~ tx_start_pos.Y ~ ", Z=" ~ tx_start_pos.Z %}
    {% set debug_msg = debug_msg ~ "?t?s6?mABSOLUTE POS: X=" ~ gcode_pos.X ~ ", Y=" ~ gcode_pos.Y ~ ", Z=" ~ gcode_pos.Z %}
    {% set debug_msg = debug_msg ~ "?t?s6?mGCODE-NEW POS: X=" ~ tx_stop_pos.X ~ ", Y=" ~ tx_stop_pos.Y ~ ", Z=" ~ tx_stop_pos.Z %}

    _UNIFIED_RESPOND MSG="{debug_msg}"
  {% endif %}





#{% if params.SILENT is not defined and macro_html != msg %}
#  {% if 'gcode_macro _UNIFIED_RESPONDrzrtz' in printer %}
#    _UNIFIED_RESPOND MSG="{msg}"
#  {% else %}
#    RESPOND {% if ('?s0' or '?s1') in msg %} TYPE='echo' {% else %} TYPE='error' {% endif %} MSG="{((msg|replace('?n','<br>')|replace('?m','<br>')|replace('?p','CUT_HERE')|replace('?t','<br>')|replace('?s0','')|replace('?s1','')|replace('?s2','!?')|replace('?s3','!')|replace('?s4','!!')|replace('?s5','!!!')|replace('?b',' !')|replace('?c',' *')).split('CUT_HERE'))[-1]}"
#  {% endif %}
#{% endif %}


#
# Main responses used by our macros
# feel free to change colors, behaviour
# and or font size, code highlighting etc
#
[gcode_macro _UNIFIED_RESPOND]
description: "[?s(0-6)] status 0 success, 4 full error [?t] title, [?p] pre (macro), [?t] title line, [?m] message, [?n] newline, [?c] code toggle"
variable_message_colors: ["rgb(252, 16, 163)", "rgb(255, 64, 129)", "rgb(255, 160, 0)", "rgb(255, 160, 0)", "rgb(244, 67, 54)", "rgb(158, 158, 158)", "rgb(71, 71, 71)"]
variable_macro_colors:  ["rgb(8, 131, 248)",  "rgb(255, 160, 0)",  "rgb(255, 145, 0)",  "rgb(244, 67, 54)",  "rgb(244, 67, 54)",  "rgb(33, 150, 243)", "rgb(128, 128, 128)"]
#─────────────────────────────────────────────────────────────────────────────────────
# Reds / Pinks             Oranges / Yellows         Greens / Lime
#rgb(244, 67, 54)         rgb(255, 152, 0)        rgb(76, 175, 80)
#rgb(233, 30, 99)         rgb(255, 193, 7)        rgb(139, 195, 74)
#rgb(255, 64, 129)        rgb(255, 235, 59)       rgb(0, 200, 83)
## Cyan / Teal              Blues / Indigos           Purples / Violets
#rgb(0, 188, 212)         rgb(3, 169, 244)        rgb(156, 39, 176)
#rgb(0, 150, 136)         rgb(33, 150, 243)       rgb(103, 58, 183)
#rgb(0, 172, 193)         rgb(63, 81, 181)        rgb(123, 31, 162)
## Browns / Neutrals        Greys / Silvers           Black / White / Contrast
#rgb(121, 85, 72)         rgb(158, 158, 158)      rgb(0, 0, 0)
#rgb(205, 220, 57)        rgb(224, 224, 224)      rgb(255, 255, 255)
#rgb(255, 87, 34)         rgb(96, 125, 139)       rgb(255, 64, 129)
#─────────────────────────────────────────────────────────────────────────────────────
# --- cyberpunk ish colors
# pink rgb(252, 16, 163)      cyan rgb(8, 131, 248)           white rgb(250, 238, 250) 
# dark blue rgb(1, 35, 70)    dark blue 2 rgb(29, 32, 73)     yellow rgb(251, 226, 1)
# ─────────── pre-defined blocks ───────────────────────────────────────────────────────
variable_c_start : "<code style='font-size:14px;color:rgb(251,226,1);background:rgb(29,32,73);font-family:monospace;font-weight:bold;line-height:1.5;padding:2px 6px;margin:0 4px;display:inline-block;border-radius:4px;'>"
variable_c_close : "</code>"
variable_b_start : "<b>"
variable_b_close : "</b>"
variable_cmd_start : "<a class='command' style='color:rgb(255,255,0);'>"
variable_cmd_close: "</a>"
# ───────────────────────────────────────────────────────────────────────────────────────
# working message would be ?t  ?p  ?t  ?s3  ?m  ?t (?c ?b ?b ?c... ?n) ?s1 ?t ?m....

# ?t  ?p | pre with tooltip
# ?t  ?s3  ?m  ?t (?c ?b ?b ?c... ?n) | message with status code 3, with tooltip with code block with bold block and ending with a newline.
# ?t | tooltip
# ?m | message
# ?sN | (N being number 0-6) status color
# ?n | newline

# --- the below only works inside messages or prefixes.

# ?b | bold text start 
# ?b | bold text end

# ?b | code text start 
# ?b | code text end
#─────────────────────────────────────────────────────────────────────────────────────
gcode:
   #------------------------------------------------------------------------
   # 1.  Setup
   #------------------------------------------------------------------------
  {% set self = printer['gcode_macro _UNIFIED_RESPOND'] %}
  {% set raw = params.MSG|default("")|string %}
  {% set nl  = "\u0026\u0023\u0031\u0030\u003b" %}
  {% set msg = raw.replace("?n", "$nl$") %}
  {% set parts = msg.split("?") %}

  {% set wrapper_tags = ['cmd','c','b'] %}
  {% set ns = namespace(
        wrappers        = {},
        global_color    = 0,
        prefix          = "",  
        prefix_t        = "",
        cur_t           = "",  
        cur_msg         = "",  
        cur_msg_c       = 0,
        next_msg_c      = None,
        lines           = [],
        s0_msg_html     = "",
        ddd             = false)
  %}

  # Build wrapper table ───────────────────────────────────────────────────
  {% for w in wrapper_tags %}
    {% set _ = ns.wrappers.update({w: {'open': self[w ~ '_start'], 'close': self[w ~ '_close'], 'state': false} }) %}
  {% endfor %}


  # Parse the message, piece by piece
  {% for part in parts %}
    {% if part %}
      {% set detect = namespace(tag="", body=part) %}
      {% for w in wrapper_tags %}
          {% set detect.tag = w if part.startswith(w) and w|length > detect.tag|length else detect.tag %}
      {% endfor %}

      {% if detect.tag != "" %}
        {% set detect.body = part[detect.tag|length:] %}
      {% else %}
        {% set detect.tag  = part[0] %}
        {% set detect.body = part[1:] %}
      {% endif %}

      {% set content = detect.body|replace('&','&amp;')|replace('<','&lt;')|replace('>','&gt;')|replace("'",'&apos;')|replace('"','&quot;') %}
      #─────────────────────────────────────────────────────────────────
      {% if detect.tag == 's' %}
        {% set color = content|int %}
        {% set ns.global_color = color if color > ns.global_color else ns.global_color %}
        {% set ns.next_msg_c = color %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 'p' %} # if ?p is hit, take the current title and use it for pre title.
        {% set ns.prefix   = content %}
        {% set ns.prefix_t = ns.cur_t %}
        {% set ns.cur_t    = "" %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 't' %} # another title tag starts a new message, to make newlines in titles use ?n
        {% if ns.cur_msg %}
          {% set _ = ns.lines.append((ns.cur_t, ns.cur_msg, ns.cur_msg_c)) %}
          {% set ns.cur_msg = "" %}
        {% endif %}
        {% set ns.cur_t     = content %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 'm' %} # Message seperation with newline
        {% set ns.cur_msg_c  = ns.next_msg_c if ns.next_msg_c is not none else ns.global_color %}
        {% set ns.next_msg_c = None %}
        {% set ns.cur_msg = ns.cur_msg ~ (nl if ns.cur_msg else "") ~ content %}
        
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag in ns.wrappers %}
        {% set wentry = ns.wrappers[detect.tag] %}
        {% set snippet = (wentry.close if wentry.state else wentry.open) %}
        {% set ns.cur_msg = ns.cur_msg ~ snippet ~ content %}
        {% set _ = ns.wrappers.update({detect.tag:{'open':wentry.open, 'close':wentry.close, 'state': not wentry.state}}) %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 'r' %}
        {% if ns.cur_msg %}
          {% set ns.cur_msg = ns.cur_msg ~ detect.body %}
        {% else %}
          {% set _ = ns.lines.append(('RAW', detect.body, -1)) %}
        {% endif %}
      #─────────────────────────────────────────────────────────────────
      {% elif part.startswith('ddd') %} # detect ddd tag (disable drop down) ddd tag must be last! everything after is discarded
        {% set ns.ddd = true %}
      #─────────────────────────────────────────────────────────────────
      {% else %} # just merge again if no tag detected
        {% if ns.cur_msg %}
          {% set ns.cur_msg = ns.cur_msg ~ '?' ~ part %}
        {% elif ns.cur_t %}
          {% set ns.cur_t   = ns.cur_t   ~ '?' ~ part %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% for wentry in ns.wrappers.values() %}# Close left open wrappers
      {% set ns.cur_msg = ns.cur_msg ~ wentry.close if wentry.state else ns.cur_msg %}
  {% endfor %}


  {% if ns.cur_msg or ns.cur_t %} # Close last message
    {% set _ = ns.lines.append((ns.cur_t, ns.cur_msg, ns.cur_msg_c)) %}
  {% endif %}

  {% set c_prefix = macro_colors[ns.global_color] %} # Pre uses biggest status number color 
  {% set prefix_html = "<span style='color:" ~ c_prefix ~ ";font-weight:bold;' title='" ~ ns.prefix_t ~ "'>" ~ ns.prefix ~ "</span>" %}

  {% set lines_html = [] %}
  {% for t,txt,clr in ns.lines %}
    {% if t == 'RAW' %}
      {% set _ = lines_html.append(txt) %}
    {% else %} # Make messages using their respective colors
      {% set c_msg = message_colors[clr] %}
      {% set line  = "<span style='color:" ~ c_msg ~ ";' title='" ~ t ~ "'>" ~ txt ~ "</span>" %}
      {% if ns.s0_msg_html == "" and clr == 0 and not ns.ddd %} # if its our first s0 message encountered
        {% set ns.s0_msg_html = line %}
      {% else %}
        {% set _ = lines_html.append(line) %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% if ns.lines|length > 1 and not ns.ddd %} # display the result, if ddd display all without summary, if not, show first s0, with rest in summary.
    {% set final = ("<details><summary>" ~ prefix_html ~ ns.s0_msg_html ~ "</summary>" ~ (lines_html|join(nl))).replace("$nl$", nl) ~ "</details>" %}
  {% else %}
    {% set final = (prefix_html ~ ([ns.s0_msg_html] + lines_html)|join(nl)).replace("$nl$", nl) %}
  {% endif %}

  RESPOND MSG="{final}"


#################################################################################################################
# _DEBUG_RESPOND ################################################################################################
#################################################################################################################
[gcode_macro _DEBUG_RESPOND]
variable_first_run: 1
description:"[MSG=](message) will respond if debug is enabled."
variable_color:"secondary"
gcode:
	{% if printer['gcode_macro _toolchanger_settings'].debug_messages|default(true) %}
		{% set raw = params.MSG %}
		{% set parts = raw.split('$') %}
		{% if parts|length >= 3 %}
			{% set prefix = '$' ~ parts[1] ~ '$' %}
			{% set msg = raw.split(prefix, 1)[1].lstrip() %}
            {% set msg = msg[2:] %}
		{% else %}
			{% set pipe_index = raw.find('|') %}
			{% if pipe_index != -1 %}
				{% set prefix = raw[:pipe_index].rstrip() %}
			    {% set msg = raw[pipe_index:].lstrip() %}
		    {% else %}
			    {% set prefix = "?WHOCALLED?" %}
			    {% set msg = raw %}
            {% endif %}
		{% endif %}
        {% set msg = msg|replace("'", "&apos;") %}
        RESPOND MSG="<span style='cursor:pointer; color:rgba(79, 79, 79, 0.6);' title='{prefix}'>{msg}</span>"
	{% endif %}
	{% if printer['gcode_macro _toolchanger_settings'].debug_messages is not defined and first_run == 1 %}
			EXTENDED_RESPOND MSG="please define 'variable_debug_messages' inside [_toolchanger_settings] either as true or false." COLOR={"error"}
            SET_GCODE_VARIABLE MACRO=_DEBUG_RESPOND VARIABLE=first_run VALUE=0
	{% endif %}


#################################################################################################################
# _WARNING_RESPOND ##############################################################################################
#################################################################################################################
[gcode_macro _WARNING_RESPOND]
variable_first_run: 1
description:"[MSG=](message) will respond if warnings are enabled. (formatting is $caller name$ | warning message)"
variable_color: "secondary"
variable_warning_color: "warning"
gcode:
	{% if printer['gcode_macro _toolchanger_settings'].warning_messages|default(true) %}
		{% set raw = params.MSG %}
		{% set parts = raw.split('$') %}
		{% if parts|length >= 3 %}
			{% set prefix = '$' ~ parts[1] ~ '$' %}
			{% set msg = raw.split(prefix, 1)[1].lstrip() %}
		{% else %}
			{% set pipe_index = raw.find('|') %}
			{% if pipe_index != -1 %}
				{% set prefix = raw[:pipe_index].rstrip() %}
			    {% set msg = raw[pipe_index:].lstrip() %}
		    {% else %}
			    {% set prefix = "?WARNING?" %}
			    {% set msg = raw %}
            {% endif %}
		{% endif %}
		EXTENDED_RESPOND PREFIX="{prefix|string}" PREFIX_COLOR="{warning_color|string}" MSG="{msg|string}" COLOR="{color|string}"
	{% endif %}
	{% if printer['gcode_macro _toolchanger_settings'].warning_messages is not defined  and first_run == 1 %}
			EXTENDED_RESPOND MSG="please define 'variable_warning_messages' inside [_toolchanger_settings] either as true or false." COLOR={"error"}
            SET_GCODE_VARIABLE MACRO=_WARNING_RESPOND VARIABLE=first_run VALUE=0
	{% endif %}


#################################################################################################################
# _WARNING_RESPOND ##############################################################################################
#################################################################################################################
[gcode_macro _VALID_RESPOND]
variable_first_run: 1
description:"[MSG=](message) will respond if warnings are enabled. (formatting is $caller name$ | warning message)"
variable_color: "secondary"
variable_valid_color: "success"
gcode:
	{% if printer['gcode_macro _toolchanger_settings'].valid_messages|default(true) %}
		{% set raw = params.MSG %}
		{% set parts = raw.split('$') %}
		{% if parts|length >= 3 %}
			{% set prefix = '$' ~ parts[1] ~ '$' %}
			{% set msg = raw.split(prefix, 1)[1].lstrip() %}
		{% else %}
			{% set pipe_index = raw.find('|') %}
			{% if pipe_index != -1 %}
				{% set prefix = raw[:pipe_index].rstrip() %}
			    {% set msg = raw[pipe_index:].lstrip() %}
		    {% else %}
			    {% set prefix = "?VALID?" %}
			    {% set msg = raw %}
            {% endif %}
		{% endif %}
		EXTENDED_RESPOND PREFIX="{prefix|string}" PREFIX_COLOR="{valid_color|string}" MSG="{msg|string}" COLOR="{color|string}"
	{% endif %}
	{% if printer['gcode_macro _toolchanger_settings'].valid_messages is not defined and first_run == 1 %}
			EXTENDED_RESPOND MSG="please define 'variable_valid_messages' inside [_toolchanger_settings] either as true or false." COLOR={"error"}
            SET_GCODE_VARIABLE MACRO=_VALID_RESPOND VARIABLE=first_run VALUE=0
	{% endif %}


#################################################################################################################
# EXTENDED_RESPOND ##############################################################################################
#################################################################################################################
[gcode_macro EXTENDED_RESPOND]
description:"[PREFIX=] PREFIX_COLOR=] [MSG=] [COLOR=] (prefix, prefix color, message, message color)"
gcode:
  {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

  {% if params.TYPE is defined and params.MSG is defined %} # if TYPE and MSG are defined, just use the default RESPOND
      {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}
          {% set type = 'TYPE=' + params.TYPE|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'echo_no_space', 'command' or 'error'"
      {% endif %}
  {% endif %}

  {% set color = "DEFAULT" %} # default garbage value
  
  {% if params.MSG is defined and params.COLOR is defined %}
  
      {% set color = params.COLOR|lower %}

      {% if color in colors %} # valid color supplied
          {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %} # apply color to main message body
      {% else %}
          RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}

  {% elif params.MSG is defined %} # no color, but yes message
      {% set msg = 'MSG="'+ params.MSG + '"'|string %}
  {% endif %}

  {% if params.PREFIX is defined and params.PREFIX_COLOR is defined %} # check if a separate color was supplied for the prefix - otherwise, fall back on the default one
  
      {% set prefixColor = params.PREFIX_COLOR | default("DEFAULT") | lower %}
  
      {% if prefixColor in colors %} # valid prefix color supplied
          {% set prefix = 'PREFIX="<span class=' + prefixColor + '--text>' + params.PREFIX + '</span>"'|string %}
      {% elif color in color %} # prefix color is invalid - fall back on overall value if possible
          {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND PREFIX_COLOR '{prefixColor}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}
      
  {% elif params.PREFIX is defined and color in colors %} # no provided prefix color - use the same color for the prefix as is used for the main message body if possible
      {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
  {% elif params.PREFIX is defined %} # no valid colors provided either for the prefix or overall but we DO have a prefix- leave it default
      {% set prefix = 'PREFIX="' + params.PREFIX + '"'|string %}
  {% else %} # no prefix provided - don't use one!
      {% set prefix = "" | string %}
  {% endif %}
  
  RESPOND {type} {prefix} {msg}


