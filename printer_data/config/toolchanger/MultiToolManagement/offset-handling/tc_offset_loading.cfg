#
# This file is dedicated to loading your tool offsets from a save variables file.
# if you have them somewhere else, replace this to load them appropriately
#
#################################################################################################################
# TC_LOAD_OFFSETS ######################################################################################
#################################################################################################################
[gcode_macro TC_LOAD_OFFSETS]
variable_macro_html: "?tLoads offsets from [save_variables], may try to fall back to tool.gcode_?_offset.?nClamps each axis to ±max_off ($mo$).?nProvide tool number as first param. Will use active tool if not provided.?pTC_LOAD_OFFSETS "
description: "Loads offsets from save_variables. Clamps each axis to ±max_off. provide tool as first param, will use active if possible if not provided."
gcode:
    {% set p = printer %}
    {% set tcs = p['gcode_macro _toolchanger_settings'] %}
    {% set msg = macro_html|replace('$mo$', tcs.get('max_allowed_offsets', 'None')|string) %}
    {% set global_z_offset = p['gcode_macro TX'].global_z_offset|default(0)|float|round(3) %}
    {% set svf = p.save_variables.variables %}
    {% set actn = p.tool_probe_endstop.active_tool_number|int %} 
    {% set ns = namespace(tn="") %}
    {% set raw = [] %}
    {% set offsets = "" %}

    {% macro clamp(val) %}
        {% set limit = tcs.get('svf', {}).get('max_offs', 999)|float %}
        { (-limit if val|float < -limit else (limit if val|float > limit else val|float)) | round(3) }
    {% endmacro %}
    # -----------------------------------------------------
    # Get toolnumber from first parameter
    # -----------------------------------------------------
    {% if rawparams %} {% for c in rawparams.split()[0] %} {% set ns.tn = ns.tn ~ c if "0" <= c <= "9" else ns.tn %} {% endfor %} # {% set n = ''.join
        {% if ns.tn|length > 0 %} {% set tool_name = p.toolchanger.tool_names[ns.tn|int] if ns.tn|int <= p.toolchanger.tool_names|length %} # if parameter provided
        {% else %} {% set msg = msg ~ "?s4?mFirst parameter provided but did not contain a ?ctoolnumber?c" %} {% endif %} {% endif %}
    {% if actn != -1 and ns.tn|length == 0 %} {% set tool_name = p.toolchanger.tool_names[actn] %} {% endif %} # else if active tool => active tool
    # -----------------------------------------------------
    # get the offsets
    # -----------------------------------------------------
    {% if tool_name %} # 
        {% set t = p[tool_name] %}
        {% set svf_key = 'offsets_' ~ tool_name|replace('tool ', '', 1)|lower %}
        {% if svf_key in svf %}
            {% set offsets = svf.get(svf_key, {}) %}
            {% set msg = msg ~ "?s0?tX: " ~ offsets.x ~ " | Y: " ~ offsets.y ~ " | Z: " ~ offsets.z ~ " | Global-Z: " ~ global_z_offset ~ "?mSet offsets for?c" ~ tool_name ~ "?c from the ?csvf?c" %}
        # ------------------------------------------------------
        # fall back to tools gcode offsets if svf makes issues.
        # ------------------------------------------------------
        {% elif (t.gcode_x_offset != 0.0 or t.gcode_y_offset != 0.0 or t.gcode_z_offset != 0.0) and svf_key not in svf %}
            {% set offsets = {"x": t.gcode_x_offset|float,"y": t.gcode_y_offset|float,"z": t.gcode_z_offset|float} %}
            {% set msg = msg ~ "?s1?tX: " ~ offsets.x ~ " | Y: " ~ offsets.y ~ " | Z: " ~ offsets.z ~ " | Global-Z: " ~ global_z_offset ~ "?mFallback tool offsets for " ~ tool_name ~ " used!" %}
        {% endif %}
        # check if we okay
        {% if 'x' not in offsets or 'y' not in offsets or 'z' not in offsets %}
            {% set msg = msg ~ "?s4?tRun _INIT_SVF_KEYS to create/repair the missing keys in your SVF?mNo offsets set! Missing the key for " ~ tool_name|replace('tool ', '', 1) ~ " in ?c[save_variables]?c or ?cgcode_?_offset?c fallbacks avalible" %}
        {% else %}
            # ------------------------------------------------------------
            # clamp the offsets if they are for some reason out of bounds.
            # ------------------------------------------------------------
            {% set clamped_x = clamp(offsets.x)|float %}
            {% set clamped_y = clamp(offsets.y)|float %}
            {% set clamped_z = clamp(offsets.z)|float %}
            {% if clamped_x != offsets.x|round(3) or clamped_y != offsets.y|round(3) or clamped_z != offsets.z|round(3) %}
                {% set msg = msg ~ "?s3?tX: " ~ clamped_x ~ " | Y: " ~ clamped_y ~ " | Z: " ~ clamped_z ~ "?mYour offsets were clamped!" %}{% endif %}
            {% if "0" not in tool_name and clamped_x == 0 and clamped_y == 0 and clamped_z == 0 %}
                {% set msg = msg ~ "?s3?t(Offsets all zero for non-T0 tool)?mVerify your offsets! ?c(all 0)?c" %}{% endif %}
            # Apply the offsets now.
            SET_GCODE_OFFSET X={clamped_x} Y={clamped_y} Z={clamped_z - global_z_offset} MOVE=0
        {% endif %}
    {% else %}
      {% set msg = msg ~ "?s3?tFirst parameter provided should contain toolnumber, valid examples would be:?nABC=1?nTN=2?nT=T1?nTOOL='tool TX1'?nT=3?netc....?mFirst parameter missing ?ctoolnum?c and no ?cactive_tool?c" %}
    {% endif %}
    {% if params.SILENT is not defined %}
        _UNIFIED_RESPOND MSG="{msg}"
    {% endif %}

#####################################################################
#   _INIT_SVF_KEYS   # Initializes and or repairs all the keys we need.
#####################################################################
[gcode_macro _INIT_SVF_KEYS]
description: Ensure all required SVF keys exist (and remove invalid ones)
variable_macro_html: "?tInitializes, and or repairs the offsets keys saved in the save variables file.?p_INIT_SVF_KEYS "
gcode:
  {% set p = printer %}
  {% set svf = p.save_variables.variables %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set entries = namespace(to_check=[]) %}
  {% set missing  = [] %}
  {% set repaired = [] %}
  {% set removed  = [] %}
  {% set warnings = [] %}

  {% set drift_key   = p['gcode_macro _TC_ADJUST_TTBZ_DRIFT'].get('key_name', 'drift') %}
  {% set probe_keys  = ['x', 'y', 'z', 'ttbz', drift_key|string] if (tcs.get('ttbz_drift_autoadjust', {}) != {}) else ['x', 'y', 'z', 'ttbz'] %}
  {% set tool_keys   = ['x', 'y', 'z', 'probe'] if tcs.get('enable_probe_calibration', True) else ['x', 'y', 'z']  %}

  #————|  Build list of SVF entries to check
  {% set _ = entries.to_check.append({'entry_name':'probe_position','entry_keys':probe_keys}) %}
  {% for name in p.toolchanger.tool_names %}
    {% set _   = entries.to_check.append({'entry_name':'offsets_' ~ name|replace('tool ','')|lower,'entry_keys':tool_keys}) %}
  {% endfor %}

  #————|  If offset history is enabled, also add that to check
  {% if tcs.get('offset_history', {}) != {} %}
    {% set _ = entries.to_check.append({'entry_name':'offsets_history_probe','entry_keys':probe_keys,'list_values':True}) %}
    {% for name in p.toolchanger.tool_names %}
      {% set _   = entries.to_check.append({'entry_name':'offsets_history_' ~ name|replace('tool ','')|lower,'entry_keys':tool_keys,'list_values':True}) %}
    {% endfor %}
  {% endif %}
  
  #————|  Iterate every SVF entry
  {% for e in entries.to_check %}
    {% set dict_name = e.entry_name %}
    {% set allowed   = e.entry_keys %}
    {% set is_list   = e.get('list_values', False) %}
    {% set cur       = svf.get(dict_name, {}) %}
    {% if cur is not mapping %}{% set cur = {} %}{% endif %}
    {% set new       = cur.copy() %}

    #————| Add any missing entry_keys
    {% for k in allowed %}
      {% if k not in new %}
        {% if is_list %}
          {% set _ = new.update({k: []}) %}
        {% else %}
          {% set _ = new.update({k: 0.0}) %}
        {% endif %}
        {% set _ = missing.append(dict_name ~ '.' ~ k) %}
      {% endif %}
    {% endfor %}

    #————| Remove any extras
    {% for k in new.keys()|list %}
      {% if k not in allowed %}
        {% if tcs.get('svf_remove_invalid', True) %}{% set _ = new.pop(k) %}{% endif %}
        {% set _ = removed.append(dict_name ~ '.' ~ k) %}
      {% endif %}
    {% endfor %}

    #————| Ensure lists are lists.
    {% if is_list %}
      {% for k in allowed %}
        {% if new[k] is not sequence %}
          {% set _ = new.update({k: []}) %}
          {% set _ = repaired.append(dict_name ~ '.' ~ k ~ ' reset to list') %}
        {% endif %}
      {% endfor %}
    {% endif %}

    #————| Save back if changed
    {% if new != cur %}
      SAVE_VARIABLE VARIABLE={dict_name} VALUE="{new}"
      #{% set _ = repaired.append(dict_name) %}
    {% endif %}

    #————| Warn if this is the first tool and any axis != 0
    {% if dict_name == 'offsets_' ~ p.toolchanger.tool_names[0]|replace('tool ','')|lower and
          (new.x|default(0)|float != 0 or new.y|default(0)|float != 0 or new.z|default(0)|float != 0) %}
      {% set _ = warnings.append('Tool 0 offsets should always be (0,0,0)!') %}
    {% endif %}
  {% endfor %}

  #————|  Final console report
  {% if missing|length !=0 or removed|length!=0 or repaired|length!=0 or warnings|length!=0 %}
    {% set out = [] %}
    {% set _ = out.append("?s0?t?mUpdated your ?bsave variables file?b") %}
    {% if repaired %} {% set _ = out.append("?s2?t?m?cRepaired the following dicts:?c?n  -> " ~ repaired|join("?n  -> ")) %}{% endif %}
    {% if missing %}  {% set _ = out.append("?s0?t?m?cAdded the missing keys:?c?n  -> " ~ missing|join("?n  -> ")) %}{% endif %}
    {% if removed %}  {% set _ = out.append("?s4?t?m?cRemoved:?c?n  -> " ~ removed|join("?n  -> ")) %}{% endif %}
    {% if warnings %} {% set _ = out.append("?s4?t?m?cWarning: ?c" ~ warnings|join("?n  -> ")) %}{% endif %}
    _UNIFIED_RESPOND MSG="{macro_html ~ out|join('')}"
  {% endif %}







