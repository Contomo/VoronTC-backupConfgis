[force_move]

#SET_KINEMATIC_POSITION [X=<value>] [Y=<value>] [Z=<value>] [SET_HOMED=<[X][Y][Z]>] [CLEAR_HOMED=<[X][Y][Z]>]


# sensorless config is the following:
# if you enable sensorless, will automatically use the sensorless homing for that axis above. (if the current is uncommented!)
# define "sensorless_current_?" with the current you want to run with, if not defined, runs with default.
[gcode_macro _SENSORLESS]
gcode: # EDIT THIS IF YOURE USING SENSORLESS AND HAVE CUSTOM SETTINGS
    {% import homing_helper as hh with context %}
    {% set home_settings = printer['gcode_macro _toolchanger_settings'].get('homing', {}) %}
    {% set home = params.HOME|default('')|lower %}

    {% for ax in ['y', 'x'] if ax in home %}
        {hh.set_axis_current(ax, home_settings.get('sensorless_current_' ~ ax))}
        {hh.force_G0(ax|upper ~ '-2')}
        M400
        G4 P50 # ---< wait so you dont trigger the sensorless on accident
        G28 {ax|upper}
        {hh.set_axis_current(ax)}
    {% else %}
        {action_respond_info("missing HOME=<axis>")}
    {% endfor %}

[homing_override]
axes: xyz
gcode:
    {% import homing_helper      as hh        with context %}
    {% import toolchanger_helper as tc_helper with context %}

    {% set p             = printer %}
    {% set cfg, th, tc   = p.configfile.settings, p.toolhead, p.toolchanger %}
    {% set tcs           = p['gcode_macro _toolchanger_settings'] %}
    {% set home_settings = tcs.get('homing', {}) %}
    {% set rand, safe_z  = home_settings.get('z_home_xy_random', 0), home_settings.get('xy_move_safe_z_height', 10) %}
    {% set xy_retract    = home_settings.get('xy_home_retract_distance', 0)|float %}
    
    {% set max_x, max_y  = cfg.stepper_x.position_max, cfg.stepper_y.position_max %}
    {% set center_x      = (max_x / 2) + (range(rand * -10, rand * 10)|random / 10.0) %}
    {% set center_y      = (max_y / 2) + (range(rand * -10, rand * 10)|random / 10.0) %}

    {% set accel_div  = tcs.get('macro_accel_divider') %}
    {% set accel_z       = tc_helper.divide_vel(accel_divide=accel_div * 4) if accel_div else '' %}
    {% set accel_xy      = tc_helper.divide_vel(accel_divide=accel_div)     if accel_div else '' %}

    {% set axes_to_home  = 'xyz' if not rawparams else (rawparams|lower) %}

    {tc_helper.check_tc_status()}
    {tc_helper.check_tn_actn()}
    STOP_TOOL_PROBE_CRASH_DETECTION
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G90
    
    #── safely move away from docks if are close ────────────────────────────────────
    {% if th.homed_axes and hh.get_distance_to_docks(th.position)|float < 150  %}
        {accel_z}
        G0 Z{5 + th.position.z}
        {accel_xy}
        G0 Y{[tc.params_safe_y, th.position.y]|max} F{tc.params_fast_speed}
    {% endif %}

    {% if 'z' not in th.homed_axes %}
        # ---< home Z
        G28 Z
        G0 Z{safe_z}
    {% else %}
        # ---< or come down from whereever we are
        {accel_z}
        G0 Z{safe_z}
    {% endif %}

    #── home Y if requested, sensorless or normal ────────────────────────────────────
    {% if 'y' in axes_to_home %}
        {% if hh.axis_is_sensorless('y') and home_settings.get('sensorless_current_y') %}
            _SENSORLESS HOME=Y
        {% else %}
            {accel_xy}
            G28 Y
        {% endif %}
        M400
        G0 Y{max_y - xy_retract} F{tc.params_fast_speed}
    {% endif %}

    #── home X if requested, sensorless or normal ────────────────────────────────────
    {% if 'x' in axes_to_home %}
        {% if hh.axis_is_sensorless('x') and home_settings.get('sensorless_current_x') %}
            _SENSORLESS HOME=X
        {% else %}
            {accel_xy}
            G28 X
        {% endif %}
        M400
        G0 X{max_x - xy_retract} F{tc.params_fast_speed}
    {% endif %}

    #── Home Z axis in the middle of the bed ────────────────────────────────────
    {% if 'z' in axes_to_home %}
        G0 X{max_x - 0.05} Y{max_y - 0.05} # rounded path will shit itself cause rounding errors if you dont
        ROUNDED_G0 X={center_x} F={tc.params_fast_speed} D={cfg.stepper_x.position_max/4}
        ROUNDED_G0 Y={center_y} F={tc.params_fast_speed} D=0
        G28 Z
        _TC_ADJUST_HOME_OFFSET
    {% endif %}
    
    {tc_helper.restore_vel()}
    
    TC_LOAD_OFFSETS
    


[gcode_macro G32]
gcode:
    {% from toolchanger_helper import check_ok with context %}
    {check_ok()}
    
    QUAD_GANTRY_LEVEL
    MOVE_TO_CENTER
    G28

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: "Fine/Coarse."
variable_fine_move: 0.5 # <- set your preferred probing height here!
gcode:
    {% from toolchanger_helper import check_ok, try_divide_accel, restore_vel with context %}
    {% set act_z = printer.tool_probe_endstop.active_tool_probe_z_offset %}
    {check_ok()}

    {% if rawparams %}
        _QUAD_GANTRY_LEVEL {rawparams}
    {% elif not printer.quad_gantry_level.applied %}
        {try_divide_accel()}
        _QUAD_GANTRY_LEVEL RETRY_TOLERANCE={fine_move} # get within range so that fine doesnt scrape
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z={fine_move - act_z}  # doesnt respect our probe offset.....
        {restore_vel()}
        MOVE_TO_CENTER 
    {% else %}
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z={fine_move - act_z}
    {% endif %}




# BED_MESH_CALIBRATE PROFILE=<name> METHOD=[manual | automatic | scan | rapid_scan]
# [<probe_parameter>=<value>] [<mesh_parameter>=<value>] [ADAPTIVE=[0|1] [ADAPTIVE_MARGIN=<value>]

# BED_MESH_CLEAR
# BED_MESH_PROFILE SAVE=<name> LOAD=<name> REMOVE=<name>
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% import toolchanger_helper as tc with context %}
    {tc.check_ok()}
    {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    
    {% set tool_z = printer[printer.toolchanger.tool].gcode_z_offset %}
    {% set actp_z = printer.tool_probe_endstop.active_tool_probe_z_offset %}

    {tc.try_divide_accel()}
    
    #G90
    #G0 Z10 F1000
    #M400
    #SET_KINEMATIC_POSITION Z={10.0-tool_z|float}
    _BED_MESH_CALIBRATE {rawparams}
    {% if printer.print_stats.state|lower != "printing" %}
        MOVE_TO_CENTER Z=10
    {% endif %}
    #G0 Z10 F1000
    #SET_KINEMATIC_POSITION Z={10.0+tool_z|float}
    {tc.restore_vel()}





[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET_ORIGINAL
description: "highjacked version (_SET_GCODE_OFFSET_ORIGINAL is the original), when called with z-adjust will 'babystep' it all!"
gcode:
    {% if 'Z_ADJUST' in params %}

        {% import toolchanger_helper as tc with context %}

        {% if 'xyz' in printer.toolhead.homed_axes|lower %}
            #───< move by that amount
            SAVE_GCODE_STATE NAME=TC_ADJUST_Z_ALL
            G91
            G0 Z{params.Z_ADJUST} #───< move by amount, gaslight printer into believing we didnt.
            SET_KINEMATIC_POSITION Z={printer.toolhead.position[2]}
            RESTORE_GCODE_STATE NAME=TC_ADJUST_Z_ALL
        {% endif %}

        #───< update every probe with our new offsets 
        {% for tname in printer.toolchanger.tool_names %}
            {% set key = 'offsets_' ~ tname|lower|replace('tool ', '') ~ '.probe'%}
            {tc.svf_edit_value(key, params.Z_ADJUST)}
        {% endfor %}
        {tc.svf_edit_value('probe_position.trigger_to_bottom_z', -1.0 * (params.Z_ADJUST|float))}
    {% else %}
        _SET_GCODE_OFFSET_ORIGINAL {rawparams}
    {% endif %}


[gcode_macro TC_LOAD_OFFSETS]
description: "Loads offsets for a tool, syncing from [save_variables] if they differ. Usage: TC_LOAD_OFFSETS T=<tool_number>"
gcode:
    # ------------------ SETUP AND HELPER LOADING ------------------
    {% import toolchanger_helper as tc with context %}
    {% set tn = params.T|int if 'T' in params else tc.get_mounted_tn()|int %}

    # ------------------ MAIN LOGIC ------------------
    {% if tn != -1 %}
        {% set ns = namespace(needs_sync=False) %}
        {% set tool_name = printer.toolchanger.tool_names[tn] %}
        {% set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower %}
        {% set svf_offsets = printer.save_variables.variables.get(svf_key, {}) %}
        # --- Get Offsets from Both Sources
        {% set live_offsets = {
            'x': printer[tool_name].gcode_x_offset,
            'y': printer[tool_name].gcode_y_offset,
            'z': printer[tool_name].gcode_z_offset
        } %}
        # --- Compare and Sync if Necessary
        {% for axis in ['x', 'y', 'z'] if not ns.needs_sync %}
            {% set ns.needs_sync = (live_offsets[axis]|round(3)) != (svf_offsets.get(axis, 0)|float(0)|round(3)) %}
        {% endfor %}
        # --- If a sync is needed, use helper to update the live state
        {% if svf_offsets and ns.needs_sync %}
            {tc.update_tool_offsets_from_svf(tn)}
        {% endif %}
        SET_GCODE_OFFSET X={svf_offsets.get('x', 0)} Y={svf_offsets.get('y', 0)} Z={svf_offsets.get('z', 0)} MOVE=0
    {% else %}
        {tc._msg_error("TC_LOAD_OFFSETS: No tool specified via 'T=' and no tool is currently active.") }
    {% endif %}




[gcode_macro _TC_ADJUST_HOME_OFFSET]
description: Depending on the selected tool at the time of homing, the physical Z endstop position is offset. This corrects for that using current tool offset.
variable_macro_html: "?tCorrects for the missing gcode offset at the time of probing (homing z).?nDrives to Z10 and setting kinematic position to Z(10 + probe + z offset)?p_TC_ADJUST_HOME_OFFSET "
variable_height_to_adjust_at: 5 
gcode:
    # ── variables alias ─────────────────────
    {% set msg = macro_html %}
    {% set p = printer %}
    {% set max_offset = p['gcode_macro _toolchanger_settings'].get('svf', {}).get('max_offs', 999) * 2 %}

    {% set tc, tpes = p.toolchanger, p.tool_probe_endstop %}
    {% set actn, probe_offset = tpes.active_tool_number|int, tpes.active_tool_probe_z_offset|float %}
    {% set tool = p[tc.tool_names[actn]] %}

    {% if actn != -1 %}
        {% if probe_offset == 0 %}
            {% set msg = msg ~ "?tProbe offset is 0. Defaulting to -1.4 as a safety measure.?s3?mProbe offset is ?c0?c!" %}
            {% set probe_offset = -1.400 %}
        {% endif %}
        # ── total calc + sanity check ───────────────────── 
        {% set total_offset = (tool.gcode_z_offset|float + probe_offset)|round(4) %}

        {% set msg = msg ~ "?s3?tgcode z offset for " ~ tool.name ~ " appears to be 0, although it is not T0.?mPlease verify your offsets!" if "0" not in tool.name and tool.gcode_z_offset == 0 else msg %}
        {% set msg = msg ~ "?s4?t?mCalculated total offset (" ~ total_offset ~ "mm) seems unusual. Please check tool offsets." if total_offset|abs > max_offset|abs else msg %}
        {% set msg = msg ~ "?t?s0?mHome shifted by: ?c" ~ total_offset ~ "mm?c" %}

        # ── offset application ───────────────────── 
        G90
        G0 Z{height_to_adjust_at} F1000
        M400
        SET_KINEMATIC_POSITION Z={height_to_adjust_at + total_offset}
        TC_LOAD_OFFSETS
    {% else %}
        {% set msg = msg ~ "?tNo tool found. Please reinitialize or detect active tool probe to fix this.?s4?mCouldnt adjust home, no active tool probe." %}
        SET_KINEMATIC_POSITION CLEAR_HOMED=XYZ
    {% endif %}
    _UNIFIED_RESPOND MSG="{msg}"




      








      