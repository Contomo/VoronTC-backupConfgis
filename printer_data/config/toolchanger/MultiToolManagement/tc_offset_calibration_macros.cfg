
[gcode_macro _MOVE_OVER_PROBE]
description: "Move tool head to probing position defined in [save_variables]."
variable_macro_html: "?tMoves 3mm above the saved probe position.?nThis value is saved in SVF as 'probe_position' or set using TC_FIND_FIRST_CALIBRATION_PROBE_POSITION.?p_MOVE_OVER_PROBE "
gcode:
    {% import toolchanger_helper as tc with context %}

    {% set p, cfg = printer, printer.configfile.settings %}
    {% set svf = p.save_variables.variables %}
    {% set feed = p.toolchanger.params_fast_speed  %} 
    {tc.check_tc_status()}
    {tc.check_tn_actn()}
    {tc.check_homed()}
    {% if 'probe_position' in svf and svf.probe_calibration.values()|select|list|length >= 3 %}
        G90
        {tc.divide_vel(accel_divide=p['gcode_macro _toolchanger_settings'].get('macro_accel_divider', 1)|float)}
        {% if p.toolhead.position[2] < svf.probe_position.z + 3 %} 
            ROUNDED_G0 Z={svf.probe_position.z + 8} D=10 F={feed/2}
        {% endif %}
        ROUNDED_G0 X={svf.probe_position.x}     D=100 F={feed}
        ROUNDED_G0 Y={svf.probe_position.y}     D=100 F={feed}
        ROUNDED_G0 Z={svf.probe_position.z + 2} D=0   F={feed/2}
    {% else %}
        _UNIFIED_RESPOND MSG={macro_html ~ "?s4?tMissing probe_position key?nCould not find probe coordinates in SVF.?mDefine 'probe_position' via TC_FIND_FIRST_CALIBRATION_PROBE_POSITION or SVF like: ?c{'x': 219.644, 'y': 4.43, 'z': 8.066}?c"}
    {% endif %}
    # ---< restore original accel/vel
    {tc.restore_vel()}

[gcode_macro TC_FIND_TOOL_OFFSETS]
description: "Calibrates the offsetts of the specified tool or tools. Usage: TC_FIND_TOOL_OFFSETS TOOL=x,x,x"
variable_macro_html: "?tCalibrates the offsets of the specified tool or tools.?nUsage: TC_FIND_TOOL_OFFSETS TOOL=n,n,n?pTC_FIND_TOOL_OFFSETS "
variable_saved_tool_temps: None
gcode:
    {% import toolchanger_helper as tc_helper with context %}

    {% set p, tc, tns = printer, printer.toolchanger, printer.toolchanger.tool_numbers %}
    # ---< settings
    {% set tcs              = p['gcode_macro _toolchanger_settings'] %}
    {% set clean_macro      = tcs.get('clean_nozzle_macro', {}).get('macro') %}
    {% set calib_settings   = tcs.get('offset_calibration', {}) %}
    {% set temp, save_delay = calib_settings.get('nozzle_temperature', 150), calib_settings.get('save_on_failure_delay', 0) %}

    # ---< startup checks
    {tc_helper.check_ok()}
    {tc_helper.check_tn_actn()}
    {tc_helper.save_tool_targets_to_variable('TC_FIND_TOOL_OFFSETS', 'saved_tool_temps')}

    # ---< get all requested tool numbers
    {% set tool_nums = params.T|default('1,2...') %}
    {% set requested_tools = tool_nums.split(',')|map('trim')|map('int')|select('in', tns)|list if 'T' in params else tns %}
    {% set tools_to_calibrate = ([0] + (requested_tools|reject('==', 0)|list|unique|sort))|list %}
    {tc_helper.respond_colored("Tools to calibrate: " ~ tools_to_calibrate, '[INFO]', 'info--text')}

    {% for tool_num in tools_to_adjust %}
        # ---< preheat the next in line
        {% if not loop.last %}
            M104 S{probe_temp} T{tools_to_calibrate[loop.index]}
        {% endif %}
        # ---< Clean nozzle
        {clean_macro|upper ~ ' T=' ~ tool_num if clean_macro else ''}
        M104 S{probe_temp} T{tool_num}
        # ---< select tool if clean nozzle didnt run/select it
        T{tool_num} 
        # ---< wait for temp
        M109 S{probe_temp} T{tool_num} MIN{probe_temp} MAX{probe_temp+50}
        # ---< do the probing
        UPDATE_DELAYED_GCODE ID=_SAVE_OFFSETS_ON_FAILURE DURATION={save_delay}
        TC_PROBE_CALIBRATION_PROBE 
        UPDATE_DELAYED_GCODE ID=_SAVE_OFFSETS_ON_FAILURE DURATION=0
        # ---< stage for saving
        _TC_UPDATE_OFFSETS T={tool_num} 
        M104 S{probe_temp - 80} T{tool_num} # cool
    {% endfor %}
    # ---< save all those values
    _TC_UPDATE_OFFSETS SAVE=1
    # ---< restore original tool to center if we arent printing, if we are just where we came from
    {% if p.idle_timeout.state|lower != "printing" or 'xyz' not in p.toolhead.homed_axes|lower %}
        MOVE_TO_CENTER T={tc.tool_number}
    {% else  %}
        T{tc.tool_number} X={p.toolhead.position['x']} Y={p.toolhead.position['y']} Z={p.toolhead.position['z']}
    {% endif %}
    # ---< restore all saved tool temps, may have been on, may have been off
    {tc_helper.restore_tool_targets_from_variable('TC_FIND_TOOL_OFFSETS', 'saved_tool_temps', 'M104')}

[gcode_macro _TC_UPDATE_OFFSETS]
description: "stage tool offsets for save. Usage: _TC_UPDATE_OFFSETS T=X [SAVE], stages the current 'tools_calibrate.last_result' to the toolnumber provided."
variable_macro_html: "?tStage tool offsets for save.?nUsage: _TC_UPDATE_OFFSETS T=X [SAVE]?nStages the current 'tools_calibrate.last_result' to the toolnumber provided?p_TC_UPDATE_OFFSETS "
variable_storage: {}
gcode:
    {% import toolchanger_helper as tc_helper with context %}
    #───< shorts
    {% set p          = printer %}
    {% set tc         = p.toolchanger %}
    {% set actn       = p.tool_probe_endstop.active_tool_number|int %}
    {% set svf        = p.save_variables.variables %}
    #───< get settings from settings macro
    {% set tcs        = p['gcode_macro _toolchanger_settings'] %}
    {% set ocs        = tcs.get('offset_calibration', {}) %}
    {% set svf_mode   = tcs.get('svf', {}).get('auto_repair', '') %}
    {% set r_svf      = ocs.get('value_rounding', 3)|int %}
    #───< respond stuff
    {% set msg        = macro_html %}
    {% set report     = [] %}
    #------------------------------------------------------------------------------------------------------------------
    #───< small helper macros with round
    {% macro rpad(v) -%}
        {(v|float|round(r_svf)|string).rjust(8)}
    {%- endmacro %}

    {% macro delta(a,b) %}
        {(a|default(-1)|float - b|default(-1)|float)|round(r_svf)}
    {%- endmacro %}

    {% macro update_xyz(dst, src) -%}
        {dst.update({'x': src['x']|round(r_svf),'y': src['y']|round(r_svf),'z': src['z']|round(r_svf)})}
    {%- endmacro %}

    {'_INIT_SVF_KEYS' if svf_mode in ['Always', 'Use'] else ''}

    {% if actn != -1 %}
        {% if 'SAVE' in params %}
        {% for tkey in storage %}
            #------------------------------------------------------------------------------------------------------------------
            {% set svf_key    = 'offsets_' ~ tkey %}
            {% set temp       = storage[tkey] %}
            {% set old        = svf.get(svf_key, {'x':0.0,'y':0.0,'z':0.0,'probe':0.0}) %}
            {% set new        = old.copy() %}
            {% set has_probe  = 'probe' in temp %}
            #───< treat T0 differently, as its key contains probe position.
            {% if tkey[-1] != '0' %}
            {% set _ = update_xyz(new, temp) %}
            {% else %}
            {% set old_pp = svf.get('probe_position', {}) %}
            {% set new_pp = old_pp.copy() %}
            {% set _ = update_xyz(new_pp, temp) %}
            SAVE_VARIABLE VARIABLE=probe_position VALUE="{new_pp}"
            {% set _ = old.update(old_pp) %}
            {% endif %}
            #───< at last, update probe result if we have one.
            {% if 'probe' in temp %}{% set _ = new.update({'probe': temp['probe']|round(r_svf)}) %}{% endif %}
            {tc_helper.svf_update(svf_key,  new)}
            {tc_helper.update_tool_probe_from_svf  (tkey[-1]|int)}
            {tc_helper.update_tool_offsets_from_svf(tkey[-1]|int)}
            #------------------------------------------------------------------------------------------------------------------
            #───< difference
            {% set diff = {'x':     delta(temp.x,     old.x)|float, 
                           'y':     delta(temp.y,     old.y)|float, 
                           'z':     delta(temp.z,     old.z)|float, 
                           'probe': delta(temp.probe, old.probe)|float #if not enabled will just be gibber but idgaf
                           } %}
            #───< after here just tooltips/formatting/message
            {% set tooltip =            "?tPos: X: " ~ temp.x ~ " Y: " ~ temp.y ~ " Z: " ~ temp.z ~ ('P:' ~ temp.probe if has_probe else '') %}
            {% set tooltip = tooltip ~  "?nDif: X: " ~ diff.x ~ " Y: " ~ diff.y ~ " Z: " ~ diff.z ~ ('P:' ~ diff.probe if has_probe else '') %}

            {% set disp = '?s0?m?b' ~ tkey|string|upper ~ '?b offsets.' %}
            {% set disp = disp ~  '?nAbs:  ?cX:' ~ rpad(temp.x) ~ '  Y:' ~ rpad(temp.y) ~ '  Z:' ~ rpad(temp.z) ~ (' P:' ~ rpad(temp.probe) if has_probe else '') ~ '?c' %}
            {% set disp = disp ~  '?nDiff: ?cX:' ~ rpad(diff.x) ~ '  Y:' ~ rpad(diff.y) ~ '  Z:' ~ rpad(diff.z) ~ (' P:' ~ rpad(diff.probe) if has_probe else '') ~ '?c' %}

            {% set _ = report.append(tooltip ~ disp) %}
            #───< rolling log prep
            _TC_LOG_OFFSET_HISTORY {'T=' ~ tkey ~ ' X=' ~ temp.x ~ ' Y=' ~ temp.y ~ ' Z=' ~ temp.z ~ ' SILENT=TRUE' ~ (' PROBE=' ~ temp.probe if has_probe else '')}
        {% endfor %}
        #───< reset the storage
        {% set msg = msg ~ '?s0?t?mSaved ?b' ~ storage|length|string ~ '?b tool offsets' ~ report|join() %}
        SET_GCODE_VARIABLE MACRO=_TC_UPDATE_OFFSETS VARIABLE=storage VALUE={{}}
        {% else %} 
        #------------------------------------------------------------------------------------------------------------------
        #───< Stage for saving 
        {% set p_enabled  = ocs.get('probe_calibration', False) %}
        {% set lr = p.tools_calibrate.last_result %}
        {% set lp = p.tools_calibrate.last_probe_offset %}

        #───< add our offset so later saves correct.
        {% set result = {'x': lr[0], 'y': lr[1], 'z': lr[2]} %}
        {% if p_enabled %}
            {% set _ = result.update({'probe': lp}) %}
        {% endif %}

        #───< get param
        {% set tn = params.T|default(params.TOOL|default(tc.tool))|int %}
        {% if tn in tc.tool_numbers %}
            {% set t_short = tc.tool_names[tn]|replace('tool ', '')|lower %}
            #───< Stage
            {% set _ = storage.update({t_short: result}) %}
            SET_GCODE_VARIABLE MACRO=_TC_UPDATE_OFFSETS VARIABLE=storage VALUE="{storage}"

            #───< report on it or say why didnt
            {% set msg = msg ~ '?s0?t val: ' ~ result ~ '?mStaged ' ~ t_short|upper ~ ' for save...' %}
        {% else %}
            {% set msg = msg ~ '?s3?t?mFirst parameter should contain a toolnumber (e.g. T=1, TN=2, TOOL="tool TX1")' %}
        {% endif %}
        {% endif %}
    {% else %}
        {% set msg = msg ~ "?s3?t?mNo active Tool, likely a crash. disabling for now." %}
    {% endif %}
    _UNIFIED_RESPOND MSG="{msg}"
    
[delayed_gcode _SAVE_OFFSETS_ON_FAILURE]
gcode:
  _UNIFIED_RESPOND MSG="?t?p_SAVE_OFFSETS_ON_FAILURE ?t?s3?m?bProbing failed early. Saving offsets.?b"
  _TC_UPDATE_OFFSETS SAVE=PROBABLY_IDK


[gcode_macro TC_PROBE_CALIBRATION_PROBE]
variable_macro_html: "?tCalls a macro to move over the calibration probe, and the correct internal command based on tool number selected.?nRefer to '_MOVE_OVER_PROBE' for more info?pTC_PROBE_CALIBRATION_PROBE"
gcode:
  {% set tpe = printer.tool_probe_endstop %}
  {% set tcs_oc = printer['gcode_macro _toolchanger_settings'].get('offset_calibration', {}) %}
  {% set pc = tcs_oc.get('probe_calibration', False) %} 
  {% set atn = tpe.active_tool_number|int %}
  {% set atp = tpe.active_tool_probe %}
  {% set cmd = 'TOOL_CALIBRATE_PROBE_OFFSET ' ~ tcs_oc.get('probe_extra_params', '')|string|replace('\n', ' ')|trim %}

  {% if atn not in printer.toolchanger.tool_numbers or atn != printer.toolchanger.tool_number %}
    {% set msg = macro_html ~ "?s3?t'tool_probe_endstop.active_tool_number' is: " ~ atn ~ ", run 'DETECT_ACTIVE_TOOL_PROBE' to update it.?mNo active tool/desynced, aborting." %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% elif atn == 0 %} # If we are T0
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    _MOVE_OVER_PROBE
    TOOL_LOCATE_SENSOR
    {cmd|trim if pc else ''}
  {% else %}
    _MOVE_OVER_PROBE
    TOOL_CALIBRATE_TOOL_OFFSET
    {cmd|trim if pc else ''}
  {% endif %}

[gcode_macro TC_FIND_PROBE_TRIGGER_TO_BOTTOM]
description: "Calculates correct trigger_to_bottom_z using the trusted z_offset of the current tool."
gcode:
    {% import toolchanger_helper as tc with context %}
    # --- Pre-flight Checks ---
    {tc.check_ok()}
    {tc.check_tn_actn()}
    {% if printer.tool_probe_endstop.active_tool_number != 0 %}
        {action_raise_error("This calibration must be run with the reference tool (T0) active.")}
    {% endif %}
    {tc.respond_colored("Starting TTBZ Calibration...", '[INFO]', 'info--text')}
    SET_GCODE_OFFSET Z=0
    _MOVE_OVER_PROBE
    TOOL_CALIBRATE_PROBE_OFFSET
    _TC_FIND_PROBE_TRIGGER_TO_BOTTOM

[gcode_macro _TC_FIND_PROBE_TRIGGER_TO_BOTTOM]
gcode:
    {% import toolchanger_helper as tc with context %}
    {% set p, svf = printer, printer.save_variables.variables %}
    # --- Handle user clicking "Update" in the prompt ---
    {% if params.UPDATE is defined %} 
        {% set new_ttbz = params.UPDATE|float %}
        {tc.svf_update('probe_position.trigger_to_bottom_z', new_ttbz)}
        {tc.update_ttbz_from_svf()}
        {tc.respond_colored("trigger_to_bottom_z updated to " ~ new_ttbz|round(4), "[TTBZ]", 'success--text')}
        RESPOND TYPE=command MSG="action:prompt_end"
    {% else %}
        {% set trusted_probe_z   = p.tool_probe_endstop.active_tool_probe_z_offset|float %}
        {% set last_probe_offset = p.tools_calibrate.last_probe_offset|float %}
        {% set ttbz_old = svf.get('probe_position', {}).get('trigger_to_bottom_z', 0.0)|float %}
        {% set ttbz_new = trusted_probe_z - (last_probe_offset - ttbz_old) %}
        RESPOND TYPE=command MSG="action:prompt_begin Calibrate Trigger to Bottom Z"
        RESPOND TYPE=command MSG="action:prompt_text  > Old TTBZ: {ttbz_old|round(4)}"
        RESPOND TYPE=command MSG="action:prompt_text  > New TTBZ: {ttbz_new|round(4)}"
        RESPOND TYPE=command MSG="action:prompt_footer_button Update|_TC_FIND_PROBE_TRIGGER_TO_BOTTOM UPDATE={ttbz_new}|success"
        RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG=action:prompt_end|error"
        RESPOND TYPE=command MSG="action:prompt_show"
    {% endif %}



[gcode_macro TC_FIND_FIRST_CALIBRATION_PROBE_POSITION]
description: "Manually jog tool over probe, then call me and it gets saved to SVF 'probe_position'"
gcode:
    TOOL_LOCATE_SENSOR
    _TC_FIND_FIRST_CALIBRATION_PROBE_POSITION

[gcode_macro _TC_FIND_FIRST_CALIBRATION_PROBE_POSITION]
variable_macro_html: "?tManually jog tool over probe, then call me and it gets saved to SVF 'probe_position' ?pTC_FIND_FIRST_CALIBRATION_PROBE_POSITION "
gcode:
    {% set svf = printer.save_variables.variables %}
    {% set probe_pos = printer.tools_calibrate.last_result %}
    {% set pos = {"x": probe_pos[0]|round(2), "y": probe_pos[1]|round(2), "z": probe_pos[2]|round(2)} %}
    {% set msg = macro_html ~ "?t?mPosition recorded and stored in svf?n?c" ~ pos ~ "?c?ddd" %}
    _UNIFIED_RESPOND MSG="{msg}"
    SAVE_VARIABLE VARIABLE=probe_position VALUE="{pos}"



