

#####################################################################
#   _MOVE_OVER_PROBE
#####################################################################
[gcode_macro _MOVE_OVER_PROBE]
description: Move tool head to probing position defined in [save_variables].
variable_macro_html: "?tMoves 3mm above the saved probe position.?nThis value is saved in SVF as 'probe_position' or set using TC_FIND_FIRST_CALIBRATION_PROBE_POSITION.?p_MOVE_OVER_PROBE "
gcode: # todo check home abort or home
  {% set p = printer %}
  {% set msg = macro_html %}
  {% set restoreAccel = p.toolhead.max_accel|float %}
  {% if p.toolchanger.status != "error" %}
    # â”€â”€â”€â”€â”€| Repair if wanted |â”€â”€â”€â”€â”€
    {% set svf_mode = printer['gcode_macro _toolchanger_settings'].get('svf_auto_repair', '') %}
    {'_INIT_SVF_KEYS' if svf_mode in ['Always', 'Use'] else ''}

    # â”€â”€â”€â”€â”€| Home if wanted |â”€â”€â”€â”€â”€
    {% if p.toolhead.homed_axes != "xyz" and p.configfile.settings.toolchanger.on_axis_not_homed == 'home' %}
        _DEBUG_RESPOND MSG="$_MOVE_OVER_PROBE$ | homing first."
        G28
      {% endif %}
    {% if p.toolhead.homed_axes != "xyz" and p.configfile.settings.toolchanger.on_axis_not_homed != 'home' %}
      {% set msg = msg ~ "?s3?tchange on_axis_not_homed to change behaviour on abort or home if not homed?mNot homed, aborting." %}
    {% elif p.toolchanger.tool_number != p.tool_probe_endstop.active_tool_number %} 
      INITIALIZE_TOOLCHANGER 
      {% set msg = msg ~ '?s2?t?mToolchanger desynced! Reinitializing, try again.' %}
    # â”€â”€â”€â”€â”€| Check if we got a tool |â”€â”€â”€â”€â”€
    {% elif p.tool_probe_endstop.active_tool_number|int != -1 %}
      {% set svf = p.save_variables.variables %}
      {% set feed = p.toolchanger.params_fast_speed  %}
      # Pull Nudge location from the save file position
      {% if 'probe_position' in svf %}
        {% if svf.probe_position.x|int == 0 and svf.probe_position.y|int == 0 and svf.probe_position.z|int == 0 %}
          {% set msg = msg ~ "?s3?tMissing calibration?nRun TC_FIND_FIRST_CALIBRATION_PROBE_POSITION to set probe position properly.?mKey 'probe_position' is set but its values are all 0.0.?nX=0 Y=0 Z=0" %}
        {% else %}
          G90
          # â”€â”€â”€â”€â”€| if position valid, go there |â”€â”€â”€â”€â”€
          SET_VELOCITY_LIMIT ACCEL={p.configfile.config.printer.max_accel|float // p['gcode_macro _toolchanger_settings'].get('macro_accel_divider', 1)|float}
          {% if p.toolhead.position[2] < svf.probe_position.z + 3 %} ROUNDED_G0 Z={svf.probe_position.z + 8} D=10 F={feed//2}{% endif %}
          #ðŸŸ¨â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€#
          #ðŸŸ¨ The actual path to the probe position. change this based on your printer.
          #ðŸŸ¨â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€#


          ROUNDED_G0 X={svf.probe_position.x} D=100 F={feed}
          ROUNDED_G0 Y={svf.probe_position.y} D=100 F={feed}
          ROUNDED_G0 Z={svf.probe_position.z + 3} D=0 F={feed//2}


          #{% set msg = msg ~ "?s0?tMoved above saved probe position?nTool is now positioned 3mm above SVF 'probe_position'.?mX={pos.x|round(3)} Y={pos.y|round(3)} Z={pos.z + 3|round(3)}" %}
        {% endif %}
      {% else %}
        {% set msg = msg ~ "?s4?tMissing probe_position key?nCould not find probe coordinates in SVF.?mDefine 'probe_position' via TC_FIND_FIRST_CALIBRATION_PROBE_POSITION or SVF like: ?c{'x': 219.644, 'y': 4.43, 'z': 8.066}?c" %}
      {% endif %}
    {% else %}
      {% set msg = msg ~ "?s3?tNo active tool?mNo active tool, cannot move over probe." %}
    {% endif %}
  {% else %}
      {% set msg = msg ~ "?s5?t?mToolchanger in error state. aborting." %}
  {% endif %}
  {% if msg != macro_html %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% endif %}
  SET_VELOCITY_LIMIT ACCEL={restoreAccel}


#####################################################################
#   TC_FIND_TOOL_OFFSETS
#####################################################################
[gcode_macro TC_FIND_TOOL_OFFSETS]
description: Calibrates the offsetts of the specified tool or tools. Usage: TC_FIND_TOOL_OFFSETS TOOL=x,x,x
variable_probe_temp: 150
variable_macro_html: "?tCalibrates the offsets of the specified tool or tools.?nUsage: TC_FIND_TOOL_OFFSETS TOOL=n,n,n?pTC_FIND_TOOL_OFFSETS "
variable_clean_macro_name: "CLEAN_NOZZLE"
gcode:
  {% set p   = printer %}
  {% set tc  = p.toolchanger %}
  {% set tns = tc.tool_numbers %}
  {% set cur = tc.tool_number %}
  {% set req = params.T|default('1,2...')|replace('0', '') %}
  {% set tools_to_adjust = [] %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set call_pos = p.toolhead.position %} # absolute
  {% set ns = namespace(prstmac = p["gcode_macro PRINT_START"], clean_macro = False, msg=macro_html) %}
  {% set actn = p.tool_probe_endstop.active_tool_number|int %}
  {% set clean_macro = "gcode_macro " ~ clean_macro_name %}
  {% set ns.clean_macro = p[clean_macro] if clean_macro in p else False %}

  {% macro add_msg(msg) -%}{% set ns.msg = ns.msg ~ msg %}{%- endmacro %}

  # ---------- Build tool tools_to_adjust (current tool first) ----------
  {% for raw in (tns if req == '1,2...' else (['0'] + req.split(',')))|map('trim') %}
    {% set n = raw|int(-1) %}
    {% if n in tns and n not in tools_to_adjust %}
      {% set _ = tools_to_adjust.append(n) %}
    {% elif raw|trim and n not in tns %}
      {add_msg("?s3?t?m?c" ~ raw ~ "?c  is not a valid tool number")}
    {% endif %}
  {% endfor %}
  {% if tools_to_adjust|length == 1 %}
    RESPOND TYPE=error MSG="No valid tools to process."
  {% endif %}
  # -----------------------------------------------------
  # Check if homed, and if it is, go do the thing.
  # -----------------------------------------------------
  {% if p.toolhead.homed_axes != "xyz" and p.configfile.settings.toolchanger.on_axis_not_homed == 'home' %}
    _DEBUG_RESPOND MSG="$TC_FIND_TOOL_OFFSETS$ | homing first."
    {% set call_pos = none %} #so we dont restore to 0 0 0 when done
    G28
  {% endif %}
  {% if "xyz" not in p.toolhead.homed_axes and p.configfile.settings.toolchanger.on_axis_not_homed != 'home' %}
      {add_msg("?s3?tPlease home prior to running 'TC_FIND_TOOL_OFFSETS'?mPrinter isnt homed.")}
  {% elif actn == -1 %}
      {add_msg("?s3?tRun 'DETECT_ACTIVE_TOOL_PROBE' if you think this message is a fault.?mNo active Tool, likely a crash. disabling for now.")}
  {% elif p.toolchanger.tool_number != actn %} 
      INITIALIZE_TOOLCHANGER 
      {add_msg("?s4?t?mToolchanger desynced! Reinitializing, try again.")}
  {% else %}
    {add_msg("?s0?t?mFound ?c" ~ tools_to_adjust|length ~ "?c tools to get the offsets for.")}
    _UNIFIED_RESPOND MSG="{ns.msg}"
    {% for tool_num in tools_to_adjust %}
      # -------------------------------------------------------
      # If we have a clean macro, restore to its brush instead
      {% if ns.clean_macro %} # clean the nozzle if the macro exists
        # if the clean nozzle macro exists, try to restore to its position if its set.
        T{tool_num}{' X=' ~ ns.clean_macro.x if 'x' in ns.clean_macro else ''}{' Y=' ~ ns.clean_macro.y if 'y' in ns.clean_macro else ''}{' Z=' ~ (ns.clean_macro.z + 3) if 'z' in ns.clean_macro else ''}
        CLEAN_NOZZLE
      {% else %}
        M104 S{probe_temp} T{tool_num}
        T{tool_num}
      {% endif %}
      # heat up
      M109 S{probe_temp} MIN{probe_temp} T{tool_num} MAX{probe_temp+50}
      # if not last, preheat next
      {% set next_tool = tools_to_adjust[loop.index] if not loop.last else None %}
      {% if next_tool is not none %} M104 {' S' ~ (190 if ns.clean_macro else probe_temp - probe_temp * 0.1)|string} T{next_tool} {% endif %}
      # if T0 make sure off are 0
      {% if tool_num == 0 %} SET_GCODE_OFFSET X=0 Y=0 Z=0 {% endif %}
      # calibrate XYZ
      {% set r_save = (tcs.get('offset_calibration', {})).get('value_rounding', 3)|int %}
      UPDATE_DELAYED_GCODE ID=_SAVE_OFFSETS_ON_FAILURE DURATION=120
      TC_PROBE_CALIBRATION_PROBE 
      UPDATE_DELAYED_GCODE ID=_SAVE_OFFSETS_ON_FAILURE DURATION=0
      #if defined calibrate probe
      # que for save
      _TC_UPDATE_OFFSETS TOOL={tool_num} 
      M104 S0 T{tool_num} # cool
    {% endfor %}
    T0 {'X=' ~ call_pos[0] ~ ' Y=' ~ call_pos[1] ~ ' Z=' ~ call_pos[2] if call_pos else ''}
    _TC_ADJUST_TTBZ_DRIFT
    _TC_UPDATE_OFFSETS SAVE=1 # save the offsets
    # reheat all tools if required.
    {% for tool_num in tools_to_adjust %}
      {% if ns.prstmac["params_T" ~ tool_num|string ~ "TEMP"] is defined %}
        M104 S{ns.prstmac["params_T" ~ tool_num|string ~ "TEMP"]|int - 50} T{tool_num} # todo this may be gibberish
      {% endif %}
    {% endfor %}
  {% endif %}
  {% if '?s3' in ns.msg or '?s2' in ns.msg or '?s1' in ns.msg %}
    _UNIFIED_RESPOND MSG="{ns.msg}"
  {% endif %}

[delayed_gcode _SAVE_OFFSETS_ON_FAILURE]
gcode:
  _UNIFIED_RESPOND MSG="?t?p_SAVE_OFFSETS_ON_FAILURE ?t?s3?m?bProbing failed early. Saving offsets.?b"
  _TC_UPDATE_OFFSETS SAVE=PROBABLY_IDK

#####################################################################
#   _TC_UPDATE_OFFSETS
#####################################################################
[gcode_macro _TC_UPDATE_OFFSETS]
description: stage tool offsets for save. Usage: _TC_UPDATE_OFFSETS T=X [SAVE], stages the current 'tools_calibrate.last_result' to the toolnumber provided.
variable_macro_html: "?tStage tool offsets for save.?nUsage: _TC_UPDATE_OFFSETS T=X [SAVE]?nStages the current 'tools_calibrate.last_result' to the toolnumber provided?p_TC_UPDATE_OFFSETS "
variable_storage: {}
gcode:
  #â”€â”€â”€< shorts
  {% set p          = printer %}
  {% set tc         = p.toolchanger %}
  {% set actn       = p.tool_probe_endstop.active_tool_number|int %}
  {% set svf        = p.save_variables.variables %}
  #â”€â”€â”€< get settings from settings macro
  {% set tcs        = p['gcode_macro _toolchanger_settings'] %}
  {% set ocs        = tcs.get('offset_calibration', {}) %}
  {% set svf_mode   = tcs.get('svf', {}).get('auto_repair', '') %}
  {% set r_svf      = ocs.get('value_rounding', 3)|int %}
  #â”€â”€â”€< respond stuff
  {% set msg        = macro_html %}
  {% set report     = [] %}
   #------------------------------------------------------------------------------------------------------------------
  #â”€â”€â”€< small helper macros with round
  {% macro rpad(v) -%}
    {(v|float|round(r_svf)|string).rjust(8)}
  {%- endmacro %}

  {% macro delta(a,b) %}
    {(a|default(-1)|float - b|default(-1)|float)|round(r_svf)}
  {%- endmacro %}

  {% macro update_xyz(dst, src) -%}
    {dst.update({'x': src['x']|round(r_svf),'y': src['y']|round(r_svf),'z': src['z']|round(r_svf)})}
  {%- endmacro %}

  {'_INIT_SVF_KEYS' if svf_mode in ['Always', 'Use'] else ''}

  {% if actn != -1 %}
    {% if 'SAVE' in params %}
      {% for tkey in storage %}
        #------------------------------------------------------------------------------------------------------------------
        {% set svf_key    = 'offsets_' ~ tkey %}
        {% set temp       = storage[tkey] %}
        {% set old        = svf.get(svf_key, {'x':0.0,'y':0.0,'z':0.0,'probe':0.0}) %}
        {% set new        = old.copy() %}
        {% set has_probe  = 'probe' in temp %}
        #â”€â”€â”€< treat T0 differently, as its key contains probe position.
        {% if tkey[-1] != '0' %}
          {% set _ = update_xyz(new, temp) %}
        {% else %}
          {% set old_pp = svf.get('probe_position', {}) %}
          {% set new_pp = old_pp.copy() %}
          {% set _ = update_xyz(new_pp, temp) %}
          SAVE_VARIABLE VARIABLE=probe_position VALUE="{new_pp}"
          {% set _ = old.update(old_pp) %}
        {% endif %}
        #â”€â”€â”€< at last, update probe result if we have one.
        {% if 'probe' in temp %}{% set _ = new.update({'probe': temp['probe']|round(r_svf)}) %}{% endif %}
        SAVE_VARIABLE VARIABLE={svf_key} VALUE="{new}"
        #------------------------------------------------------------------------------------------------------------------
        #â”€â”€â”€< difference
        {% set diff = { 
          'x':      delta(temp.x,     old.x)|float, 
          'y':      delta(temp.y,     old.y)|float, 
          'z':      delta(temp.z,     old.z)|float, 
          'probe':  delta(temp.probe, old.probe)|float #if not enabled will just be gibber but idgaf
        } %}
        #â”€â”€â”€< after here just tooltips/formatting/message
        {% set tooltip =            "?tPos: X: " ~ temp.x ~ " Y: " ~ temp.y ~ " Z: " ~ temp.z ~ ('P:' ~ temp.probe if has_probe else '') %}
        {% set tooltip = tooltip ~  "?nDif: X: " ~ diff.x ~ " Y: " ~ diff.y ~ " Z: " ~ diff.z ~ ('P:' ~ diff.probe if has_probe else '') %}

        {% set disp = '?s0?m   ?b' ~ tkey|string|upper ~ '?b offsets.' %}
        {% set disp = disp ~  '?nAbs:  ?cX:' ~ rpad(temp.x) ~ '  Y:' ~ rpad(temp.y) ~ '  Z:' ~ rpad(temp.z) ~ (' P:' ~ rpad(temp.probe) if has_probe else '') ~ '?c' %}
        {% set disp = disp ~  '?nDiff: ?cX:' ~ rpad(diff.x) ~ '  Y:' ~ rpad(diff.y) ~ '  Z:' ~ rpad(diff.z) ~ (' P:' ~ rpad(diff.probe) if has_probe else '') ~ '?c' %}

        {% set _ = report.append(tooltip ~ disp) %}
        #â”€â”€â”€< rolling log prep
        _TC_LOG_OFFSET_HISTORY {'T=' ~ tkey ~ ' X=' ~ temp.x ~ ' Y=' ~ temp.y ~ ' Z=' ~ temp.z ~ 'SILENT=TRUE' ~ (' PROBE=' ~ temp.probe if has_probe else '')}
      {% endfor %}
      #â”€â”€â”€< reset the storage
      {% set msg = msg ~ '?s0?t?mSaved ?b' ~ storage|length|string ~ '?b tool offsets' ~ report|join() %}
      SET_GCODE_VARIABLE MACRO=_TC_UPDATE_OFFSETS VARIABLE=storage VALUE={{}}
    {% else %} 
      #------------------------------------------------------------------------------------------------------------------
      #â”€â”€â”€< Stage for saving 
      {% set p_enabled  = ocs.get('probe_calibration', False) %}
      {% set lr = p.tools_calibrate.last_result %}
      {% set lp = p.tools_calibrate.last_probe_offset %}
      {% set result = {'x': lr[0], 'y': lr[1], 'z': lr[2]} %}
      {% if p_enabled %}{% set _ = result.update({'probe': lp}) %}{% endif %}
      #â”€â”€â”€< get param
      {% set tn = params.T|default(params.TOOL|default(tc.tool))|int %}
      {% if tn in tc.tool_numbers %}
        {% set t_short = tc.tool_names[tn]|replace('tool ', '')|lower %}
        #â”€â”€â”€< Stage
        {% set _ = storage.update({t_short: result}) %}
        SET_GCODE_VARIABLE MACRO=_TC_UPDATE_OFFSETS VARIABLE=storage VALUE="{storage}"
        #â”€â”€â”€< report on it or say why didnt
        {% set msg = msg ~ '?s0?t val: ' ~ result ~ '?mStaged ' ~ t_short|upper ~ ' for save...' %}
      {% else %}
        {% set msg = msg ~ '?s3?t?mFirst parameter should contain a toolnumber (e.g. T=1, TN=2, TOOL="tool TX1")' %}
      {% endif %}
    {% endif %}
  {% else %}
    {% set msg = msg ~ "?s3?t?mNo active Tool, likely a crash. disabling for now." %}
  {% endif %}
  _UNIFIED_RESPOND MSG="{msg}"

#####################################################################
#   TC_PROBE_CALIBRATION_PROBE
#####################################################################
[gcode_macro TC_PROBE_CALIBRATION_PROBE]
variable_macro_html: "?tCalls a macro to move over the calibration probe, and the correct internal command based on tool number selected.?nRefer to '_MOVE_OVER_PROBE' for more info?pTC_PROBE_CALIBRATION_PROBE"
gcode:
  {% set tpe = printer.tool_probe_endstop %}
  {% set tcs_oc = printer['gcode_macro _toolchanger_settings'].get('offset_calibration', {}) %}
  {% set pc = tcs_oc.get('probe_calibration', False) %} 
  {% set atn = tpe.active_tool_number|int %}
  {% set atp = tpe.active_tool_probe %}
  {% set params = tcs_oc.get('probe_extra_params', '')|string %}

  {% if atn not in printer.toolchanger.tool_numbers or atn != printer.toolchanger.tool_number %}
    {% set msg = macro_html ~ "?s3?t'tool_probe_endstop.active_tool_number' is: " ~ atn ~ ", run 'DETECT_ACTIVE_TOOL_PROBE' to update it.?mNo active tool/desynced, aborting." %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% elif atn == 0 %} # If we are T0
    STATUS_CALIBRATING_Z
    _MOVE_OVER_PROBE
    TOOL_LOCATE_SENSOR
    {% if pc %} TOOL_CALIBRATE_PROBE_OFFSET PROBE="{atp} {params}" {% endif %}
  {% else %}
    STATUS_CALIBRATING_Z
    _MOVE_OVER_PROBE
    TOOL_CALIBRATE_TOOL_OFFSET
    {% if pc %} TOOL_CALIBRATE_PROBE_OFFSET PROBE="{atp} {params}" {% endif %} 
  {% endif %}



#####################################################################
#   TC_ADJUST_OFFSETS_UI
#####################################################################
[gcode_macro TC_ADJUST_OFFSETS_UI]
description: Tool offset adjuster and tool selector with prompt UI integration
variable_selected_tool_for_offset: -1
gcode:
  {% set p = printer %}
  {% set svf = p.save_variables.variables %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set act = p.tool_probe_endstop.active_tool_number|int %}
  {% set stored = selected_tool_for_offset|default(act)|int %}
  {% set max_off = tcs.get('max_allowed_offsets', 999)|float %}
  {% set msg = "" %}

  {% if params.TOOL is defined %}
    SET_GCODE_VARIABLE MACRO=TC_ADJUST_OFFSETS_UI VARIABLE=selected_tool_for_offset VALUE={params.TOOL|int}
  {% elif params.AXIS is defined and params.AMOUNT is defined %}
    {% set axis = params.AXIS|lower %}
    {% set amount = params.AMOUNT|float|round(3) %}
    {% if axis in ['x', 'y', 'z'] and amount != 0 %}
      {% set toolname = p.toolchanger.tool_names[stored] %}
      {% set key = 'offsets_' ~ toolname|replace('tool ', '', 1)|lower %}
      {% set val = svf[key]|default({}) %}
      {% if val is not mapping %}{% set val = {} %}{% endif %}
      {% set newval = val.copy() %}
      {% set current = val[axis]|default(0)|float %}
      {% set updated = current + amount %}
      {% set updated = (-max_off if updated < -max_off else (max_off if updated > max_off else updated))|round(3) %}
      {% set _ = newval.update({axis: updated}) %}
      SAVE_VARIABLE VARIABLE={key} VALUE="{newval}"
      {% if p.toolchanger.tool_number == stored %}
        SET_GCODE_OFFSET {axis|upper}={updated} MOVE=1
      {% endif %}
      {% set msg = "Adjusted offset for " ~ toolname ~ " " ~ axis ~ " by " ~ amount ~ " â†’ " ~ updated %}
    {% else %}
      {% set msg = "Invalid AXIS or AMOUNT" %}
    {% endif %}
  {% else %}
    RESPOND TYPE=command MSG="action:prompt_begin Adjust Tool Offsets"

    {% set toolnames = p.toolchanger.tool_names %}
    {% set increments = [0.1, 0.05, 0.01, -0.1, -0.05, -0.01] %}

    {% for i in range(toolnames|length) %}
      {% if i % 3 == 0 %}RESPOND TYPE=command MSG="action:prompt_button_group_start"{% endif %}
      {% set name = toolnames[i]|replace('tool ', '') %}
      {% set color = 'primary' if i == stored else '' %}
      RESPOND TYPE=command MSG="action:prompt_button {name}|TC_ADJUST_OFFSETS_UI TOOL={i}|{color}"
      {% if i % 3 == 2 or i == toolnames|length - 1 %}RESPOND TYPE=command MSG="action:prompt_button_group_end"{% endif %}
    {% endfor %}

    {% for ax in ['X', 'Y', 'Z'] %}
      RESPOND TYPE=command MSG="action:prompt_text {ax} offset"
      {% for i in range(increments|length) %}
        {% if i % 3 == 0 %}RESPOND TYPE=command MSG="action:prompt_button_group_start"{% endif %}
        {% set val = increments[i] %}
        {% set sign = '+' if val > 0 else '' %}
        {% set color = 'info' if ax == 'X' else ('warning' if ax == 'Y' else 'error') %}
        RESPOND TYPE=command MSG="action:prompt_button {sign}{val}|TC_ADJUST_OFFSETS_UI AXIS={ax} AMOUNT={val}|{color}"
        {% if i % 3 == 2 or i == increments|length - 1 %}RESPOND TYPE=command MSG="action:prompt_button_group_end"{% endif %}
      {% endfor %}
    {% endfor %}

    RESPOND TYPE=command MSG="action:prompt_footer_button CLOSE|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

  {% if msg and params.SILENT is not defined %}
    RESPOND TYPE=echo MSG="{msg}"
  {% endif %}



[gcode_macro TC_ADJUST_OFFSET]
description: Adjust an offset by specifying tool, axis, and amount to adjust.
             TC_ADJUST_OFFSET TOOL=1 AXIS=X AMOUNT=0.050
variable_macro_html: "?tTC_ADJUST_OFFSET TOOL=1 AXIS=X AMOUNT=0.050?pTC_ADJUST_OFFSET "
gcode:
  {% set ns = namespace(msg = macro_html|string) %}
  {% set p = printer %}
  {% set svf = p.save_variables.variables %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set max_off = tcs.get('max_allowed_offsets', 999)|float %}

  {% set actn = p.tool_probe_endstop.active_tool_number|int %}
  {% set tn = (params.TOOL|int if params.TOOL is defined else actn) %}
  {% set axis = params.AXIS|default("")|lower %}
  {% set amount = params.AMOUNT|default(0.000)|float|round(3) %}

  {% if tn >= 0 and axis in ['x', 'y', 'z'] and amount != 0 %}
    # get key
    {% set toolname = p.toolchanger.tool_names[tn] %}
    {% set key = 'offsets_' ~ toolname|replace('tool ', '', 1)|lower %}
    {% set val = svf[key]|default({}) %}
    {% set val = {} if val is not mapping else val %}
    {% set newval = val.copy() %}
    {% set current = val[axis]|default(0)|float %}
    {% set updated = (current + amount)|round(3) %}
    # clamp
    {% set updated = (-max_off if updated < -max_off else (max_off if updated > max_off else updated))|round(3) %}
    # update dict and save
    {% set _ = newval.update({axis: updated}) %}
    SAVE_VARIABLE VARIABLE={key} VALUE="{newval}"
    {% if p.toolchanger.tool_number == tn %}
      SET_GCODE_OFFSET {axis|upper}={updated} MOVE=1
    {% endif %}
    {% set ns.msg = ns.msg ~ "?s0?mAdjusted offset for?c" ~ toolname ~ "?c axis ?c" ~ axis ~ "?c by " ~ amount ~ "mm â†’ new: " ~ updated %}
  {% elif tn == -1 %}
    {% set ns.msg = ns.msg ~ "?s4?mNo tool number provided and no active tool available." %}
  {% elif axis not in ['x', 'y', 'z'] %}
    {% set ns.msg = ns.msg ~ "?s4?mUnknown or missing axis: ?c" ~ axis ~ "?c. Only x, y, or z supported." %}
  {% elif amount == 0 %}
    {% set ns.msg = ns.msg ~ "?s4?mAdjustment amount must be non-zero." %}
  {% endif %}
  {% if params.SILENT is not defined %}
    _UNIFIED_RESPOND MSG="{ns.msg}"
  {% endif %}

#####################################################################
#   TC_FIND_PROBE_TRIGGER_TO_BOTTOM
#####################################################################
[gcode_macro TC_FIND_PROBE_TRIGGER_TO_BOTTOM]
description: Calculates correct trigger_to_bottom_z using trusted z_offset (trusted = current tool)
variable_macro_html: "?tCalculates correct trigger_to_bottom_z using trusted z_offset (trusted = current tool)?pTC_FIND_PROBE_TRIGGER_TO_BOTTOM "
gcode:
  {% set p = printer %}
  {% set msg = macro_html %}
  {% if p.toolhead.homed_axes != "xyz" and p.configfile.settings.toolchanger.on_axis_not_homed == 'home' %}
    {% set homing_msg = macro_html ~ '?s0?twant to rather not home instead? edit:?n[toolchanger]?n   on_axis_not_homed: abort?mHoming before changing...' %}
    _UNIFIED_RESPOND MSG="{homing_msg}"
    G28
  {% endif %}
  {% if p.toolhead.homed_axes != "xyz" and p.configfile.settings.toolchanger.on_axis_not_homed != 'home' %}
    {% set msg = msg ~ '?s4?twant to rather home instead? edit:?n[toolchanger]?n   on_axis_not_homed: home?mcannot switch tools, not homed' %}
  {% elif p.tool_probe_endstop.active_tool_number == -1 %}
      {% set msg = msg ~ '?s4?t?mNo tool mounted. Initialize first.' %}
  {% else %}
    #â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    _MOVE_OVER_PROBE
    TOOL_LOCATE_SENSOR
    TOOL_CALIBRATE_PROBE_OFFSET
    _TC_FIND_PROBE_TRIGGER_TO_BOTTOM
    _MOVE_TO_CENTER
    #â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  {% endif %}
  {% if msg != macro_html %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% endif %}

[gcode_macro _TC_FIND_PROBE_TRIGGER_TO_BOTTOM]
gcode: # FIX does that respect our gcode offsets of other tools???
  {% set p = printer %}
  {% set actn = p.tool_probe_endstop.active_tool_number %}
  {% set svf = p.save_variables.variables %}

  {% if actn != -1 %}
    {% set key = 'offsets_' ~ ((p.toolchanger.tool_names[actn])|replace('tool ', '', 1)|lower) %}
    {% set cur_probe = (svf.get(key, {})).get('probe', p.tool_probe_endstop.active_tool_probe_z_offset)|float %}
    {% set last_probe_offset = printer.tools_calibrate.last_probe_offset|float %}
    {% set ttb_old = printer.configfile.settings.tools_calibrate.trigger_to_bottom_z|float %}
    {% set ttb_new = cur_probe - (last_probe_offset - ttb_old) %}
    {% set nl = '\u0026\u0023\u0031\u0030\u003b' %}
    {% set hover_text ="ðŸŸ  z_offset: " ~ cur_probe|round(3)|string ~ nl ~"ðŸ”µ last_offset: " ~ last_probe_offset|round(3)|string ~ nl ~"ðŸŸ£ old trigger_to_bottom_z: " ~ ttb_old|round(3)|string%}
    RESPOND MSG="<span title='{hover_text}'><b style='color:rgb(0,255,150)'>ðŸŸ¢ trigger_to_bottom_z: {ttb_new|round(4)}</b></span>"
  {% else %}
    RESPOND TYPE=error MSG="No active tool selected for probe calibration."
  {% endif %}


#####################################################################
#   TC_FIND_FIRST_CALIBRATION_PROBE_POSITION
#####################################################################
[gcode_macro TC_FIND_FIRST_CALIBRATION_PROBE_POSITION]
description: "Manually jog tool over probe, then call me and it gets saved to SVF 'probe_position'"
gcode:
  TOOL_LOCATE_SENSOR
  _TC_FIND_FIRST_CALIBRATION_PROBE_POSITION

[gcode_macro _TC_FIND_FIRST_CALIBRATION_PROBE_POSITION]
variable_macro_html: "?tManually jog tool over probe, then call me and it gets saved to SVF 'probe_position' ?pTC_FIND_FIRST_CALIBRATION_PROBE_POSITION "
gcode:
  {% set msg = macro_html %}
  {% set svf = printer.save_variables.variables %}
  {% set probe_pos = printer.tools_calibrate.last_result %}
  {% set pos = {"x": probe_pos[0]|round(2), "y": probe_pos[1]|round(2), "z": probe_pos[2]|round(2)} %}
  {% set msg = msg ~ "?t?mPosition recorded and stored in svf?n?c" ~ pos ~ "?c?ddd" %}
  _UNIFIED_RESPOND MSG="{msg}"
  SAVE_VARIABLE VARIABLE=probe_position VALUE="{pos}"



