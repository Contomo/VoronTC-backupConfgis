
[gcode_macro _MOVE_OVER_PROBE]
description: "Move tool head to probing position defined in [save_variables]."
variable_macro_html: "?tMoves 3mm above the saved probe position.?nThis value is saved in SVF as 'probe_position' or set using TC_FIND_FIRST_CALIBRATION_PROBE_POSITION.?p_MOVE_OVER_PROBE "
gcode:
    {% set move_back_before_appraoch_y = 70 %}
    {% import toolchanger_helper as tch with context %}

    {% set p, cfg = printer, printer.configfile.settings %}
    {% set pp = p.save_variables.variables.get('probe_position', {}) %}
    {% set feed = p.toolchanger.params_fast_speed  %} 
    {tch.check_ok()}
    {% if pp is mapping and pp.values()|select|list|length >= 2 %} # just makes sure all xyz arent 0
        G90
        {tch.try_divide_accel()}
        {% if p.toolhead.position[2] < pp.z + 3 %} 
            ROUNDED_G0 Z={pp.z + 8} D=10 F={feed/2}
        {% endif %}
        {% set y_to_dock = tch.get_y_distance_to_docks(p.toolhead.position)|float(999) %}
        {% if y_to_dock < move_back_before_appraoch_y - 10 %}
            {% set back_y = p.toolhead.position.y +  move_back_before_appraoch_y - y_to_dock %}
            ROUNDED_G0 Y={back_y} D=100 F={feed}
        {% endif %}
        ROUNDED_G0 X={pp.x}     D=100 F={feed}
        ROUNDED_G0 Y={pp.y}     D=100 F={feed}
        ROUNDED_G0 Z={pp.z + 2} D=0   F={feed/2}
    {% else %}
        _UNIFIED_RESPOND MSG={macro_html ~ "?s4?tMissing probe_position key?nCould not find probe coordinates in SVF.?mDefine 'probe_position' via TC_FIND_FIRST_CALIBRATION_PROBE_POSITION or SVF like: ?c{'x': 219.644, 'y': 4.43, 'z': 8.066}?c"}
    {% endif %}
    # ---< restore original accel/vel
    {tch.restore_vel()}

[gcode_macro TC_FIND_TOOL_OFFSETS]
description: "Calibrates the offsetts of the specified tool or tools. Usage: TC_FIND_TOOL_OFFSETS TOOL=x,x,x"
variable_macro_html: "?tCalibrates the offsets of the specified tool or tools.?nUsage: TC_FIND_TOOL_OFFSETS TOOL=n,n,n?pTC_FIND_TOOL_OFFSETS "
variable_saved_tool_temps: None
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set p, tc, tns = printer, printer.toolchanger, printer.toolchanger.tool_numbers %}
    # ---< settings
    {% set tcs              = p['gcode_macro _toolchanger_settings'] %}
    {% set clean_macro      = tcs.get('clean_nozzle_macro', {}).get('macro') %}
    {% set calib_settings   = tcs.get('offset_calibration', {}) %}
    {% set temp, save_delay = calib_settings.get('nozzle_temperature', 150), calib_settings.get('save_on_failure_delay', 0) %}

    # ---< startup checks
    {tch.check_ok()}
    {svh.save_tool_targets_to_variable('TC_FIND_TOOL_OFFSETS', 'saved_tool_temps')}

    # ---< get all requested tool numbers
    {% set tool_nums = params.T|default('1,2...') %}
    {% set requested_tools = tool_nums.split(',')|map('trim')|map('int')|select('in', tns)|list if 'T' in params else tns %}
    {% set tools_to_calibrate = ([0] + (requested_tools|reject('==', 0)|list|unique|sort))|list %}
    {tch.respond_colored("calibrating: " ~ tools_to_calibrate, 'TC_FIND_TOOL_OFFSETS', 'grey')}

    {% for tool_num in tools_to_calibrate %}
        # ---< preheat the next in line
        {% if not loop.last %}
            M104 S{temp} T{loop.nextitem}
        {% endif %}
        # ---< Clean nozzle
        {clean_macro|upper ~ ' T=' ~ tool_num if clean_macro else ''}
        M104 S{temp} T{tool_num}
        # ---< select tool if clean nozzle didnt run/select it
        T{tool_num} 
        # ---< wait for temp
        M109 S{temp} T{tool_num} L{temp} U{temp+50}
        # ---< do the probing
        UPDATE_DELAYED_GCODE ID=_SAVE_OFFSETS_ON_FAILURE DURATION={save_delay}
        TC_PROBE_CALIBRATION_PROBE 
        UPDATE_DELAYED_GCODE ID=_SAVE_OFFSETS_ON_FAILURE DURATION=0
        # ---< stage for saving
        _TC_UPDATE_OFFSETS T={tool_num} 

        # ---< restore that tools temp
        {svh.restore_tool_targets_from_variable('TC_FIND_TOOL_OFFSETS', 'saved_tool_temps', 'M104', tool_num)}
    {% endfor %}
    # ---< save all those values
    _TC_UPDATE_OFFSETS SAVE=1
    # ---< restore original tool to center if we arent printing, if we are just where we came from
    {% if p.idle_timeout.state|lower != "printing" or 'xyz' not in p.toolhead.homed_axes|lower %}
        MOVE_TO_CENTER T={tc.tool_number}
    {% else  %}
        T{tc.tool_number} X={p.toolhead.position['x']} Y={p.toolhead.position['y']} Z={p.toolhead.position['z']}
    {% endif %}
    # ---< restore all saved tool temps, may have been on, may have been off
    {svh.restore_tool_targets_from_variable('TC_FIND_TOOL_OFFSETS', 'saved_tool_temps', 'M104')}

[gcode_macro _TC_UPDATE_OFFSETS]
description: "stage tool offsets for save. Usage: _TC_UPDATE_OFFSETS T=X [SAVE], stages the current 'tools_calibrate.last_result' to the toolnumber provided."
variable_macro_html: "?tStage tool offsets for save.?nUsage: _TC_UPDATE_OFFSETS T=X [SAVE]?nStages the current 'tools_calibrate.last_result' to the toolnumber provided?p_TC_UPDATE_OFFSETS "
variable_storage: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    #───< shorts
    {% set p          = printer %}
    {% set tc         = p.toolchanger %}
    {% set actn       = p.tool_probe_endstop.active_tool_number|int %}
    {% set svf        = p.save_variables.variables %}
    #───< get settings from settings macro
    {% set tcs        = p['gcode_macro _toolchanger_settings'] %}
    {% set ocs        = tcs.get('offset_calibration', {}) %}
    {% set r_svf      = ocs.get('value_rounding', 3)|int %}
    {% set p_enabled  = ocs.get('probe_calibration', False) %}
    {% set keys       = ['x', 'y', 'z'] + (['probe'] if p_enabled else []) %}
    #───< respond stuff
    {% set msg        = macro_html %}
    {% set report     = [] %}
    #------------------------------------------------------------------------------------------------------------------
    #───< small helper macros with round
    {%- macro rpad(v) -%} { (v|float|round(r_svf)|string).rjust(8) } {%- endmacro %}

    {%- macro delta(a,b) -%} { (a|default(0)|float - b|default(0)|float)|round(r_svf) } {%- endmacro -%}

    {% if actn != -1 %}
        {% if 'SAVE' in params %}
        {% set count = storage|length|float or 0.0001 %}
        {% set _storage = storage.copy() %}
        {% set _ = _storage.pop( _storage.keys()|list|first, None ) %}

        {% set mid_prev, mid_curr, mid_delta = {}, {}, {} %}
        {% set svf_tool_keys = tc.tool_names|map('lower')|map('replace','tool ','offsets_')|list %}
        {% set prev_list = svf|dictsort|selectattr('0','in',svf_tool_keys)|map('last')|list %}
        {% set curr_list = _storage.values()|list %}

        {% for ax in keys %}
            {% set s_prev = prev_list|map(attribute=ax,default=0)|map('float',0.0)|sum %}
            {% set s_curr = curr_list|map(attribute=ax,default=0)|map('float',0.0)|sum %}
            {% set _ = mid_prev.update({ax:(s_prev / count)}) %}
            {% set _ = mid_curr.update({ax:(s_curr / count)}) %}
            {% set _ = mid_delta.update({ax:(mid_curr[ax] - mid_prev[ax])}) %}
        {% endfor %}

        {% for tkey in storage %}
            {% set tn = tkey[-1]|int %}
            {% set svf_key = 'offsets_' ~ tkey %}
            {% set temp = storage[tkey] %}

            {% set old_for_diff = {} %}
            {% if tkey[-1] == '0' %}
                {% set _ = old_for_diff.update(svf.get('offsets_t0', {})) %}
                {% set _ = old_for_diff.update(svf.get('probe_position', {})) %}
            {% else %}
                {% set _ = old_for_diff.update(svf.get(svf_key, {})) %}
            {% endif %}

            {% if tn != 0 %}
                {svh.svf_update(svf_key, temp)}
            {% else %}
                {svh.svf_update('probe_position', {'x':temp.x,'y':temp.y,'z':temp.z})}
                {% if p_enabled %}{svh.svf_update('offsets_t0', {'probe':temp.probe})}{% endif %}
            {% endif %}
            {tch.update_tool_probe_from_svf  (tn)}
            {tch.update_tool_offsets_from_svf(tn)}

            {% set diff, rel = {}, {} %}
            {% for ax in keys %}
                {% set d = delta(temp.get(ax), old_for_diff.get(ax))|float %}
                {% set _ = diff.update({ax:d}) %}
                {% set _ = rel.update({ax:(d - mid_delta[ax])}) %}
            {% endfor %}

            {% set tooltip = "?tPos: X: " ~ temp.x ~ " Y: " ~ temp.y ~ " Z: " ~ temp.z ~ ( ' P:' ~ temp.probe if p_enabled else '' ) %}
            {% set tooltip = tooltip ~ "?nDif: X: " ~ diff.x ~ " Y: " ~ diff.y ~ " Z: " ~ diff.z ~ ( ' P:' ~ diff.probe if p_enabled else '' ) %}
            {% set tooltip = tooltip ~ "?nRel: X: " ~ rel.x ~ " Y: " ~ rel.y ~ " Z: " ~ rel.z ~ ( ' P:' ~ rel.probe if p_enabled else '' ) %}

            {% set disp = '?s0?m?b' ~ tkey|string|upper ~ '?b offsets.' %}
            {% set disp = disp ~ '?nAbs:  ?cX:' ~ rpad(temp.x) ~ '  Y:' ~ rpad(temp.y) ~ '  Z:' ~ rpad(temp.z) ~ ( ' P:' ~ rpad(temp.probe) if p_enabled else '' ) ~ '?c' %}
            {% set disp = disp ~ '?nDiff: ?cX:' ~ rpad(diff.x) ~ '  Y:' ~ rpad(diff.y) ~ '  Z:' ~ rpad(diff.z) ~ ( ' P:' ~ rpad(diff.probe) if p_enabled else '' ) ~ '?c' %}
            {% set disp = disp ~ '?nRel:  ?cX:' ~ rpad(rel.x)  ~ '  Y:' ~ rpad(rel.y)  ~ '  Z:' ~ rpad(rel.z)  ~ ( ' P:' ~ rpad(rel.probe)  if p_enabled else '' ) ~ '?c' %}

            {% set _ = report.append(tooltip ~ disp) %}
            _TC_LOG_OFFSET_HISTORY {'T=' ~ tkey ~ ' X=' ~ temp.x ~ ' Y=' ~ temp.y ~ ' Z=' ~ temp.z ~ ' SILENT=TRUE' ~ (' PROBE=' ~ temp.probe if p_enabled else '')}
        {% endfor %}
        #───< reset the storage
        {% set msg = msg ~ '?s0?t?mSaved ?b' ~ storage|length|string ~ '?b tool offsets' ~ report|join() %}
        SET_GCODE_VARIABLE MACRO=_TC_UPDATE_OFFSETS VARIABLE=storage VALUE={{}}
        {% else %} 
            #------------------------------------------------------------------------------------------------------------------
            #───< Stage for saving 
            {% set p_enabled  = ocs.get('probe_calibration', False) %}
            {% set lr = p.tools_calibrate.last_result %}
            {% set lp = p.tools_calibrate.last_probe_offset %}

            #───< add our offset so later saves correct.
            {% set result = {'x': lr[0], 'y': lr[1], 'z': lr[2]} %}
            {% if p_enabled %}
                {% set _ = result.update({'probe': lp}) %}
            {% endif %}

            #───< get param
            {% set tn = params.T|default(params.TOOL|default(tc.tool_number))|int %}
            {% if tn in tc.tool_numbers %}
                {svh.gcode_var_update('_TC_UPDATE_OFFSETS', 'storage.' ~ tch.tk_lower(tn), result)}
                {% set msg = msg ~ '?s0?t val: ' ~ result ~ '?mStaged ' ~ tch.tool_key(tn) ~ ' for save...' %}
            {% else %}
                {% set msg = msg ~ '?s3?t?mFirst parameter should contain a toolnumber (e.g. T=1, TN=2, TOOL="tool TX1")' %}
            {% endif %}
        {% endif %}
    {% else %}
        {% set msg = msg ~ "?s3?t?mNo active Tool, likely a crash. disabling for now." %}
    {% endif %}
    _UNIFIED_RESPOND MSG="{msg}"

[delayed_gcode _SAVE_OFFSETS_ON_FAILURE]
gcode:
  _UNIFIED_RESPOND MSG="?t?p_SAVE_OFFSETS_ON_FAILURE ?t?s3?m?bProbing failed early. Saving offsets.?b"
  _TC_UPDATE_OFFSETS SAVE=PROBABLY_IDK


[gcode_macro TC_PROBE_CALIBRATION_PROBE]
variable_macro_html: "?tCalls a macro to move over the calibration probe, and the correct internal command based on tool number selected.?nRefer to '_MOVE_OVER_PROBE' for more info?pTC_PROBE_CALIBRATION_PROBE"
gcode:
    {% import toolchanger_helper as tch with context %}
    {tch.update_ttbz_from_svf(respond=False)}
    {% set tpe = printer.tool_probe_endstop %}
    {% set tcs_oc = printer['gcode_macro _toolchanger_settings'].get('offset_calibration', {}) %}
    {% set probe_calibration = tcs_oc.get('probe_calibration', False) if 'PROBE' not in params else params.PROBE|int(0) %} 
    {% set atn = tch.get_mounted_tn()|int %} #tpe.active_tool_number|int %}
    {% set atp = tpe.active_tool_probe %}
    {% set cmd = 'TOOL_CALIBRATE_PROBE_OFFSET PROBE="' ~ atp ~ '" ' ~ tcs_oc.get('probe_extra_params', '')|string|replace('\n', ' ')|trim %}

    {tch.check_ok()}
    M400
    {% if atn not in printer.toolchanger.tool_numbers or atn != printer.toolchanger.tool_number %}
        {% set msg = macro_html ~ "?s3?t'tool_probe_endstop.active_tool_number' is: " ~ atn ~ ", run 'DETECT_ACTIVE_TOOL_PROBE' to update it.?mNo active tool/desynced, aborting." %}
        _UNIFIED_RESPOND MSG="{msg}"
    {% elif atn == 0 or 'FORCE_LOCATE' in params %} # If we are T0
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        _MOVE_OVER_PROBE
        TOOL_LOCATE_SENSOR
        {cmd|trim if probe_calibration else ''}
    {% else %}
        _MOVE_OVER_PROBE
        TOOL_CALIBRATE_TOOL_OFFSET
        {cmd|trim if probe_calibration else ''}
    {% endif %}

[gcode_macro TC_FIND_PROBE_TRIGGER_TO_BOTTOM]
description: "Calculates correct trigger_to_bottom_z using the trusted z_offset of the current tool."
gcode:
    {% import toolchanger_helper as tc with context %}
    {% set temp = printer['gcode_macro _toolchanger_settings'].get('offset_calibration', {}).get('nozzle_temperature', 150) %}
    # --- Pre-flight Checks ---
    {tc.check_ok()}
    {tc.respond_colored("Starting TTBZ Calibration...", 'TTBZ', 'info--text')}
    M104 S{temp}
    _MOVE_OVER_PROBE
    {tc.update_ttbz_from_svf(respond=False)}
    TC_LOAD_OFFSETS
    M109 S{temp}
    TC_PROBE_CALIBRATION_PROBE PROBE=1 FORCE_LOCATE=1
    M104 S{tc.get_tool_target(printer.toolchanger.tool_number)}
    _TC_FIND_PROBE_TRIGGER_TO_BOTTOM

[gcode_macro _TC_FIND_PROBE_TRIGGER_TO_BOTTOM]
gcode:
    {% import variable_helper as svh with context %}
    {% import toolchanger_helper as tc with context %}

    {% set BUTS = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
    {%- macro ui(msg) -%} { action_respond_info('action:prompt_' ~ msg) } {%- endmacro -%}

    {% set p, svf = printer, printer.save_variables.variables %}
    # --- Handle user clicking "Update" in the prompt ---
    {% if params.UPDATE is defined %} 
        {% set new_ttbz = params.UPDATE|float %}
        {svh.svf_update('probe_position.trigger_to_bottom_z', new_ttbz)}
        {tc.respond_colored("trigger_to_bottom_z updated to " ~ new_ttbz|round(4), "TTBZ", 'success--text')}
        {ui('end')}
    {% else %}
        {% set trusted_probe_z   = p.tool_probe_endstop.active_tool_probe_z_offset|float %}
        {% set last_probe_offset = p.tools_calibrate.last_probe_offset|float %}
        {% set ttbz_old = svf.get('probe_position', {}).get('trigger_to_bottom_z', 0.0)|float %}
        {% set ttbz_new = trusted_probe_z - (last_probe_offset - ttbz_old) %}
        {ui('begin Calibrate Trigger to Bottom Z')}
        {ui('text  → Old TTBZ: ' ~ ttbz_old|round(3) ~ ' mm')}
        {ui('text  → New TTBZ: ' ~ ttbz_new|round(3) ~ ' mm')}
        {ui('footer_button ' ~ BUTS.save[0] ~  '|_TC_FIND_PROBE_TRIGGER_TO_BOTTOM UPDATE=' ~ ttbz_new ~ '|' ~ BUTS.save[1])}
        {ui('footer_button ' ~ BUTS.cancel[0] ~  '|RESPOND TYPE="command" MSG="action:prompt_end"|' ~ BUTS.cancel[1])}
        {ui('show')}
    {% endif %}







[gcode_macro TC_FIND_FIRST_CALIBRATION_PROBE_POSITION]
description: "Manually jog tool over probe, then call me and it gets saved to SVF 'probe_position'"
gcode:
    {% if 'PROBE' in params %}
        TOOL_LOCATE_SENSOR
        _TC_FIND_FIRST_CALIBRATION_PROBE_POSITION
    {% else %}
        {%- macro ui(msg) -%} { action_respond_info('action:prompt_' ~ msg) } {%- endmacro -%}
        {% set BUTS = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
        {ui('begin Is the calibration probe below the nozzle?')}
        {ui('button_group_begin')}
        {ui('button ' ~ BUTS.confirm[0] ~  '|TC_FIND_FIRST_CALIBRATION_PROBE_POSITION PROBE=YES|' ~ BUTS.confirm[1])}
        {ui('button ' ~ BUTS.cancel[0] ~  '|RESPOND TYPE=command MSG=action:prompt_end|' ~ BUTS.cancel[1])}
        {ui('button_group_end')}
        {ui('footer_button ' ~ BUTS.back[0] ~  '|TC_CALIRATE_UI|' ~ BUTS.back[1])}
        {ui('footer_button ' ~ BUTS.close[0] ~ '|RESPOND TYPE="command" MSG="action:prompt_end"|' ~ BUTS.close[1])}
        {ui('show')}
    {% endif %}

[gcode_macro _TC_FIND_FIRST_CALIBRATION_PROBE_POSITION]
variable_macro_html: "?tManually jog tool over probe, then call me and it gets saved to SVF 'probe_position' ?pTC_FIND_FIRST_CALIBRATION_PROBE_POSITION "
gcode:
    {% import variable_helper as svh with context %}
    {% set probe_pos = printer.tools_calibrate.last_result %}
    {% set pos = {"x": probe_pos[0]|round(2), "y": probe_pos[1]|round(2), "z": probe_pos[2]|round(2)} %}
    {% set msg = macro_html ~ "?t?s0?mPosition recorded and stored in svf?n?c" ~ pos ~ "?c?ddd" %}
    _UNIFIED_RESPOND MSG="{msg}"
    {svh.svf_update('probe_position', pos)}



