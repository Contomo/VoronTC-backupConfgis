

[gcode_macro RAISE_Z_A_BIT]
description: "Raise Z by 5 mm (unsafe)"
variable_macro_html: "?tRaise Z by 5 mm…?p_RAISE_Z5 "
gcode:
  SET_KINEMATIC_POSITION Z=0
  G91
  G0 Z5 F1000
  G90
  INITIALIZE_TOOLCHANGER
  SET_KINEMATIC_POSITION CLEAR_HOMED=XYZ

[delayed_gcode _INIT_AT_STARTUP]
initial_duration: 1
gcode:
    {% if printer.toolchanger.detected_tool_number in [-1, None] %}
         _UNIFIED_RESPOND MSG="{'?tinitializes at startup auto?p_INIT_AT_STARTUP' ~ '?s4?t?mNo active tool, not initilizing! ?s0?t?mPerhaps you want to?c?cmdRAISE_Z_A_BIT?cmd?c? ?ddd'}"
    {% else %}
        INITIALIZE_TOOLCHANGER {rawparams}
    {% endif %}

[delayed_gcode _MIGRATION_CONFIG_CHECK_AND_STARTUP_VALUE_LOADING]
initial_duration: 0.75
gcode:
    _MIGRATION_CONFIG_CHECK_AND_STARTUP_VALUE_LOADING
    
[gcode_macro _MIGRATION_CONFIG_CHECK_AND_STARTUP_VALUE_LOADING]
gcode:
    #======================================================< MIGRATION AND CONFIG CHECK MACRO
    # ---< INIT CONTEXT
    {% import toolchanger_helper as tc with context %}
    {% import variable_helper    as svh with context %}

    {% import html_helper as html with context %}
    {% set p, cfg = printer, printer.configfile.settings %}
    #======================================================< MIGRATE TOOL OFFSETS
    {% set migrated, duplicates, report_lines = [], [], [] %}

    # ---< MIGRATE PER TOOL (xyz grouped + probe)
    {% for tn in p.toolchanger.tool_numbers %}
        {% set tname   = p.toolchanger.tool_names[tn] %}
        {% set tshort  = tc.tk_lower(tn) %}
        {% set sv_key  = 'offsets_' ~ tshort %}
        {% set sv_data = p.save_variables.variables.get(sv_key, {}) %}
        {% set cfg_section = cfg[tname|lower] %}

        {% set dock_svf_key  = 'dock_' ~ tshort %}
        {% set dock_svf_map  = p.save_variables.variables.get(dock_svf_key, {}) %}
        {% set dock_cfg_map  = {} %}

        {% for ax in ['x','y','z'] %}
            {% set cfg_key = 'params_park_' ~ ax %}
            {% set cfg_val = cfg_section.get(cfg_key, None) %}
            {% if cfg_val is not none %}
                {% set _ = dock_cfg_map.update({ax: cfg_val|float}) %}
            {% endif %}
        {% endfor %}

        {% if dock_cfg_map %}
            {% set dock_prev_map = {'x': dock_svf_map.get('x'), 'y': dock_svf_map.get('y'), 'z': dock_svf_map.get('z')} %}
            {% set dock_dup_axes = [] %}
            {% for dax in dock_cfg_map if dock_svf_map.get(dax) is not none %}
                {% set _ = dock_dup_axes.append(dax) %}
            {% endfor %}
            {% if dock_dup_axes %}
                {% set _ = duplicates.append(tshort ~ " dock: cfg={" ~ dock_cfg_map.items()|map('join','=')|join(' ') ~ "}, svf={" ~ dock_prev_map.items()|map('join','=')|join(' ') ~ "}") %}
            {% else %}
                { svh.svf_update(dock_svf_key, dock_cfg_map) }
                {% set _ = migrated.append(tshort ~ " dock {" ~ dock_cfg_map.items()|map('join','=')|join(' ') ~ "}") %}
            {% endif %}
        {% endif %}

        # -------------------------------< Gather xyz offsets as dict
        {% set xyz_cfg = {
            'x': cfg_section.gcode_x_offset|float(0),
            'y': cfg_section.gcode_y_offset|float(0),
            'z': cfg_section.gcode_z_offset|float(0)
        } %}
        {% set xyz_svf = {
            'x': sv_data.x|float(0),
            'y': sv_data.y|float(0),
            'z': sv_data.z|float(0)
        } %}

        # -------------------------------< Gather probe offset
        {% set probe_name = tc.get_probe_name_from_tn(tn) %}
        {% set probe_cfg = probe_name and cfg[probe_name].z_offset|float(0) or 0 %}
        {% set probe_svf = sv_data.probe|float(0) %}

        {% set new_svf, xyz_nonzero, xyz_dup = {}, [], [] %}
        # ---< collect all xyz axes that aren't 0
        {% for axis, val in xyz_cfg.items() if val != 0 %}
            {% set _ = xyz_nonzero.append(axis) %}
        {% endfor %}

        {% if xyz_nonzero %}
            # ---< check for duplicates among migrated axes
            {% for axis in xyz_nonzero if axis in sv_data and sv_data[axis] %}
                {% set _ = xyz_dup.append(axis) %}
            {% endfor %}
            {% if xyz_dup %}
                {% set _ = duplicates.append(tshort ~ " cfg: {" ~ xyz_cfg.items()|map('join', '=')|join(' ') ~ "}, svf: {" ~ xyz_svf.items()|map('join', '=')|join(' ') ~ "}") %}
            {% else %}
                {% for axis in xyz_nonzero %}
                    {% set _ = new_svf.update({axis: xyz_cfg[axis]}) %}
                {% endfor %}
                {% set _ = migrated.append(tshort ~ " {" ~ xyz_cfg.items()|map('join', '=')|join(' ') ~ "}") %}
            {% endif %}
        {% endif %}

        # ---< probe offset: migrate or duplicate
        {% if probe_cfg != 0 %}
            {% if probe_svf != 0 %}
                {% set _ = duplicates.append(tshort ~ " probe: cfg=" ~ probe_cfg ~ ", svf=" ~ probe_svf) %}
            {% else %}
                {% set _ = new_svf.update({'probe': probe_cfg}) %}
                {% set _ = migrated.append(tshort ~ " {probe=" ~ probe_cfg ~ "}") %}
            {% endif %}
        {% endif %}

        # ---< Commit to SVF if needed
        {% if new_svf %}{svh.svf_update(sv_key, new_svf)}{% endif %}
    {% endfor %}

    #======================================================< MIGRATE TOOLS_CALIBRATE TTBZ
    {% set configured_ttbz = cfg.tools_calibrate.trigger_to_bottom_z|float(0) %}
    {% set sv_probe = p.save_variables.variables.get('probe_position', {}) %}
    {% if configured_ttbz != 0 %}
        {% if 'trigger_to_bottom_z' in sv_probe and sv_probe.trigger_to_bottom_z != 0.0 %}
            {% set _ = duplicates.append("tools_calibrate ttbz: cfg=" ~ configured_ttbz ~ ", svf=" ~ sv_probe.trigger_to_bottom_z) %}
        {% else %}
            {svh.svf_update('probe_position.trigger_to_bottom_z', configured_ttbz)}
            {% set _ = migrated.append("tools_calibrate ttbz: " ~ configured_ttbz) %}
        {% endif %}
    {% endif %}

    #======================================================< APPLY SVF TO LIVE STATE
    {% for tn in p.toolchanger.tool_numbers %}
    {% set dock_svf_key = 'dock_' ~ tc.tk_lower(tn) %}
        {% set dock_svf_map = p.save_variables.variables.get(dock_svf_key, {}) %}
        {% for ax in ['x','y','z'] if ax in dock_svf_map and dock_svf_map[ax] %}
            SET_TOOL_PARAMETER T={tn} PARAMETER={ "params_park_" ~ ax } VALUE={ dock_svf_map[ax] }
            {% set _ = report_lines.append("T" ~ tn ~ " dock." ~ dax ~ "=" ~ dock_svf_map[ax]) %}
        {% endfor %}
        {% set _ = tc.update_tool_offsets_from_svf(tn, respond=report_lines.append) %}
        {% set _ = tc.update_tool_probe_from_svf(tn, respond=report_lines.append) %}
    {% endfor %}
    {% set _ = tc.update_ttbz_from_svf(respond=report_lines.append) %}

    #======================================================< USER FEEDBACK (POPUP)
    {% macro ui(txt) %}RESPOND TYPE=command MSG="action:prompt_{txt}" {% endmacro %}
    {% set giant_string = duplicates|join() ~ migrated|join() %}
    {% if migrated or duplicates %}
        {ui("begin config/migration note")}
        {% if migrated %}
            {ui("text The following were copied to your save variables:")}
            {% for line in migrated %}
                {ui("text  -" ~ line)}
            {% endfor %}
        {% endif %}
        {% if duplicates %}
            {% if duplicates and migrated %}{ui(" ")}{% endif %}
            {ui("text The following duplicates were found:")}
            {% for line in duplicates %}
                {ui("text  -" ~ line)}
            {% endfor %}
        {% endif %}
        {ui("text ─────────────────────────")}
        {ui("text How to proceed / stop this message")}
        {ui("text  • Remove trigger_to_bottom_z from [tools_calibrate]") if 'tools_calibrate' in giant_string else ''}
        {ui("text  • Remove gcode_<x/y/z>_offset from [tool T<?>]") if 'x=' in giant_string else ''}
        {ui("text  • Set the z_offset from [tool_probe T<?>] to 0") if 'probe' in giant_string else ''}
        {ui("text Or alternatively, if you are still transferring")}
        {ui("text  • Delete the corresponding keys in [save variables] to autofill them on the next restart.")}
        {ui("button Please stop annoying me|RESPOND type=command msg=action:prompt_end|error")}
        {ui("show")}
    {% else %}
        {% set _ = report_lines.append(html.bold(html.green('✔ No conflicts found between save variables and config'))) %}
    {% endif %}
    {% if report_lines %}
        {% set summary_text = html.green('Loaded ' ~ report_lines|length ~ ' setting(s) from Save Variables') %}
        { action_respond_info(html.create_summary(summary_text, report_lines|sort)) }
    {% endif %}




