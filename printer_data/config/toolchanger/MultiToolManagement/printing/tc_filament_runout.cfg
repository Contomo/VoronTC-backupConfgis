[gcode_macro FILAMENT_RUNOUT]
variable_runout_delay:5 # <- how many seconds after runout to trigger the runout
variable_active_config:{}
gcode:
    {% import toolchanger_helper as tch with context %}

    #───< shorts
    {% set p, th, tc = printer, printer.toolhead, printer.toolchanger %}
    {% set tcs       = p['gcode_macro _toolchanger_settings'] %}
    {% set now       = estimated_print_time %}
    {% set state     = p.print_stats.state|lower %}
    
    {% set action = 'open_ui' %}
    
    #------------------------------------------------------------------------------------------------------------------
    #───< update variables and temps if inserted/removed
    {% if 'REMOVE' in params %}
        {% set tn, action = params.REMOVE|int, 'removed' %}
        {tch.svf_update(variables_key, {tn: False})}
        {tch.svf_update('recent_tooltemps',  {tn: none })}
        _UNIFIED_RESPOND MSG="?t?pFil ?t?s0?mfilament removed"

    {% elif 'INSERT' in params %}
        {% set tn, action = params.INSERT|int, 'inserted' %}
        {tch.svf_update(variables_key, {tn: True})}
        _UNIFIED_RESPOND MSG="?t?pT0_Fil ?t?s0?mfilament inserted"
    {% endif %}

    #------------------------------------------------------------------------------------------------------------------
    {% if state == 'printing' and action == 'removed' %}
        #───< record time of runout and extruder pos, prepare for action
        {tch.gcode_var_update('FILAMENT_RUNOUT', 'active_config', {tn: {'runout_time':   now}})}
        {tch.gcode_var_update('FILAMENT_RUNOUT', 'active_config', {tn: {'runout_length': th.position[3]}})}
        {% if 'backup_tool' not in active_config.get(tn, {}) %}
            
            PAUSE
        {% else %}
            #───< assign the backup tool, que forced toolchange if it didnt happen in time or exceeded extrude "after sensor"
            {% set backup_tn = active_config.get(tn) %}
            {tch.gcode_var_update('T' ~ tn, 'tool_number', backup_tn)}
            # retract
            # actual runout logic
        {% endif %}
    {% else %}
      
    {% endif %}
    #------------------------------------------------------------------------------------------------------------------
  {tch.gcode_var_update('FILAMENT_RUNOUT', 'active_config.backup_tools',{tn: backup_tn})}


[gcode_macro _FILAMENT_RUNOUT_UI]
variable_initialized: False
variable_ui_settings: {
        'nav_color': {
            'back':  'success',
            'close': 'error'
        },
        'button_color_map': {
            'True':   'green',
            'False':  'red',
            'None':   'grey',
            'backup': 'accent'
        },
        'button_prefix':   'runout_',      # gcode_button prefix
        'svf_sensor_key':  'runout_sensors',
        'svf_settings_key':'runout_settings',
        'state_map':       {'RELEASED': 'absent', 'TRIGGERED': 'present'}
    }
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set p, tc             = printer, printer.toolchanger%}
    {% set svv               = p.save_variables.variables %}
    {% set cfg               = ui_settings %}
    {% set sens_key, set_key = cfg.svf_sensor_key, cfg.svf_settings_key %}

    # ---------------------------- helpers ----------------------------
    {%- macro ui(txt) -%}           { action_respond_info('action:prompt_' ~ txt) }       {%- endmacro -%}
    {%- macro tool_key(i) -%}       { tc.tool_names[i]|replace('tool ','') }              {%- endmacro -%}
    {%- macro tk_lower(i) -%}       { tool_key(i)|lower }                                 {%- endmacro -%}
    {%- macro btn_name(i) -%}       { 'gcode_button ' ~ cfg.button_prefix ~ tool_key(i) } {%- endmacro -%}
    {%- macro backup_arrow(bidx) -%}{ '' if bidx is none else ' -> ' ~ tool_key(bidx) }   {%- endmacro -%}
    {%- macro sensor_state(i) -%}
        { cfg.state_map.get(p[btn_name(i)].state, 'absent') if btn_name(i) in p else none }
    {%- endmacro -%}
    

    # -------------------------- one‑time init ------------------------
    {% if not initialized %}
        {% for tn in tc.tool_numbers %}
            {% set key      = tk_lower(tn) %}
            {% set defaults = {'state':'disabled','backup':none} %}
            {% set desired  = svv.get(set_key, {}).get(key, defaults) %}
            {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key, desired)}
            {tch.svf_update(set_key ~ '.' ~ key, desired)}
            {tch.svf_update(sens_key ~ '.' ~ key, sensor_state(tn))}
        {% endfor %}
        {tch.gcode_var_update('_FILAMENT_RUNOUT_UI', 'initialized', True)}
    {% endif %}

    # ------------------------- Save / Reset -------------------------
    {% if params.get('SVF') == 'SAVE' %}
        {% for tn in tc.tool_numbers %}
            {% set key = tk_lower(tn) %}
            {% set cur = p['gcode_macro FILAMENT_RUNOUT'].active_config.get(key, {}) %}
            {tch.svf_update(set_key ~ '.' ~ key, {'state':cur.get('state','disabled'),'backup':cur.get('backup',none)})}
        {% endfor %}
        {ui('text Saved current state')}
        {ui('show')}
    {% elif params.get('SVF') == 'RESET' %}
        {tch.svf_update(set_key,{})}
        {% for tn in tc.tool_numbers %}
            {% set key = tk_lower(tn) %}
            {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key,{'state':'disabled','backup':none})}
        {% endfor %}
    {% endif %}

    # --------------------------- Toggle -----------------------------
    {% if 'TOGGLE' in params %}
        {% set i = params.TOGGLE|int %}
        {% if btn_name(i) in p %}
            {% set key = tk_lower(i) %}
            {% set conf = p['gcode_macro FILAMENT_RUNOUT'].active_config.get(key,{}) %}
            {% set ns = 'enabled' if conf.get('state') != 'enabled' else 'disabled' %}
            {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ key ~ '.state',ns)}
        {% endif %}
    {% endif %}

    # ------------------- Backup assign / remove ---------------------
    {% if params.get('BACKUP') and params.get('SELECT') %}
        {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ tk_lower(params.BACKUP|int) ~ '.backup',params.SELECT|int)}
    {% elif params.get('REMOVE') %}
        {tch.gcode_var_update('FILAMENT_RUNOUT','active_config.' ~ tk_lower(params.REMOVE|int) ~ '.backup',none)}
    {% endif %}

    # ----------------------------- UI -------------------------------
    {%- macro render_main() -%}
        {ui('begin runout-settings')}
        {ui('button_group_start')}
        {% for tn in tc.tool_numbers %}
            {% set key = tk_lower(tn) %}
            {% set exists = btn_name(tn) in p %}
            {% set conf = p['gcode_macro FILAMENT_RUNOUT'].active_config.get(key,{}) %}
            {% set col = cfg.button_color_map['None'] if not exists else (cfg.button_color_map['True'] if conf.get('state') == 'enabled' else cfg.button_color_map['False']) %}
            {% set act = ' INVALID=' ~ tn if not exists else ' TOGGLE=' ~ tn %}
            {ui('button ' ~ tool_key(tn) ~ backup_arrow(conf.get('backup',none)) ~ '|_FILAMENT_RUNOUT_UI' ~ act ~ '|' ~ col)}
        {% endfor %}
        {ui('button_group_end')}
        {ui('show')}
        {ui('footer_button Backup|_FILAMENT_RUNOUT_UI BACKUP=OPEN|' ~ cfg.button_color_map['backup'])}
        {ui('footer_button Save|_FILAMENT_RUNOUT_UI SVF=SAVE|success')}
        {ui('footer_button Reset|_FILAMENT_RUNOUT_UI SVF=RESET|warning')}
        {ui('footer_button Close|RESPOND TYPE=command MSG=action:prompt_end|' ~ cfg.nav_color['close'])}
        {ui('show')}
    {%- endmacro -%}

    {%- macro render_backup_list() -%}
        {ui('begin backup-settings')}
        {ui('button_group_start')}
        {% for tn in tc.tool_numbers %}
            {% set exists = btn_name(tn) in p %}
            {% set col = cfg.button_color_map['backup'] if exists else cfg.button_color_map['None'] %}
            {% set act = 'BACKUP=' ~ tn if exists else 'INVALID=' ~ tn %}
            {% set conf = p['gcode_macro FILAMENT_RUNOUT'].active_config.get(tk_lower(tn),{}) %}
            {ui('button ' ~ tool_key(tn) ~ backup_arrow(conf.get('backup',none)) ~ '|_FILAMENT_RUNOUT_UI ' ~ act ~ '|' ~ col)}
        {% endfor %}
        {ui('button_group_end')}
        {ui('show')}
        {ui('footer_button back|_FILAMENT_RUNOUT_UI|' ~ cfg.nav_color['back'])}
        {ui('show')}
    {%- endmacro -%}

    {%- macro render_backup_select(src) -%}
        {ui('begin select backup for ' ~ tc.tool_names[src])}
        {ui('button_group_start')}
        {% set cur_bkp = p['gcode_macro FILAMENT_RUNOUT'].active_config.get(tk_lower(src),{}).get('backup',none) %}
        {% for tn in tc.tool_numbers if tn != src %}
            {% set action_color = 'REMOVE=' ~ src ~ '|' ~ cfg.button_color_map['False'] if cur_bkp == tn else 'BACKUP=' ~ src ~ ' SELECT=' ~ tn ~ '|' ~ cfg.button_color_map['backup'] %}
            {ui('button ' ~ tool_key(tn) ~ '|_FILAMENT_RUNOUT_UI ' ~ action_color)}
        {% endfor %}
        {ui('button_group_end')}
        {ui('show')}
        {ui('footer_button back|_FILAMENT_RUNOUT_UI|' ~ cfg.nav_color['back'])}
        {ui('show')}
    {%- endmacro -%}

    # decide which view to render
    {% if not params or 'TOGGLE' in params or params.get('SVF') == 'RESET' %}
        {render_main()}
    {% elif params.get('BACKUP') == 'OPEN' or 'REMOVE' in params or (params.get('BACKUP') and params.get('SELECT')) %}
        {render_backup_list()}
    {% elif params.get('BACKUP') and not params.get('SELECT') %}
        {render_backup_select(params.BACKUP|int)}
    {% endif %}






[gcode_macro T98]
description: will open the filament runout sensor selection.
gcode:
    {action_respond_info('0 is number? ' ~ ('0' is number))}
    {% set numbers = {'FOO': '1', 'BAR': 13, 'BAZ': None} %}

    {action_respond_info(numbers.items()|selectattr(1, 'number')|list|string)}


[gcode_macro _HANDLE_RUNOUT_SWAP]
description: "Delayed action to perform the physical tool swap after a runout."
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set p, tc = printer, printer.toolchanger %}
    
    # The tool that ran out is `tc.last_tool_number`
    {% set last_tn = tc.last_tool_number %}
    {% set last_tn_str = last_tn|string %}
    {% set runout_states = p.save_variables.variables.get(p['gcode_macro FILAMENT_RUNOUT'].variables_key, {}) %}

    # CRITICAL CHECK: Abort if filament was re-inserted during the delay
    {% if runout_states.get(last_tn_str, True) == False %}
        {% set active_conf = p['gcode_macro FILAMENT_RUNOUT'].active_config.get(last_tn_str, {}) %}
        {% set backup_tn = active_conf.get('backup_tool', -1) %}

        _UNIFIED_RESPOND MSG="?pRUNOUT ?s0?t?mExecuting filament backup swap: T{last_tn} -> T{backup_tn}"
        
        # The T<n> macro has already been remapped. Calling it executes the toolchange.
        # Your toolchange sequence inherently handles G-Code state, avoiding the G92/extruder position issue.
        T{last_tn}
    {% else %}
        _UNIFIED_RESPOND MSG="?pRUNOUT ?s0?t?mRunout swap for T{last_tn_str} aborted. Filament was re-inserted."
        # Restore the mapping since the swap is no longer needed
        {tch.gcode_var_update('T' ~ last_tn_str, 'tool_number', last_tn_str)}
    {% endif %}

[gcode_macro _RESTORE_RUNOUT_MAPPINGS]
description: "Restores any temporary tool mappings. Call this in PRINT_END."
gcode:
    {% import toolchanger_helper as tch with context %}
    {% for tn in printer.toolchanger.tool_numbers %}
        # Ensure T-macros point to their own tool number
        {tch.gcode_var_update('T' ~ tn, 'tool_number', tn)}
    {% endfor %}
    # Clear the in-memory runout state
    {tch.gcode_var_update('FILAMENT_RUNOUT', 'active_config', {})}
    _UNIFIED_RESPOND MSG="?pSYSTEM ?s6?t?mRestored T-macro mappings post-print."

