[gcode_macro SELECT_TOOL]
rename_existing: _SELECT_TOOL
gcode:
    {% set p, cfg = printer, printer.configfile.settings %}
    {% set tc = p.printer.eval_macro(cfg['gcode_macro _toolchanger_helper'].gcode, globals=self._TemplateReference__context).module %}
    {% set tn, ov = params.get('T', None), {} %}
    #───< abort if the toolchanger is in error state
    {% if p.toolchanger.state|lower == 'error' %}
        _toolchange_error_handler UI=OPEN
    {% else %}
        #───< validate T parameter
        {% if tn is none %}RESPOND TYPE=error MSG="SELECT_TOOL requires a parameter: T=<tool_number>"
        {% elif tn|int not in p.toolchanger.tool_numbers %}RESPOND TYPE=error MSG="Invalid tool number: T={tn}"
        {% else %}
            #───< default checkeroos
            {tc.check_tc_status()}
            {tc.check_tn_actn()}
            {tc.check_homed()}
            {% if tc.get_mounted_tn()|int == tn|int %}
                RESPOND TYPE=error MSG="Tool youre trying to select is already mounted. (not gonna ram it into the old one)"
            {% else %}
                #───< extract optional X/Y/Z overrides
                {% for ax in ['X', 'Y', 'Z'] if ax in params %}{% set _ = ov.update({ax: params.pop(ax)|float}) %}{% endfor %}
                #───< save overrides for the restore-position logic
                SET_GCODE_VARIABLE MACRO="TOOLCHANGER" VARIABLE="restore_pos_overwrite" VALUE="{ov if ov else False}"
                _SELECT_TOOL {params.items()|map('join', '=')|join(' ')}
            {% endif %}
        {% endif %}
    {% endif %}

[toolchanger]
perform_restore_move: False
before_change_gcode:
    {% if 'extruder' in tool.extruder %} # cant remeber if its None or "none" or "None"
        SET_STEPPER_ENABLE STEPPER={tool.extruder} ENABLE=0
    {% endif %}

after_change_gcode:
    TC_LOAD_SHAPERS T={tool.tool_number}

    {% if printer.print_stats.state|lower != 'printing' %}
        STOP_TOOL_PROBE_CRASH_DETECTION
    {% endif %}

    {% if 'extruder' in tool.extruder %}
        ACTIVATE_EXTRUDER EXTRUDER={tool.extruder}
    {% endif %}

    {% if "gcode_macro T" ~ tool.tool_number in printer %} # only needed if not using LEDs
        SET_GCODE_VARIABLE MACRO={'T' ~ tool.tool_number} VARIABLE=active VALUE=1
    {% endif %}
  

dropoff_gcode:
    {% set k90 = 0.4142 %}# D = k90 · R  (ligma for 90°)
    #───< get all our variables from the old tool
    {% set p, th         = printer, printer.toolhead %} 
    {% set close_y_force = tool.params_close_y|float %}
    {% set safe_y_force  = tool.params_safe_y|float %}
    {% set path_speed    = tool.params_path_speed|float %}
    {% set tool_size     = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}  
    {% set min_D         = tool.params_min_D|default(25)|float %}
    {% set fast          = tool.params_fast_speed|float %}
    {% set path          = tool.params_dropoff_path %}
    {% set cur           = th.position %} 
    {% set lim_min, lim_max  = th.axis_minimum, th.axis_maximum %} 
    {% set dock = {'x': tool['params_park_x']|float, 'y': tool['params_park_y']|float, 'z': tool['params_park_z']|float} %}

    {%- macro try_add_param(axis, path_step) -%} #adds " X12.5" for example
        {' ' ~ axis|upper ~ (dock[axis] + path_step[axis]) if axis in path_step else ''}
    {%- endmacro -%}

    {% set retreat_y    = [[cur.y, safe_y_force, (dock.y + tool_size.y)]|max, lim_max.y - tool_size.y]|min %} 
    {% set approach_y   = dock.y + tool_size.y|float %} 
    {% set path_start_y = dock.y + path[0]['y']|default(0)|float %}
    {% set path_start_z = dock.z + path[0]['z']|default(0)|float %}
    {% set close_y      = [(dock.y + path[-1]['y']) + 2, close_y_force]|max %}

    G90
    #───< Move up to the dock, and drop it off.
    G0 Z{[cur.z + 1.0, lim_max.z]|min} F{fast}
    ROUNDED_G0 Y={retreat_y}    D=50                                 F={fast}
    ROUNDED_G0 X={dock.x}       D={((safe_y_force / 4.0) * 3.0)|int} F={fast}
    ROUNDED_G0 Z={path_start_z} D={(safe_y_force / 2.1)|int}         F={fast}
    ROUNDED_G0 Y={approach_y}   D=10                                 F={fast}
    ROUNDED_G0 Y={path_start_y} D=0                                  F={fast/2}

    STOP_TOOL_PROBE_CRASH_DETECTION

    #───< run path
    {% for step in path %}
        G0{try_add_param('x', step)}{try_add_param('y', step)}{try_add_param('z', step)} F{path_speed * step.get('f', 1.0)|float}
    {% endfor %}
    
    G0 Y{close_y} F{fast} #todo safe y if no select following maye?

    #                                       (approach)
    #                              |(Dock) /
    #                              |  |_ <*           <\ (umbilicals)
    #                              |                  |
    #                              |                  |
    # the y position to retreat to | 0 ---> *  <- 350 |

pickup_gcode:
    {% set p, cfg = printer, printer.configfile.settings %}
    {% set tc = p.printer.eval_macro(cfg['gcode_macro _toolchanger_helper'].gcode, globals=self._TemplateReference__context).module %}

    #───< get all variables for the tool we want to pick up
    {% set dock     = { 'x': tool['params_park_x']|float,
                        'y': tool['params_park_y']|float, 
                        'z': tool['params_park_z']|float } %}
    {% set cur_pos       = p.toolhead.position %}
    {% set tool_size     = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}  
    {% set close_y_force = tool.params_close_y|float %}
    {% set safe_y_force  = tool.params_safe_y|float %}
    {% set fast          = tool.params_fast_speed|float %}
    {% set path          = tool.params_pickup_path %}
    {% set tn            = tool.tool_number %}

    {% set safe_y   = [safe_y_force, (dock.y + tool_size.y)]|max %}
    {% set safe_y_d = [10, (10 + (safe_y - tool_size.y) * 0.4142)]|max %} # allow scaling deviation
    {% set close_y  = [(dock.y + path[-1]['y']) + 2, close_y_force]|max %}

    {% set path_start_x  = dock.x + path[0].get('x', 0)|float %}
    {% set path_start_y  = dock.y + path[0].get('y', 0)|float %}
    {% set path_start_z  = dock.z + path[0].get('z', 0)|float %}

    #───< Move to pick it up now, 
    G90
    ROUNDED_G0 Y={close_y}                        F={fast} D=5  #todo calc point distance, scale D accordingly.
    ROUNDED_G0 X={path_start_x} Z={path_start_z}  F={fast} D=5
    ROUNDED_G0 Y={path_start_y}                   F={fast} D=0
    
    #───< wait for temp if has extruder and is heating
    {% if tc.get_tool_target(tn)|float >= tc.get_tool_temp(tn)|float + 10 %}
        M109 T{tn} S{tc.get_tool_target(tn)}
    {% endif %}


    {%- macro try_add_param(axis, path_step) -%}{' ' ~ axis|upper ~ (dock[axis] + path_step[axis]) if axis in path_step else ''}{%- endmacro -%}
    #───< Run the pickup path until we hit the 'verify' point.
    {% for step in path %}
        G0{try_add_param('x', step)}{try_add_param('y', step)}{try_add_param('z', step)} F{tool.params_path_speed|float * step.get('f', 1.0)|float}
        {% if 'verify' in step %}
            _verify_pickup T={tn}
            START_TOOL_PROBE_CRASH_DETECTION T={tn} # 
        {% endif %}
    {% endfor %}
    
    #───< overwrite restore-position, if requested
    {% set ov = p['gcode_macro TOOLCHANGER'].restore_pos_overwrite %}
    {% if ov is mapping %}
        {% for ax, v in ov.items() if ax|upper in ['X', 'Y', 'Z'] %}
            {% set off = tool['gcode_' ~ ax|lower ~ '_offset']|float %}
            {% set _ = restore_position.update({ax|upper: (v|float + off)|round(4)}) %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO="TOOLCHANGER" VARIABLE="restore_pos_overwrite" VALUE="False"
    {% endif %}

    #───< move out of docks.
    ROUNDED_G0 Y={safe_y} F={fast} D={safe_y_d}
    {% if 'Z' in restore_position %} ROUNDED_G0 Z={restore_position.Z+10} F={fast}   D=200  {% endif %}
    {% if 'X' in restore_position %} ROUNDED_G0 X={restore_position.X}    F={fast}   D=1000 {% endif %}
    {% if 'Y' in restore_position %} ROUNDED_G0 Y={restore_position.Y}    F={fast}   D=50   {% endif %}
    {% if 'Z' in restore_position %} ROUNDED_G0 Z={restore_position.Z}    F={fast/5} D=0    {% endif %}
    ROUNDED_G0 D=0
  

error_gcode: 
  {% set p, cfg = printer, printer.configfile.settings %}
  {% set tc = p.printer.eval_macro(cfg['gcode_macro _toolchanger_helper'].gcode, globals=self._TemplateReference__context).module %}

  {% set tcfs                 = p['gcode_macro _toolchanger_settings'].get('tc_failure', {}) %}
  {% set speed_div, accel_div = tcfs.get('speed_div', 1)|float(1.0), tcfs.get('accel_div', 1)|float(1.0) %}

  {% set fast_speed           = tool.params_fast_speed|float / speed_div %}
  {% set path_speed           = tool.params_path_speed|float / speed_div %} 
  {% set path                 = tool.params_pickup_path %}
  {% set dock                 = { 'x': tool['params_park_x']|float,
                                  'y': tool['params_park_y']|float, 
                                  'z': tool['params_park_z']|float } %}
  
  _UNIFIED_RESPOND MSG="?terror_gcode?pPICKUP_FAILURE ?t?s4?mtoolchange failure. saving tooltemps."

  {tc.divide_vel(speed_div, accel_div)}
  {tc.save_tool_targets_to_variable(macro='TOOLCHANGER', variable='tool_temps', turn_heaters_off=True)}
  
  _UNIFIED_RESPOND MSG="?terror_gcode?pPICKUP_FAILURE ?t?s4?mReversing path"

  {%- macro try_add_param(axis, path_step) -%}{' ' ~ axis|upper ~ (dock[axis] + path_step[axis]|float) if axis in path_step else ''}{%- endmacro -%}
  #───< reverse the path starting from verify
  {% set ns = namespace(move=False) %}
  {% for step in path|reverse %}
        {% set ns.move = true if 'verify' in step else ns.move %}
        {% if ns.move %}
            G0{try_add_param('x', step)}{try_add_param('y', step)}{try_add_param('z', step)} F{path_speed * step.get('f', 1.0)|float}
        {% endif %}
  {% endfor %}

  ROUNDED_G0 Y={tool.params_safe_y} F={fast_speed} D=40
  ROUNDED_G0 D=0
  
  _toolchange_error_handler UI=1 T={tool.tool_number}
  PAUSE_BASE


recover_gcode:
    {% set p, cfg = printer, printer.configfile.config %}
    {% set tc = p.printer.eval_macro(cfg['gcode_macro _toolchanger_helper'].gcode, globals=self._TemplateReference__context).module %}
    {% set main_macro  = p['gcode_macro TOOLCHANGER'] %}

    #───< get all parameters for the tool we’re restoring
    {% set dock = {
        'x': tool.params_park_x|float,
        'y': tool.params_park_y|float,
        'z': tool.params_park_z|float
    } %}
    {% set tool_size     = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}
    {% set close_y_force = tool.params_close_y|float %}
    {% set safe_y_force  = tool.params_safe_y|float %}
    {% set fast          = tool.params_fast_speed|float %}
    {% set tn            = tool.tool_number %}

    #───< dont allow crashing into docks, even with wrong settings ^^
    {% set safe_y   = [safe_y_force, (dock.y + tool_size.y)]|max %}
    {% set safe_y_d = [10, (10 + (safe_y - tool_size.y) * 0.4142)]|max %}

    #───< re-heat any tools that were cooled during failure
    {tc.restore_tool_targets_from_variable('TOOLCHANGER', 'tool_temps', 'M109')}

    #───< move clear of dock if the head is still inside
    {% if p.toolhead.position[2] > (dock.z - 20) and p.toolhead.position[1] < (safe_y) %}
        ROUNDED_G0 Y={safe_y} F={fast} D={safe_y_d}
    {% endif %}

    #───< overwrite restore-position, if requested
    {% set ov, rp = main_macro.restore_pos_overwrite, restore_position %}
    {% if ov is mapping %}
        {% for ax, v in ov.items() if ax|upper in ['X', 'Y', 'Z'] %}
            {% set off = tool['gcode_' ~ ax|lower ~ '_offset']|float %}
            {% set _ = rp.update({ax|upper: (v|float + off)|round(4)}) %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO="TOOLCHANGER" VARIABLE="restore_pos_overwrite" VALUE="False"
    {% endif %}

    #───< reset accels and velocities in case they are still failure scaled.
    {tc.divide_vel}

    #───< run the restore moves
    {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z+20} F={fast}   D=200  {% endif %}
    {% if 'X' in rp %} ROUNDED_G0 X={rp.X}    F={fast}   D=1000 {% endif %}
    {% if 'Y' in rp %} ROUNDED_G0 Y={rp.Y}    F={fast}   D=50   {% endif %}
    {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z}    F={fast/5} D=0    {% endif %}
    ROUNDED_G0 D=0

    RESUME_BASE


[gcode_macro _verify_pickup]
gcode:
    {% set p, cfg = printer, printer.configfile.settings %}
    {% set tc = p.printer.eval_macro(cfg['gcode_macro _toolchanger_helper'].gcode, globals=self._TemplateReference__context).module %}
    {% if tc.get_mounted_tn()|int != params.T|int %}
        SELECT_TOOL_ERROR
    {% endif %}




[gcode_macro T99]
gcode:
    TOOLCHANGER
  #RESPOND MSG="<div style='display:flex; align-items:center; gap:0.5em; padding:0.4em 0; font-family:sans-serif;'><a class='command' style='display:flex; align-items:center; text-decoration:none; padding:0.3em 0.6em; background:rgb(50,50,50); border-radius:6px; color:white; border:1px solid rgb(80,80,80);' title='Toggle T0 LEDs' href='SET_LED COLOR=white'><svg style='height:16px; width:16px; margin-right:6px;' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='white' d='M20,11H23V13H20V11M1,11H4V13H1V11M13,1V4H11V1H13M4.92,3.5L7.05,5.64L5.63,7.05L3.5,4.93L4.92,3.5M16.95,5.63L19.07,3.5L20.5,4.93L18.37,7.05L16.95,5.63M12,6A6,6 0 0,1 18,12C18,14.22 16.79,16.16 15,17.2V19A1,1 0 0,1 14,20H10A1,1 0 0,1 9,19V17.2C7.21,16.16 6,14.22 6,12A6,6 0 0,1 12,6M14,21V22A1,1 0 0,1 13,23H11A1,1 0 0,1 10,22V21H14M11,18H13V15.87C14.73,15.43 16,13.86 16,12A4,4 0 0,0 12,8A4,4 0 0,0 8,12C8,13.86 9.27,15.43 11,15.87V18Z' /></svg><span>T0 LEDs</span></a><div style='width:16px; height:16px; background:rgb(255,255,255); border-radius:50%; border:1px solid rgb(100,100,100);'></div></div>"
  #RESPOND MSG="<div><hr role='separator' aria-orientation='horizontal' class='v-divider theme--dark'><div data-v-aca41388='' class='container px-0 py-2'><div data-v-aca41388='' class='row'><div data-v-aca41388='' class='pb-3 col'><div data-v-aca41388='' class='v-subheader _light-subheader theme--dark'><button data-v-aca41388='' type='button' class='v-icon notranslate v-icon--left v-icon--link theme--dark' style='font-size: 16px; height: 16px; width: 16px;'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' role='img' aria-hidden='true' class='v-icon__svg' style='font-size: 16px; height: 16px; width: 16px;'><path d='M20,11H23V13H20V11M1,11H4V13H1V11M13,1V4H11V1H13M4.92,3.5L7.05,5.64L5.63,7.05L3.5,4.93L4.92,3.5M16.95,5.63L19.07,3.5L20.5,4.93L18.37,7.05L16.95,5.63M12,6A6,6 0 0,1 18,12C18,14.22 16.79,16.16 15,17.2V19A1,1 0 0,1 14,20H10A1,1 0 0,1 9,19V17.2C7.21,16.16 6,14.22 6,12A6,6 0 0,1 12,6M14,21V22A1,1 0 0,1 13,23H11A1,1 0 0,1 10,22V21H14M11,18H13V15.87C14.73,15.43 16,13.86 16,12A4,4 0 0,0 12,8A4,4 0 0,0 8,12C8,13.86 9.27,15.43 11,15.87V18Z'></path></svg></button><span data-v-aca41388=''>Case</span><div data-v-aca41388='' class='spacer'></div><span data-v-aca41388='' class='_currentState' style='background-color: rgb(255, 191, 209);'></span></div></div></div><div data-v-aca41388='' class='v-dialog__container'><!----></div></div></div>"

[gcode_macro TOOLCHANGER]
description: "Our central object to do it all."
variable_tool_temps: None
variable_restore_pos_overwrite: False
gcode:
  {% macro ui(txt) -%}RESPOND TYPE=command MSG="action:prompt_{txt}" {%- endmacro %}

  {ui('begin Macros')}
  {ui('text Commonly needed macros:')}
  {ui('button_group_start')}
  {ui('text while printing (live adjusting offsets)')}
  {ui('button ADJUST OFFSETS|TC_ADJUST_OFFSETS_UI')}
  {ui('button_group_end')}
  {ui('button_group_start')}
  {ui('button CALIBRATE ALL TOOLS|TC_FIND_TOOL_OFFSETS')}
  {ui('button OFFSETS STATS|TC_OFFSET_STATS')}
  {ui('button_group_end')}
  {ui('show')}





[gcode_macro _auto_continue]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number|int != -1 %}
    UPDATE_DELAYED_GCODE ID=_auto_continue_loop DURATION=0
    TOOL_PROBE_CRASH_RESUME    
  {% else %}
    UPDATE_DELAYED_GCODE ID=_auto_continue_loop DURATION={params.CHECK_INTERVAL|default(1.0)|float}
  {% endif %}

[delayed_gcode _auto_continue_loop]
gcode:
  _auto_continue_retry
[gcode_macro _auto_continue_retry]
gcode:
  DETECT_ACTIVE_TOOL_PROBE
  _auto_continue

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
#   _toolchange_error_handler   #################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
[gcode_macro _toolchange_error_handler]
variable_ui_is_open: False
variable_tool_failed: None
gcode:
  {% set p = printer %}

  {% if params.T is defined %}
    {% set tool = p[p.toolchanger.tool_names[params.T|int]] %}
    SET_GCODE_VARIABLE MACRO=_toolchange_error_handler VARIABLE=tool_failed VALUE="{tool.tool_number}"
  {% elif tool_failed != None %}
    {% set tool = p[p.toolchanger.tool_names[tool_failed|int]] %}
  {% else %}
    RESPOND TYPE=error MSG="no tool, dunno what to use."
  {% endif %}
  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  # MAINSAIL UI BUILDING
  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  {% if params.UI is defined %}
    {% set ui_elements = [] %}
    {% set _ = ui_elements.append("begin Toolchange Failure Recovery") %}
    {% set _ = ui_elements.append("button_group_start") %}
    {% set _ = ui_elements.append("button 🔁 Try Again|_toolchange_error_handler RETRY=TRY|primary") %}
    {% set _ = ui_elements.append("button 🔁 Try Again but fast!|_toolchange_error_handler RETRY=TRY FAST=1|warning") %}
    {% set _ = ui_elements.append("button Detect Manual|_toolchange_error_handler MOVE_TO_MANUAL=1|primary") %}
    {% set _ = ui_elements.append("button_group_end") %}
    {% set _ = ui_elements.append("text Adjust Docking Position") %}
    {% set _ = ui_elements.append("button Reset Docking Position|_toolchange_error_handler RESET=1") %}
    {% for ax in ['X', 'Y', 'Z'] %}
      {% for inc in [-0.5, -0.1, 0.1, 0.5] %}
        {% if loop.first %}{% set _ = ui_elements.append("button_group_start") %}{% endif %}
        {% set sign = '+' if inc > 0 else '' %}
        {% set color = 'info' if ax == 'X' else ('warning' if ax == 'Y' else 'error') %}
        {% set _ = ui_elements.append("button " ~ ax ~ sign ~ inc ~ "|_toolchange_error_handler AXIS=" ~ ax ~ " AMOUNT=" ~ inc ~ "|" ~ color) %}
        {% if loop.last %}{% set _ = ui_elements.append("button_group_end") %}{% endif %}
      {% endfor %}
    {% endfor %}
    {% set _ = ui_elements.append("footer_button ✅ continue|_toolchange_error_handler CONTINUE=1|success") %}
    {% set _ = ui_elements.append("footer_button ❌ cancel|_toolchange_error_handler CANCEL=1|error") %}
    {% set _ = ui_elements.append("show") %}
  {% for element in ui_elements %}
    RESPOND TYPE=command MSG="{'action:prompt_' ~ element}"
  {% endfor %}
  {% endif %}

  # ────────────| UI Button Actions |────────────
  {% set tc_fail_cfg = p['gcode_macro _toolchanger_settings'].get('tc_failure', {}) %}
  {% set fail_speed_div = tc_fail_cfg.get('speed_divider', 1)|float %}
  {% set fail_accel_div = tc_fail_cfg.get('accel_divider', 1)|float %}
  # ───| Cancel print |───
  {% if params.CANCEL is defined %}
    CANCEL_PRINT
    RESPOND TYPE=command MSG="action:prompt_end"
  {% endif %}
  # ───| continue if possible |───
  {% if params.CONTINUE is defined %}
  {% set actn = printer.tool_probe_endstop.active_tool_number|int %}
    {% if tool.tool_number == actn %}
      RESPOND TYPE=command MSG="action:prompt_end"
      M400
      INITIALIZE_TOOLCHANGER RECOVER=1
    {% endif %}
  {% endif %}
  # ───| adjust docking position |───
  {% if params.AXIS is defined and params.AMOUNT is defined %}
    {% set axis = params.AXIS|lower %}
    {% set amt = params.AMOUNT|float %}
    {% set param_key = "params_park_" ~ axis %}
    {% set current_val = tool[param_key]|float %}
    {% set updated_val = (current_val + amt)|round(3) %}
    SET_TOOL_PARAMETER T={tool.tool_number} PARAMETER={param_key} VALUE={updated_val}
    RESPOND TYPE=echo MSG="Adjusted tool T{tool.tool_number} {axis.upper()} park pos to {updated_val}"
  {% endif %}
  # ───| Reset docking position |───
  {% if params.RESET is defined %}
    {% for axis in ['x', 'y', 'z'] %}
      {% set param_key = "params_park_" ~ axis %}
      RESET_TOOL_PARAMETER T={tool.tool_number} PARAMETER={param_key}
    {% endfor %}
  {% endif %}
  # ───| Move to position to manually place toolhead on shuttle. |───
  {% if params.MOVE_TO_MANUAL is defined %}
    DETECT_ACTIVE_TOOL_PROBE
    {% set safe_y = tool.params_safe_y|float %}
    {% set fast = tool.params_fast_speed|float // fail_speed_div %}
    ROUNDED_G0 Y={safe_y} F={fast} D=40
    ROUNDED_G0 D=0
    #ROUNDED_G0 X=175 F={fast} D=0
  {% endif %}

  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  # RETRY LOGIC BELOW
  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  {% if params.RETRY is defined %}
    {% set path = tool.params_pickup_path %}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set ps = tool.params_path_speed|float if params.FAST is defined else tool.params_path_speed|float // fail_speed_div %}
    {% set fast = tool.params_fast_speed|float if params.FAST is defined else tool.params_fast_speed|float // fail_speed_div %}
    {% set close_y = tool.params_close_y|float %}
    {% set safe_y = tool.params_safe_y|float %}
    
    {% set ns = namespace(move=false) %}

    # ───| Retry docking |───
    {% if params.RETRY == 'TRY' %}
      _DEBUG_RESPOND MSG="$_toolchange_error_handler$ | Retrying pickup for {tool.name}"

      ROUNDED_G0 Z={z + path[0]['z']|float} F={fast} D=50
      ROUNDED_G0 X={x} F={fast} D=50
      ROUNDED_G0 Y={close_y} F={fast} D=0
      G0 Y{y + path[0].get('y', 0)|float} X{x + path[0].get('x', 0)|float} Z{z + path[0].get('z', 0)|float} F{fast}
      {% set ns.move = true %}
      {% for pos in path %}
        {% if ns.move %}
          G0{% if 'x' in pos %} X{x + pos['x']|float}{% endif %}{% if 'y' in pos %} Y{y + pos['y']|float}{% endif %}{% if 'z' in pos %} Z{z + pos['z']|float}{% endif %} F{(ps * (pos.get('f', 1.0)|float))|round(2)}
        {% endif %}
        {% set ns.move = false if 'verify' in pos else ns.move %}
      {% endfor %}
      M400
      DETECT_ACTIVE_TOOL_PROBE
      UPDATE_DELAYED_GCODE ID=_verify_pickup_error_handler DURATION=0.1

    # ───| if successful, finish pickup |───
    {% elif params.RETRY == 'SUCCESS' %}
      _DEBUG_RESPOND MSG="$_toolchange_error_handler$ | Successful toolchange, keep tuning and try again or click continue to continue."
      {% for pos in path %}
        {% set ns.move = true if 'verify' in pos else ns.move %}
        {% if ns.move %}
          G0{% if 'x' in pos %} X{x + pos['x']|float}{% endif %}{% if 'y' in pos %} Y{y + pos['y']|float}{% endif %}{% if 'z' in pos %} Z{z + pos['z']|float}{% endif %} F{(ps * (pos.get('f', 1.0)|float))|round(2)}
        {% endif %}
      {% endfor %}

    # ───| If unsuccesfull, reverse again |───
    {% elif params.RETRY == 'FAIL' %}
      _DEBUG_RESPOND MSG="$_toolchange_error_handler$ | Retry failed, reversing again"
      {% for pos in path|reverse %}  
        {% if ns.move %}
          G0{% if 'x' in pos %} X{x + pos['x']|float}{% endif %}{% if 'y' in pos %} Y{y + pos['y']|float}{% endif %}{% if 'z' in pos %} Z{z + pos['z']|float}{% endif %} F{(ps * (pos.get('f', 1.0)|float))|round(2)}
        {% endif %}
        {% set ns.move = true if 'verify' in pos else ns.move %}
      {% endfor %}

    {% endif %}


  {% endif %}

[delayed_gcode _verify_pickup_error_handler]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number != -1 %}
    _toolchange_error_handler RETRY=SUCCESS
  {% else %}
    _toolchange_error_handler RETRY=FAIL
  {% endif %}








