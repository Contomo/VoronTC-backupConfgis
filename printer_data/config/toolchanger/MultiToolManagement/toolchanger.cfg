#
# contents in this file revolve around the actual toolchanger plugin.
# you shouldnt need to change much in here except for maybe the init sections.
# and stuff like the parameters.
#

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# [toolchanger] #################################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
[toolchanger]
#params_dropoff_path: [{'z':3.5, 'y':4}, {'z':0, 'y':0}, {'z':-12, 'y':0}]
#params_pickup_path: [{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0.5, 'y':2.5, 'f':0.5}, {'z':8, 'y':8}]  
#params_pickup_path: [{'z':-8, 'y':24}, {'z':-8}, {'f':0.5, 'verify':1}, {'y':3, 'z':3}]
# [{'y':3, 'z':3}, {'f':0.5}, {'z':-8}, {'z':-8, 'y':24}]
#params_changer_sc_path: [{'z':-8}, {'z':-8, 'y':24}]
#params_dock_modular_path: [{'y':3, 'z':3}]
#params_dropoff_path: [{'z':0, 'y':4}, {'z':0, 'y':0}, {'z':-12, 'y':0}]
#params_pickup_path: [{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0, 'y':0}, ]
#params_dropoff_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
#params_pickup_path: [{'z':-10, 'y':16}, {'z':-10, 'y':0}, {'z':0, 'y':0, 'f':0.5, 'verify':1}, {'y':5.5, 'z':0}, {'y':9.5, 'z':2}, {'y':9.5 ,'z':4}]
#params_sc_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
#params_sc_path: [{'z':5, 'y':60}, {'z':5, 'y':0}, {'z':0, 'y':0}, {'z':-6, 'y':0}, {'z':-6, 'y': 10}]
#params_stealthchanger_xol_path: [{'y':59, 'z':17.5},{'y':5, 'z':17.5},{'y':5, 'z':0.2},{'y':0.5, 'z':0.1},{'z':0, 'y':0, 'f':0.5},{'z':-10, 'y':0}, {'z':-10, 'y':16}]

t_command_restore_axis: # DONT! define this in our settings please!
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# before_change_gcode ###########################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
before_change_gcode:
  {% set tn = tool.name|replace('tool ', '') %}
  {% if tool.extruder %}
    SET_STEPPER_ENABLE STEPPER={tool.extruder} ENABLE=0
    _DEBUG_RESPOND MSG="$before_change_gcode$ | disabled extruder: {tool.extruder}"
  {% endif %}
  # set LEDS
  STATUS_CHANGING T={tool.tool_number}
  _DEBUG_RESPOND MSG="$before_change_gcode$ | ran for {tn}"

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# after_change_gcode ############################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
after_change_gcode:
  {% set tn = tool.name|replace('tool ', '') %}
  # load shapers
  LOAD_SHAPERS T={tool.tool_number}
  # stop crash detection if we dont need it.
  {% if not printer['gcode_macro PRINT_START'].printing %}
      STOP_TOOL_PROBE_CRASH_DETECTION
  {% endif %}
  # activate extruder if it has one.
  {% if tool.extruder %}
    SET_STEPPER_ENABLE STEPPER={tool.extruder} ENABLE=1
    ACTIVATE_EXTRUDER EXTRUDER={tool.extruder}
    _DEBUG_RESPOND MSG="$after_change_gcode$ | Activated extruder: {tool.extruder}"
  {% endif %}

  {% if "gcode_macro " ~ tn in printer %}
    SET_GCODE_VARIABLE MACRO={tn} VARIABLE=active VALUE=1
  {% endif %}
  _DEBUG_RESPOND MSG="$after_change_gcode$ | ran for {tn}"

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# dropoff_gcode #################################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
dropoff_gcode:
    # ----------------------------------------
    # get all our variables from the old tool
    # ----------------------------------------
    {% set x = tool.params_park_x|float %} 
    {% set y = tool.params_park_y|float %} 
    {% set z = tool.params_park_z|float %}
    {% set safe_y = tool.params_safe_y|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_dropoff_path %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_pos = printer.toolhead.position %}
    G90
    # set buttonm/led color
    SET_GCODE_VARIABLE MACRO="{tool.name|replace('tool ', '')}" VARIABLE=color VALUE="'{printer['gcode_macro _toolchanger_settings'].toolchange_dropoff_color}'"
    STATUS_CHANGING T={tool.tool_number|string}
    _DEBUG_RESPOND MSG="$_dropoff_gcode$ | dropping {tool.name|replace('tool ', '')}"
    # stop crash detection
    STOP_TOOL_PROBE_CRASH_DETECTION
    # --------------------------------------
    # Move up to the dock, and drop it off.
    # --------------------------------------
    G0 Z{[cur_pos.z + 1.0, max_z]|min } F{fast}
    {% set mid_z = ((cur_pos[2] + path[0]['z'])|float / 2)|round(3) %}
    ROUNDED_G0 Y={[cur_pos.y, tool.params_safe_y]|max} D=50 F={fast} #Y={[cur_pos[1], tool.params_safe_y|max} dont move to save Y if we are abovve it,
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=80 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
    {% for pos in path %}
        G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float)}
    {% endfor %}
    SET_GCODE_VARIABLE MACRO={tool.name|replace('tool ', '')} VARIABLE=active VALUE=0
    M400
    G0 Y{[cur_pos.y, tool.params_close_y]|min} F{fast} #todo check if also a select opetration, if yes, dont do this?
    _DEBUG_RESPOND MSG="$_dropoff_gcode$ | dropped {tool.name|replace('tool ', '')}"
    SET_GCODE_VARIABLE MACRO={tool.name|replace('tool ', '')} VARIABLE=color VALUE="''"
    STATUS_READY T={tool.tool_number|string}
    #SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_VARS VARIABLE=fan_speed VALUE={ printer[tool.fan].speed * 255|default(0)|int }
    #M106 S0 T{tool.name|replace('tool ', '')}


# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# pickup_gcode #################################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
pickup_gcode:
  {% set p = printer %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set tx_macro = p['gcode_macro TX'] %}
  {% set restore_axes = tcs.t_command_restore_axis|string|upper %}
  {% set svf = p.save_variables.variables %}
  # --------------------------------------------------------------
  # get all variables for the tool we want to pick up
  # --------------------------------------------------------------
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set ps = tool.params_path_speed|float %}
  {% set close_y = tool.params_close_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool.params_pickup_path %}
  {% set safe_y = tool.params_safe_y|float %}
  # --------------------------------------------------------------
  # Move to pick it up now, 
  # --------------------------------------------------------------
  G90
  _DEBUG_RESPOND MSG="$_pickup_gcode$ | picking {tool.name|replace('tool ', '')}"
  ROUNDED_G0 Y={close_y} F={fast} D=5
  ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast} D=5
  ROUNDED_G0 Y={y + path[0].get('y', 0)|float} X={x + path[0].get('x', 0)|float} F={fast} D=0 #ROUNDED_G0 Y={y + path[0]['y']|float} F={fast} D=0 $$$ [-1]?
  # wait for temp if has extruder and is heating
  {% if tool.extruder and printer[tool.extruder].target > 0 %}
      M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
  {% endif %}
  # --------------------------------------------------------------
  # Run the pickup path until we hit the 'verify' point.
  # --------------------------------------------------------------
  {% for pos in path %}
    {% set speed = tool.params_path_speed %}
    G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{ps|float * (pos.get('f', 1.0)|float)}
    {% if 'verify' in pos %}
      DETECT_ACTIVE_TOOL_PROBE
      _verify_pickup TN={tool.tool_number}
      START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number} # 
    {% endif %}
  {% endfor %}

  STATUS_CHANGED T={tool.tool_number|string}

  TC_LOAD_OFFSETS T={tool.tool_number} SILENT=YES

  # ----------------------------------------------------
  # Get old tool objects, offsets, and global z offset.
  # ----------------------------------------------------
  {% if tx_macro.old_tn|int != -1 %} # if no old tool, assume pos is already gcode.
    {% set old_tool = p[p.toolchanger.tool_names[tx_macro.old_tn|int]] %} # get from macro
    {% set old_key = 'offsets_' ~ old_tool.name|replace('tool ', '')|lower %}
    # get old offsets eiter from SVF or fallback to tool. 
    {% if old_key not in svf %} {% set old_off = {"x":old_tool.gcode_x_offset, "y":old_tool.gcode_y_offset, "z":old_tool.gcode_z_offset} %} _WARNING_RESPOND MSG="$RESTORE_POSITION$ | save variables key wasnt found, fallback to regular gcode offsets. This is highly UNRECOMMENDED!"
    {% else %} {% set old_off = svf[old_key]|default({"x":0, "y":0, "z":0}) %}{% endif %}
  {% else %} {% set old_off = {"x":0, "y":0, "z":0} %}
  {% endif %}
  {% set global_z_offset = tx_macro.global_z_offset|default(0)|float %}
  # -------------------------------------------------------------------------------------
  # Check if we want to restore to a different position. if not, use the values provided.
  # note that XYZ provided to the T calls should always be absolute space! 
  # absolute position is what you retrieve from printer.toolhead.position[0-2] anyways!
  # -------------------------------------------------------------------------------------
  {% set overwrite = tx_macro.overwrite_next_restore_position %}
  {% set rp = {} %}

  # build initial position from start_position using restore_axes
  {% for axis in restore_axes %}
    {% set val = start_position[axis]|float %}
    {% set diff = (val - old_off[axis|lower]|float - (global_z_offset if axis == "Z" else 0))|round(6) %}
    {% set _ = rp.update({axis: diff}) %}
  {% endfor %}

  # overwrite values if present
  {% if overwrite is mapping %}
    {% for axis in overwrite %}
      {% if axis in ["X", "Y", "Z"] %}
        {% if overwrite[axis] %}
          {% set val = overwrite[axis]|float(start_position[axis]|float) %}
          {% set diff = (val - old_off[axis|lower]|float - (global_z_offset if axis == "Z" else 0))|round(6) %}
          {% set _ = rp.update({axis: diff}) %}
        {% else %}
          {% set _ = rp.pop(axis) %}
        {% endif %}
      {% endif %}
    {% endfor %}
    SET_GCODE_VARIABLE MACRO=TX VARIABLE=overwrite_next_restore_position VALUE="False"
  {% endif %}

  # --- move out of docks.
  ROUNDED_G0 Y={safe_y} F={fast} D=50
  #🟨────────────────────────────────────────────────────────────────────────────────────────#
  #🟨 The actual restore path being run. feel free to change this.
  #🟨 Beware of rounded path segmentation errors on very high D values tho!
  #🟨────────────────────────────────────────────────────────────────────────────────────────#
  {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z+10} F={fast} D=200 {% endif %}
  {% if 'X' in rp %} ROUNDED_G0 X={rp.X|round(3)} F={fast} D=1000 {% endif %}
  {% if 'Y' in rp %} ROUNDED_G0 Y={rp.Y|round(3)} F={fast} D=50 {% endif %}
  {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z} F={fast//5} D=0 {% endif %}
  #🟨end─────────────────────────────────────────────────────────────────────────────────────#
  STATUS_READY
  ROUNDED_G0 D=0
  SET_GCODE_VARIABLE MACRO="{tool.name|replace('tool ', '')}" VARIABLE=color VALUE="'{tcs.toolchange_active_color}'"

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# error_gcode #################################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
error_gcode: 
  _UNIFIED_RESPOND MSG="?terror_gcode?pPICKUP_FAILURE ?t?s4?mtoolchange failure. saving tooltemps."
  {% set p = printer %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set tcfs = tcs.get('tc_failure', {}) %}
  {% set cfg = p.configfile.config %}
  {% set fast = tool.params_fast_speed|float %}
  {% set close_y = tool.params_close_y|float %}
  {% set safe_y = tool.params_safe_y|float %}
  {% set path = tool.params_pickup_path %}
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set ps = tool.params_path_speed|float %} 
  # --------------------------------------------------------------
  # Save Tool temperatures.
  # --------------------------------------------------------------
  {% set temps = {} %}
  {% for tn in p.toolchanger.tool_names %}
    {% set tool_obj = p[tn] %}
    {% set extruder = tool_obj.extruder %}
    {% if extruder and extruder in p %}
      {% set _ = temps.update({tool_obj.tool_number|string: p[extruder].target|float}) %}
      # turn off heaters.
      M104 T{tool_obj.tool_number} S0
    {% endif %}
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=TX VARIABLE=toolchange_failure_temps VALUE="{temps}"
  # Other info we may need.#todo dont nee this, gcode namestate internal
  #SET_GCODE_VARIABLE MACRO=TX VARIABLE=toolchange_failure_info VALUE="'{'accel': p.toolhead.max_accel|float, 'velocity': p.toolhead.max_velocity|float}'"
  # Change accel and velocity now.
  SET_VELOCITY_LIMIT VELOCITY={(p.toolchanger.params_fast_speed|float / tcfs.get('speed_div', 1))|int} ACCEL={(cfg.printer.max_accel|float / tcfs.get('accel_div', 1))|int}
  # set leds and button to error status
  SET_GCODE_VARIABLE MACRO="{tool.name|replace('tool ', '')}" VARIABLE=color VALUE="'{tcs.toolchange_error_color}'"
  STATUS_ERROR T={tool.tool_number|string}
  # --------------------------------------------------------------
  # reverse the path starting from verify
  # --------------------------------------------------------------
  {% set ns = namespace(move=False) %}
  {% for pos in path|reverse %}
    {% set ns.move = true if 'verify' in pos else ns.move %}
    {% if ns.move %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{(ps|float * (pos.get('f', 1.0)|float) / tcfs.get('speed_div', 1))|round(2)}
    {% endif %}
  {% endfor %}
  #🟨────────────────────────────────────────────────────────────────────────────────────────#
  #🟨 From here we can decide on what to do after a toolchange failure.
  #🟨────────────────────────────────────────────────────────────────────────────────────────#

  # --------------------------------------------------------------
  # Below may start to tinker with what to do from here.
  # Currently we just move to a default position, and pause.
  # --------------------------------------------------------------
  ROUNDED_G0 Y={safe_y} F={fast // tcfs.get('speed_div', 1)} D=40
  #ROUNDED_G0 X=175 F={fast/ fail_speed_div} D=0
  ROUNDED_G0 D=0

  _toolchange_error_handler UI=1 T={tool.tool_number}
  PAUSE_BASE

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# recover_gcode #################################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
recover_gcode:
  {% set p = printer %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% set tx_macro = p['gcode_macro TX'] %}
  {% set restore_axes = tcs.t_command_restore_axis|string|upper %}
  {% set svf = p.save_variables.variables %}
  # --------------------------------------------------------------
  # get all variables for the tool we want to pick up
  # --------------------------------------------------------------
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set ps = tool.params_path_speed|float %}
  {% set close_y = tool.params_close_y|float %}
  {% set safe_y = tool.params_safe_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool.params_pickup_path %}
  # ----------------------------------------------------
  # Get old tool objects, offsets, and global z offset.
  # ----------------------------------------------------
  {% if tx_macro.old_tn|int != -1 %} # if no old tool, assume pos is already gcode.
    {% set old_tool = p[p.toolchanger.tool_names[tx_macro.old_tn|int]] %} # get from macro
    {% set old_key = 'offsets_' ~ old_tool.name|replace('tool ', '')|lower %}
    # get old offsets eiter from SVF or fallback to tool. 
    {% if old_key not in svf %} {% set old_off = {"x":old_tool.gcode_x_offset, "y":old_tool.gcode_y_offset, "z":old_tool.gcode_z_offset} %} 
    _WARNING_RESPOND MSG="$RESTORE_POSITION$ | save variables key wasnt found, fallback to regular gcode offsets. This is highly UNRECOMMENDED!"
    {% else %} {% set old_off = svf[old_key]|default({"x":0, "y":0, "z":0}) %}{% endif %}
  {% else %} {% set old_off = {"x":0, "y":0, "z":0} %}
  {% endif %}
  # -------------------------------------------------------------------------------------
  # Check if we want to restore to a different position. if not, use the values provided.
  # note that XYZ provided to the T calls should always be absolute space! 
  # absolute position is what you retrieve from p.toolhead.position[0-2] anyways!
  # -------------------------------------------------------------------------------------
  {% set global_z_offset = tx_macro.global_z_offset|default(0)|float %}
  {% set overwrite = tx_macro.overwrite_next_restore_position %}
  {% set rp = {} %}
  # build initial position from start_position using restore_axes
  {% for axis in restore_axes %}
    {% set val = start_position[axis]|float %}
    {% set diff = (val - old_off[axis|lower]|float - (global_z_offset if axis == "Z" else 0))|round(6) %}
    {% set _ = rp.update({axis: diff}) %}
  {% endfor %}
  # overwrite values if present
  {% if overwrite is mapping %}
    {% for axis in overwrite %}
      {% if axis in ["X", "Y", "Z"] %}
        {% set val = overwrite[axis]|float %}
        {% set diff = (val - old_off[axis|lower]|float - (global_z_offset if axis == "Z" else 0))|round(6) %}
        {% set _ = rp.update({axis: diff}) %}
      {% endif %}
    {% endfor %}
    SET_GCODE_VARIABLE MACRO=TX VARIABLE=overwrite_next_restore_position VALUE="False"
  {% endif %}
  TC_LOAD_OFFSETS T={tool.tool_number} SILENT=YES
  # -------------------------------------------------------------------------------------
  # Reheat all the tools.
  # -------------------------------------------------------------------------------------
  {% for tool_number, temp in tx_macro.toolchange_failure_temps.items() %}
    {% if temp > 50 %}
      M109 S{temp|round(1)} T{tool_number|int}
    {% endif %}
  {% endfor %}
  M400
  {% if p.toolhead.position[2] > (z - 20) and p.toolhead.position[1] < (close_y + 20)%}
    ROUNDED_G0 Y={safe_y} F={fast} D=50
  {% endif %}

  #🟨────────────────────────────────────────────────────────────────────────────────────────#
  #🟨 The actual restore path being run. feel free to change this.
  #🟨 Beware of rounded path segmentation errors on very high D values tho!
  #🟨────────────────────────────────────────────────────────────────────────────────────────#
  {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z+20} F={fast} D=200 {% endif %}
  {% if 'X' in rp %} ROUNDED_G0 X={rp.X|round(3)} F={fast} D=1000 {% endif %}
  {% if 'Y' in rp %} ROUNDED_G0 Y={rp.Y|round(3)} F={fast} D=50 {% endif %}
  {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z} F={fast//5} D=0 {% endif %}
  #🟨end─────────────────────────────────────────────────────────────────────────────────────#
  STATUS_READY
  ROUNDED_G0 D=0
  SET_GCODE_VARIABLE MACRO="{tool.name|replace('tool ', '')}" VARIABLE=color VALUE="'{tcs.toolchange_active_color}'"
  RESUME_BASE

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
#   _verify_pickup   ####################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
[gcode_macro _verify_pickup]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number != params.TN|int %}
    SELECT_TOOL_ERROR
  {% endif %}


# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# TX ############################################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
# this is our main user toolchanger object.
# all T commands route here, and in here you can handle stuff that happens after
# the whole select tool ([toolchanger]) section ran.
[gcode_macro TX]
description:"[/TN/][/X/][/Y/][/Z/][/SILENT/] all T calls should route here, supply with extra XYZ parameters to overwrite default restore"
variable_macro_html: "?tCall with [TN][/X/][/Y/][/Z/][/SILENT/], all T calls should route here?nXYZ parameters to overwrite default restore position.?pTX "
variable_old_tn: -1
variable_global_z_offset: 0
variable_overwrite_next_restore_position: False # this is where the restore pos dict is stored if called with XYZ
variable_toolchange_failure_temps: "{}" # contains info after crash about tool temps
gcode:
  {% set msg = macro_html %}
  {% set p = printer %}
  {% set tc = p.toolchanger %}

  {% if 'TN' in params %}
    # ------------------------------------------------------------------
    {% if tc.status != "error" %} #FIX "error" NOT A VALID STATE MY SENILE ASS FORGOT WHAT IT WAS CALLED
      {% if p.toolhead.homed_axes != "xyz" and p.configfile.settings.toolchanger.on_axis_not_homed != 'home' %}
        {% set msg = msg ~ '?s4?twant to rather home instead? edit:?n[toolchanger]?n   on_axis_not_homed: home?mcannot switch tools, not homed' %}
      {% elif p.tool_probe_endstop.active_tool_number == -1 %}
        {% set msg = msg ~ '?s4?t?mNo tool mounted. (Assuming crash, cancelling)' %}
      {% elif p.tool_probe_endstop.active_tool_number|string == params.TN %}
        {% set msg = msg ~ '?s0?t?mThis tool is already mounted....' %}
      {% elif tc.status == "changing" %} 
        {% set msg = msg ~ '?s1?t(Please dont hammer the T buttons...)?mCant change tools while changing tools.' %}
      {% elif tc.status != "ready" or tc.tool_number != p.tool_probe_endstop.active_tool_number %} 
        INITIALIZE_TOOLCHANGER 
        {% set msg = msg ~ '?s2?t?mToolchanger desynced! Reinitializing, try again.' %}
      {% else%}
        {% if p.toolhead.homed_axes != "xyz" and p.configfile.settings.toolchanger.on_axis_not_homed == 'home' %}
          {% set homing_msg = macro_html ~ '?s0?twant to rather not home instead? edit:?n[toolchanger]?n   on_axis_not_homed: abort?mHoming before changing...' %}
          _UNIFIED_RESPOND MSG="{homing_msg}"
          G28
        {% endif %}
        # ----------------------------------------------------------------------------------------
        # If X Y Z positions were passed into the T call, use that position as restore point after.
        # a usecase would for example be to print, select another tool, and restore to the purge tower
        # instead of the same place we were at before.
        # ----------------------------------------------------------------------------------------
        {% set ns = namespace(overwrite={}) %}
        {% for ax in ['X','Y','Z'] %}
          {% if ax in params and params[ax] not in ['', 'None'] %}
            {% set _ = ns.overwrite.update({ax: params[ax]|float}) %}
          {% endif %}
        {% endfor %}
        {% if ns.overwrite %}
          SET_GCODE_VARIABLE MACRO=TX VARIABLE=overwrite_next_restore_position VALUE="{ns.overwrite}"
        {% endif %}
        # ------------------------------------------------------------------
        # get old and new tool stuffs, aswell as calculate global z offset.
        # ------------------------------------------------------------------
        {% set svf = p.save_variables.variables %}
        {% set new_tn = params.TN|int %}
        {% set cur_tn = p.tool_probe_endstop.active_tool_number|int %}
        {% set cur_key = 'offsets_' ~ ((tc.tool_names[cur_tn])|replace('tool ', ''))|lower %}
        {% set global_z = (p['gcode_move'].homing_origin.z|float - svf[cur_key].get('z', 0))|round(5) %} # todo also check tool.gcode offsets
        SET_GCODE_VARIABLE MACRO=TX VARIABLE=old_tn VALUE={cur_tn}
        SET_GCODE_VARIABLE MACRO=TX VARIABLE=global_z_offset VALUE={global_z}
        _TX_INFO TNNEW={new_tn} GLOBAL_Z={global_z} TNOLD={cur_tn}
        # -------------------------------------------------------------------------
        # Actual toolchange calls, macros that get called may use the old_tn etc...
        # -------------------------------------------------------------------------
        SET_GCODE_VARIABLE MACRO="{(tc.tool_names[new_tn])|replace('tool ', '')}" VARIABLE=color VALUE="'{p['gcode_macro _toolchanger_settings'].toolchange_pickup_color}'"
        STATUS_CHANGING T={new_tn}
        
        SELECT_TOOL T={new_tn}
      {% endif %}
    {% else %}
      # todo error handling.
      _toolchange_error_handler UI=OPEN
    {% endif %}
  {% elif ('X' or 'Y' or 'Z') in params %}
    {% set msg = msg ~ '?s0?t?mStored new restore position ?c(' ~ ns.overwrite ~ ')?c' %}
  {% else %}
    {% set msg = msg ~ '?s4?t?mMissing parameter ?bTN?b  or  ?bX/Y/Z?b' %}
  {% endif %}
  {% if msg != macro_html and 'SILENT' not in params %} _UNIFIED_RESPOND MSG="{msg}" {% endif %}

[gcode_macro T99]
variable_active: 0
variable_color: "''"
variable_tool_number: 99
gcode:
  RESPOND MSG="<div style='display:flex; align-items:center; gap:0.5em; padding:0.4em 0; font-family:sans-serif;'><a class='command' style='display:flex; align-items:center; text-decoration:none; padding:0.3em 0.6em; background:rgb(50,50,50); border-radius:6px; color:white; border:1px solid rgb(80,80,80);' title='Toggle T0 LEDs' href='SET_LED COLOR=white'><svg style='height:16px; width:16px; margin-right:6px;' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='white' d='M20,11H23V13H20V11M1,11H4V13H1V11M13,1V4H11V1H13M4.92,3.5L7.05,5.64L5.63,7.05L3.5,4.93L4.92,3.5M16.95,5.63L19.07,3.5L20.5,4.93L18.37,7.05L16.95,5.63M12,6A6,6 0 0,1 18,12C18,14.22 16.79,16.16 15,17.2V19A1,1 0 0,1 14,20H10A1,1 0 0,1 9,19V17.2C7.21,16.16 6,14.22 6,12A6,6 0 0,1 12,6M14,21V22A1,1 0 0,1 13,23H11A1,1 0 0,1 10,22V21H14M11,18H13V15.87C14.73,15.43 16,13.86 16,12A4,4 0 0,0 12,8A4,4 0 0,0 8,12C8,13.86 9.27,15.43 11,15.87V18Z' /></svg><span>T0 LEDs</span></a><div style='width:16px; height:16px; background:rgb(255,255,255); border-radius:50%; border:1px solid rgb(100,100,100);'></div></div>"

  #RESPOND MSG="<div><hr role='separator' aria-orientation='horizontal' class='v-divider theme--dark'><div data-v-aca41388='' class='container px-0 py-2'><div data-v-aca41388='' class='row'><div data-v-aca41388='' class='pb-3 col'><div data-v-aca41388='' class='v-subheader _light-subheader theme--dark'><button data-v-aca41388='' type='button' class='v-icon notranslate v-icon--left v-icon--link theme--dark' style='font-size: 16px; height: 16px; width: 16px;'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' role='img' aria-hidden='true' class='v-icon__svg' style='font-size: 16px; height: 16px; width: 16px;'><path d='M20,11H23V13H20V11M1,11H4V13H1V11M13,1V4H11V1H13M4.92,3.5L7.05,5.64L5.63,7.05L3.5,4.93L4.92,3.5M16.95,5.63L19.07,3.5L20.5,4.93L18.37,7.05L16.95,5.63M12,6A6,6 0 0,1 18,12C18,14.22 16.79,16.16 15,17.2V19A1,1 0 0,1 14,20H10A1,1 0 0,1 9,19V17.2C7.21,16.16 6,14.22 6,12A6,6 0 0,1 12,6M14,21V22A1,1 0 0,1 13,23H11A1,1 0 0,1 10,22V21H14M11,18H13V15.87C14.73,15.43 16,13.86 16,12A4,4 0 0,0 12,8A4,4 0 0,0 8,12C8,13.86 9.27,15.43 11,15.87V18Z'></path></svg></button><span data-v-aca41388=''>Case</span><div data-v-aca41388='' class='spacer'></div><span data-v-aca41388='' class='_currentState' style='background-color: rgb(255, 191, 209);'></span></div></div></div><div data-v-aca41388='' class='v-dialog__container'><!----></div></div></div>"






[gcode_macro _auto_continue]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number|int != -1 %}
    UPDATE_DELAYED_GCODE ID=_auto_continue_loop DURATION=0
    TOOL_PROBE_CRASH_RESUME    
  {% else %}
    UPDATE_DELAYED_GCODE ID=_auto_continue_loop DURATION={params.CHECK_INTERVAL|default(1.0)|float}
  {% endif %}

[delayed_gcode _auto_continue_loop]
gcode:
  _auto_continue_retry
[gcode_macro _auto_continue_retry]
gcode:
  DETECT_ACTIVE_TOOL_PROBE
  _auto_continue

# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
#   _toolchange_error_handler   #################################################################################
# <───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────> #
[gcode_macro _toolchange_error_handler]
variable_ui_is_open: False
variable_tool_failed: None
gcode:
  {% set p = printer %}

  {% if params.T is defined %}
    {% set tool = p[p.toolchanger.tool_names[params.T|int]] %}
    SET_GCODE_VARIABLE MACRO=_toolchange_error_handler VARIABLE=tool_failed VALUE="{tool.tool_number}"
  {% elif tool_failed != None %}
    {% set tool = p[p.toolchanger.tool_names[tool_failed|int]] %}
  {% else %}
    RESPOND TYPE=error MSG="no tool, dunno what to use."
  {% endif %}
  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  # MAINSAIL UI BUILDING
  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  {% if params.UI is defined %}
    {% set ui_elements = [] %}
    {% set _ = ui_elements.append("begin Toolchange Failure Recovery") %}
    {% set _ = ui_elements.append("button_group_start") %}
    {% set _ = ui_elements.append("button 🔁 Try Again|_toolchange_error_handler RETRY=TRY|primary") %}
    {% set _ = ui_elements.append("button 🔁 Try Again but fast!|_toolchange_error_handler RETRY=TRY FAST=1|warning") %}
    {% set _ = ui_elements.append("button Detect Manual|_toolchange_error_handler MOVE_TO_MANUAL=1|primary") %}
    {% set _ = ui_elements.append("button_group_end") %}
    {% set _ = ui_elements.append("text Adjust Docking Position") %}
    {% set _ = ui_elements.append("button Reset Docking Position|_toolchange_error_handler RESET=1") %}
    {% for ax in ['X', 'Y', 'Z'] %}
      {% for inc in [-0.5, -0.1, 0.1, 0.5] %}
        {% if loop.first %}{% set _ = ui_elements.append("button_group_start") %}{% endif %}
        {% set sign = '+' if inc > 0 else '' %}
        {% set color = 'info' if ax == 'X' else ('warning' if ax == 'Y' else 'error') %}
        {% set _ = ui_elements.append("button " ~ ax ~ sign ~ inc ~ "|_toolchange_error_handler AXIS=" ~ ax ~ " AMOUNT=" ~ inc ~ "|" ~ color) %}
        {% if loop.last %}{% set _ = ui_elements.append("button_group_end") %}{% endif %}
      {% endfor %}
    {% endfor %}
    {% set _ = ui_elements.append("footer_button ✅ continue|_toolchange_error_handler CONTINUE=1|success") %}
    {% set _ = ui_elements.append("footer_button ❌ cancel|_toolchange_error_handler CANCEL=1|error") %}
    {% set _ = ui_elements.append("show") %}
  {% for element in ui_elements %}
    RESPOND TYPE=command MSG="{'action:prompt_' ~ element}"
  {% endfor %}
  {% endif %}

  # ────────────| UI Button Actions |────────────
  {% set tc_fail_cfg = p['gcode_macro _toolchanger_settings'].get('tc_failure', {}) %}
  {% set fail_speed_div = tc_fail_cfg.get('speed_divider', 1)|float %}
  {% set fail_accel_div = tc_fail_cfg.get('accel_divider', 1)|float %}
  # ───| Cancel print |───
  {% if params.CANCEL is defined %}
    CANCEL_PRINT
    RESPOND TYPE=command MSG="action:prompt_end"
  {% endif %}
  # ───| continue if possible |───
  {% if params.CONTINUE is defined %}
  {% set actn = printer.tool_probe_endstop.active_tool_number|int %}
    {% if tool.tool_number == actn %}
      RESPOND TYPE=command MSG="action:prompt_end"
      M400
      INITIALIZE_TOOLCHANGER RECOVER=1
    {% endif %}
  {% endif %}
  # ───| adjust docking position |───
  {% if params.AXIS is defined and params.AMOUNT is defined %}
    {% set axis = params.AXIS|lower %}
    {% set amt = params.AMOUNT|float %}
    {% set param_key = "params_park_" ~ axis %}
    {% set current_val = tool[param_key]|float %}
    {% set updated_val = (current_val + amt)|round(3) %}
    SET_TOOL_PARAMETER T={tool.tool_number} PARAMETER={param_key} VALUE={updated_val}
    RESPOND TYPE=echo MSG="Adjusted tool T{tool.tool_number} {axis.upper()} park pos to {updated_val}"
  {% endif %}
  # ───| Reset docking position |───
  {% if params.RESET is defined %}
    {% for axis in ['x', 'y', 'z'] %}
      {% set param_key = "params_park_" ~ axis %}
      RESET_TOOL_PARAMETER T={tool.tool_number} PARAMETER={param_key}
    {% endfor %}
  {% endif %}
  # ───| Move to position to manually place toolhead on shuttle. |───
  {% if params.MOVE_TO_MANUAL is defined %}
    DETECT_ACTIVE_TOOL_PROBE
    {% set safe_y = tool.params_safe_y|float %}
    {% set fast = tool.params_fast_speed|float // fail_speed_div %}
    ROUNDED_G0 Y={safe_y} F={fast} D=40
    ROUNDED_G0 D=0
    #ROUNDED_G0 X=175 F={fast} D=0
  {% endif %}

  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  # RETRY LOGIC BELOW
  # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  {% if params.RETRY is defined %}
    {% set path = tool.params_pickup_path %}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set ps = tool.params_path_speed|float if params.FAST is defined else tool.params_path_speed|float // fail_speed_div %}
    {% set fast = tool.params_fast_speed|float if params.FAST is defined else tool.params_fast_speed|float // fail_speed_div %}
    {% set close_y = tool.params_close_y|float %}
    {% set safe_y = tool.params_safe_y|float %}
    
    {% set ns = namespace(move=false) %}

    # ───| Retry docking |───
    {% if params.RETRY == 'TRY' %}
      _DEBUG_RESPOND MSG="$_toolchange_error_handler$ | Retrying pickup for {tool.name}"

      ROUNDED_G0 Z={z + path[0]['z']|float} F={fast} D=50
      ROUNDED_G0 X={x} F={fast} D=50
      ROUNDED_G0 Y={close_y} F={fast} D=0
      G0 Y{y + path[0].get('y', 0)|float} X{x + path[0].get('x', 0)|float} Z{z + path[0].get('z', 0)|float} F{fast}
      {% set ns.move = true %}
      {% for pos in path %}
        {% if ns.move %}
          G0{% if 'x' in pos %} X{x + pos['x']|float}{% endif %}{% if 'y' in pos %} Y{y + pos['y']|float}{% endif %}{% if 'z' in pos %} Z{z + pos['z']|float}{% endif %} F{(ps * (pos.get('f', 1.0)|float))|round(2)}
        {% endif %}
        {% set ns.move = false if 'verify' in pos else ns.move %}
      {% endfor %}
      M400
      DETECT_ACTIVE_TOOL_PROBE
      UPDATE_DELAYED_GCODE ID=_verify_pickup_error_handler DURATION=0.1

    # ───| if successful, finish pickup |───
    {% elif params.RETRY == 'SUCCESS' %}
      _DEBUG_RESPOND MSG="$_toolchange_error_handler$ | Successful toolchange, keep tuning and try again or click continue to continue."
      {% for pos in path %}
        {% set ns.move = true if 'verify' in pos else ns.move %}
        {% if ns.move %}
          G0{% if 'x' in pos %} X{x + pos['x']|float}{% endif %}{% if 'y' in pos %} Y{y + pos['y']|float}{% endif %}{% if 'z' in pos %} Z{z + pos['z']|float}{% endif %} F{(ps * (pos.get('f', 1.0)|float))|round(2)}
        {% endif %}
      {% endfor %}

    # ───| If unsuccesfull, reverse again |───
    {% elif params.RETRY == 'FAIL' %}
      _DEBUG_RESPOND MSG="$_toolchange_error_handler$ | Retry failed, reversing again"
      {% for pos in path|reverse %}  
        {% if ns.move %}
          G0{% if 'x' in pos %} X{x + pos['x']|float}{% endif %}{% if 'y' in pos %} Y{y + pos['y']|float}{% endif %}{% if 'z' in pos %} Z{z + pos['z']|float}{% endif %} F{(ps * (pos.get('f', 1.0)|float))|round(2)}
        {% endif %}
        {% set ns.move = true if 'verify' in pos else ns.move %}
      {% endfor %}

    {% endif %}


  {% endif %}

[delayed_gcode _verify_pickup_error_handler]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number != -1 %}
    _toolchange_error_handler RETRY=SUCCESS
  {% else %}
    _toolchange_error_handler RETRY=FAIL
  {% endif %}











