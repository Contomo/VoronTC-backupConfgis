[gcode_macro SELECT_TOOL]
rename_existing: _SELECT_TOOL
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set tn, overwrite = params.get('T', None), {} %}
    #───< abort if the toolchanger is in error state
    {% if printer.toolchanger.status|lower == 'error' %}
        _toolchange_error_handler UI=OPEN
    #───< validate T parameter
    {% elif tn is none %}
        RESPOND TYPE=error MSG="SELECT_TOOL requires a parameter: T=<tool_number>"
    {% elif tn|int not in printer.toolchanger.tool_numbers %}
        RESPOND TYPE=error MSG="Invalid tool number: T={tn}"
    {% else %}
        #───< default checkeroos
        {tch.check_tc_status()}
        {tch.check_homed()}
        {% if tch.get_mounted_tn()|int == tn|int %}
            RESPOND TYPE=error MSG="Tool youre trying to select is already mounted."
        {% else %}
            #───< extract optional X/Y/Z overrides
            {% for ax in ['X', 'Y', 'Z'] if ax in params %}{% set _ = overwrite.update({ax: params.pop(ax)|float}) %}{% endfor %}
            #───< save overrides for the restore-position logic
            {svh.gcode_var_update('TOOLCHANGER', 'restore_pos_overwrite', overwrite if overwrite else False)}
            _SELECT_TOOL {params|xmlattr}
        {% endif %}
    {% endif %}

[toolchanger]
perform_restore_move: False
params_park_x: None
params_park_y: None
params_park_z: None
after_change_gcode:
    TC_LOAD_SHAPERS T={tool.tool_number}
    {% if "gcode_macro T" ~ tool.tool_number in printer %} # only needed if not using LEDs
        SET_GCODE_VARIABLE MACRO={'T' ~ tool.tool_number} VARIABLE=active VALUE=1
    {% endif %}
  
dropoff_gcode:
    {% import toolchanger_helper as tch with context %}
    {% set k90 = 0.4142 %}# D = k90 · R  (ligma for 90°)
    #───< get all our variables from the old tool
    {% set p, th         = printer, printer.toolhead %} 
    {% set close_y_force = tool.params_close_y|float %}
    {% set safe_y_force  = tool.params_safe_y|float %}
    {% set path_speed    = tool.params_path_speed|float %}
    {% set tool_size     = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}  
    {% set min_D         = tool.params_min_D|default(25)|float %}
    {% set fast          = tool.params_fast_speed|float %}
    {% set path          = tool.params_dropoff_path %}
    {% set cur           = th.position %} 
    {% set lim_min, lim_max  = th.axis_minimum, th.axis_maximum %} 
    {% set dock = {'x': tool['params_park_x']|float, 'y': tool['params_park_y']|float, 'z': tool['params_park_z']|float} %}

    {% macro try_add_param(axis, path_step) %} #adds " X12.5" for example
        {' ' ~ axis|upper ~ (dock[axis] + path_step[axis]) if axis in path_step else ''}
    {% endmacro %}

    # ╭────────────────────────── EXPLAIN ────────────────────────────╮
    # |  why tool size, why "safe_y_force" and not just "safe_y?"     |
    # |  we clamp the safe_y because if its too low,                  |
    # |  wed smash into docks. Similarly for the other side,          |
    # |  we similarly clamp the umbilicals side, this lets us pick    |
    # |  a value which works (while also avoiding unnecicary moves)   |
    # |                                                               | 
    # |         (dock.y + tool_size.y)                                | 
    # |               (approach)                                      | 
    # |     (Dock)|     /           <\ (umbilicals)                   | 
    # | (dock.y ^)||_| <*            | (^ lim_max.y - tool_size.y)    |     
    # |           |                  |                                |     
    # |           |                  |                                | 
    # |           | 0 ---> *  <- 350 |                                |         
    # |                 (cur.y)                                       | 
    # ╰───────────────────────────────────────────────────────────────╯

    {% set retreat_y    = [[cur.y, safe_y_force, (dock.y + tool_size.y)]|max, lim_max.y - tool_size.y]|min %} 
    {% set approach_y   = dock.y + tool_size.y|float %} 
    {% set path_start_y = dock.y + path[0].get('y', 0)|float %}
    {% set path_start_z = dock.z + path[0].get('z', 0)|float %}
    {% set close_y      = [(dock.y + path[-1].get('y', 0)|float) + 2, close_y_force]|max %}

    ##───< slowly retract 2mm while on the upward move (unretracts when parked)
    #{% set extra = -2 if tch.tool_can_extrude(tool.tool_number) else 0 %}

    M82
    G90
    #───< Move up to the dock, and drop it off.
    G0 Z{[cur.z + 1.0, lim_max.z]|min} F{fast}
    ROUNDED_G0 Y={retreat_y}    D=50                                    F={fast}
    {% if (dock.x - cur.x)|abs >= min_D %} # join XZ segment if X is too short (corner ends up too sharp) 
        ROUNDED_G0 X={dock.x}       D={((safe_y_force / 4.0) * 3.0)|int} F={fast}
        ROUNDED_G0 Z={path_start_z} D={(safe_y_force / 2.1)|int}         F={fast}
    {% else %}
        ROUNDED_G0 X={dock.x} Z={path_start_z} D={((safe_y_force / 4.0) * 3.0)|int} F={fast}
    {% endif %}
    ROUNDED_G0 Y={approach_y}   D=10                                 F={fast}
    ROUNDED_G0 Y={path_start_y} D=0 F={fast/2} #{' E=' ~ (th.position.e + extra) if extra else ''} 

    STOP_TOOL_PROBE_CRASH_DETECTION

    #───< run path
    {% for step in path %}
        G0{try_add_param('x', step)}{try_add_param('y', step)}{try_add_param('z', step)} F{path_speed * step.get('f', 1.0)|float}
    {% endfor %}
    
    ##───< unretract now that its sitting on pad again
    #{'G0 E' ~ th.position.e if extra else ''}


    {"SET_STEPPER_ENABLE STEPPER=" ~ tool.extruder ~ " ENABLE=0" if 'extruder' in tool.extruder else ''}
    {% if pickup_tool is none %}
        G0 Y{retreat_y} F{fast}
    {% else %}
        G0 Y{close_y} F{fast}
    {% endif %}


pickup_gcode:
    {% import toolchanger_helper as tch with context %}
    {% set p, th         = printer, printer.toolhead %} 
    #───< get all variables for the tool we want to pick up
    {% set dock     = { 'x': tool['params_park_x']|float,
                        'y': tool['params_park_y']|float, 
                        'z': tool['params_park_z']|float } %}
    {% set cur_pos       = th.position %}
    {% set lim_min, lim_max = th.axis_minimum, th.axis_maximum %} 
    {% set tool_size     = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}
    {% set min_D         = tool.params_min_D|default(25)|float %}
    {% set close_y_force = tool.params_close_y|float %}
    {% set safe_y_force  = tool.params_safe_y|float %}
    {% set fast          = tool.params_fast_speed|float %}
    {% set path          = tool.params_pickup_path %}
    {% set tn            = tool.tool_number %}

    {% set close_y  = [(dock.y + path[-1]['y']) + 2, close_y_force]|max %}

    {% set path_start_x  = dock.x + path[0].get('x', 0)|float %}
    {% set path_start_y  = dock.y + path[0].get('y', 0)|float %}
    {% set path_start_z  = dock.z + path[0].get('z', 0)|float %}

    #───< Move to pick it up now, 
    G90
    ROUNDED_G0 Y={close_y}                        F={fast} D=5  #todo calc point distance, scale D accordingly.
    ROUNDED_G0 X={path_start_x} Z={path_start_z}  F={fast} D=5
    ROUNDED_G0 Y={path_start_y}                   F={fast} D=0
    
    #───< wait for temp if has extruder and is heating (within 10°C)
    {% if tch.get_tool_target(tn)|float >= tch.get_tool_temp(tn)|float + 10 %}
        M109 T{tn} S{tch.get_tool_target(tn)}
    {% endif %}

    {% set last_post = {'x': [dock.x], 'y': [dock.y], 'z':[dock.z] } %}

    {% macro try_add_param(axis, path_step) %}{' ' ~ axis|upper ~ (dock[axis] + path_step[axis]) if axis in path_step else ''}{% endmacro %}
    #───< Run the pickup path until we hit the 'verify' point.
    {% for step in path %}
        {% for ax in ['x', 'y', 'z'] %}{% set _ = last_post[ax].append(step[ax] + dock[ax]) if ax in step %}{% endfor %}
        G0{try_add_param('x', step)}{try_add_param('y', step)}{try_add_param('z', step)} F{tool.params_path_speed|float * step.get('f', 1.0)|float}
        {% if loop.last %} # 'verify' in step %}
            
            _verify_pickup T={tn} X={last_post.x|last} Y={last_post.y|last} Z={last_post.z|last}
        {% endif %}
    {% endfor %}
    
    #───< overwrite restore-position, if requested
    {% set ov = printer['gcode_macro TOOLCHANGER'].restore_pos_overwrite %}
    {% if ov is mapping %}
        {% for ax, v in ov.items() if ax|upper in ['X', 'Y', 'Z'] %}
            {% set off = tool['gcode_' ~ ax|lower ~ '_offset']|float %}
            {% set _ = restore_position.update({ax|upper: (v|float + off)|round(4)}) %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO="TOOLCHANGER" VARIABLE="restore_pos_overwrite" VALUE="False"
    {% endif %}

    #================================= PICKUP /\---/\ ===== RESTORE \/---\/=================================

    {% set rx = restore_position.get('X', False) %}
    {% set ry = restore_position.get('Y', False) %}
    {% set rz = restore_position.get('Z', False) %}

    {% set safe_y   = [safe_y_force, (dock.y + tool_size.y)]|max %}

    #───< possibly choose the decend Y if it falls within our min max
    {% set safe_y_max    = lim_max.y - tool_size.y - 10 %}
    {% set safe_y_min    = [safe_y_force, (dock.y + tool_size.y)]|max %}
    {% if ry and ry >= (safe_y_min + 10) and ry <= (safe_y_max - 10) %}
        {% set safe_y = ry %}
    {% endif %}

    {% set safe_y_d = [10, (10 + (safe_y - tool_size.y) * 0.4142)]|max %} # allow scaling deviation

    #───< move out of docks.
    ROUNDED_G0             Y={safe_y}   F={fast}   D={safe_y_d}

    {% if rx and (dock.x - rx)|abs < min_D and rz %}  # join XZ segment if X is too short (corner ends up too sharp) 
        ROUNDED_G0 X={rx} Z={rz + 10}  F={fast}   D=200
    {% else %}
        {% if rz %} ROUNDED_G0 Z={rz + 10}  F={fast}   D=200  {% endif %}
        {% if rx %} ROUNDED_G0 X={rx}       F={fast}   D=1000 {% endif %}
    {% endif %}
    {% if ry %} ROUNDED_G0 Y={ry}       F={fast}   D=50   {% endif %}
    {% if rz %} ROUNDED_G0 Z={rz}       F={fast/5} D=0    {% endif %}

    #───< slowly retract 2mm while on the downward move (unretracts when arrived)
    #{% set extra = -2 if tch.tool_can_extrude(tool.tool_number) else 0 %}

    ROUNDED_G0 D=0 #{' E=' ~ (th.position.e + extra) if extra and restore_position else ''} D=0
    #{'G0 E' ~ th.position.e if extra and restore_position else ''}

    {% if printer.print_stats.state|lower == 'printing' %}
        START_TOOL_PROBE_CRASH_DETECTION T={tn}
    {% endif %}

error_gcode:
    _UNIFIED_RESPOND MSG="?terror_gcode?pPICKUP_FAILURE ?t?s4?mtoolchange failure. saving tooltemps."
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set tcfs                 = printer['gcode_macro _toolchanger_settings'].get('tc_failure', {}) %}
    {% set speed_div, accel_div = tcfs.get('speed_div', 1)|float(1.0), tcfs.get('accel_div', 1)|float(1.0) %}

    {% set safe_y_force         = tool.params_safe_y|float %}
    {% set error_speed          = tool.params_fast_speed|float / speed_div %}
    {% set error_path_speed     = tool.params_path_speed|float / speed_div %} 
    {% set path                 = tool.params_pickup_path %}
    {% set tool_size            = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %} 
    {% set dock                 = { 'x': tool['params_park_x']|float,
                                    'y': tool['params_park_y']|float, 
                                    'z': tool['params_park_z']|float } %}
    {% set safe_y               = [safe_y_force, (dock.y + tool_size.y)]|max %}

    {% if printer.toolhead.position.z >= dock.z - 50 or not printer['gcode_macro _verify_pickup'].get('async', 1) %}

        {tch.divide_vel(speed_div, accel_div)}
        {svh.save_tool_targets_to_variable(macro='TOOLCHANGER', variable='tool_temps', turn_heaters_off=True)}
        
        _UNIFIED_RESPOND MSG="?terror_gcode?pPICKUP_FAILURE ?t?s4?mReversing path"

        {% macro try_add_param(axis, path_step) %}{' ' ~ axis|upper ~ (dock[axis] + path_step[axis]|float) if axis in path_step else ''}{% endmacro %}
        #───< reverse the path starting from verify
        {% set ns = namespace(move=False) %}
        {% for step in path|reverse %}
                {% set ns.move = 'verify' in step or ns.move %}
                {% if ns.move %}
                    G0{try_add_param('x', step)}{try_add_param('y', step)}{try_add_param('z', step)} F{error_path_speed * step.get('f', 1.0)|float}
                {% endif %}
        {% endfor %}

        ROUNDED_G0 Y={safe_y} F={error_speed} D=40
        ROUNDED_G0 D=0

        {tch.restore_vel()}
        PAUSE_BASE
        _TOOLCHANGE_ERROR_HANDLER UI=1 T={tool.tool_number}
        _RAISE MSG="toolchange failure, current execution was stopped."
    {% else %}
        PAUSE_BASE
        _RAISE MSG="toolchange failure, failure in verify! not at expected position! not engaging recovery!!!"
    {% endif %}
recover_gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set tcfs                 = printer['gcode_macro _toolchanger_settings'].get('tc_failure', {}) %}
    {% set speed_div, accel_div = tcfs.get('speed_div', 1)|float(1.0), tcfs.get('accel_div', 1)|float(1.0) %}
    #───< get all parameters for the tool we’re restoring
    {% set dock = {
        'x': tool.params_park_x|float,
        'y': tool.params_park_y|float,
        'z': tool.params_park_z|float
    } %}
    {% set tool_size     = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}
    {% set close_y_force = tool.params_close_y|float %}
    {% set safe_y_force  = tool.params_safe_y|float %}
    {% set fast          = tool.params_fast_speed|float %}
    {% set tn            = tool.tool_number %}

    #───< dont allow crashing into docks, even with wrong settings ^^
    {% set safe_y   = [safe_y_force, (dock.y + tool_size.y)]|max %}
    {% set safe_y_d = [10, (10 + (safe_y - tool_size.y) * 0.4142)]|max %}

    #───< re-heat any tools that were cooled during failure
    {svh.restore_tool_targets_from_variable('TOOLCHANGER', 'tool_temps', 'M109')}

    #───< move clear of dock if the head is still inside
    {% if printer.toolhead.position[2] > (dock.z - 20) and printer.toolhead.position[1] < (safe_y) %}
        ROUNDED_G0 Y={safe_y} F={fast} D={safe_y_d}
    {% endif %}

    #───< overwrite restore-position, if requested
    {% set ov, rp = printer['gcode_macro TOOLCHANGER'].restore_pos_overwrite, restore_position %}
    {% if ov is mapping %}
        {% for ax, v in ov.items() if ax|upper in ['X', 'Y', 'Z'] %}
            {% set off = tool['gcode_' ~ ax|lower ~ '_offset']|float %}
            {% set _ = rp.update({ax|upper: (v|float + off)|round(4)}) %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO="TOOLCHANGER" VARIABLE="restore_pos_overwrite" VALUE="False"
    {% endif %}

    #───< reset accels and velocities in case they are still failure scaled.
    
    {tch.divide_vel(speed_div, accel_div)}
    #───< run the restore moves
    {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z+20} F={fast}   D=200  {% endif %}
    {% if 'X' in rp %} ROUNDED_G0 X={rp.X}    F={fast}   D=1000 {% endif %}
    {% if 'Y' in rp %} ROUNDED_G0 Y={rp.Y}    F={fast}   D=50   {% endif %}
    {% if 'Z' in rp %} ROUNDED_G0 Z={rp.Z}    F={fast/5} D=0    {% endif %}
    ROUNDED_G0 D=0
    {tch.restore_vel()}

    # IMPORTANT VERY VERY IMPORTANT
    # here we have to overwrite the pause state! or else it will just shoot back up to the docks!!!
    M400
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    RESUME_BASE


[gcode_macro _verify_pickup]
variable_async: 0
gcode:
    VERIFY_TOOL_DETECTED T={params.T} ASYNC={async}
    #{% from toolchanger_helper import get_mounted_tn with context %}
    #{% if get_mounted_tn()|int != params.T|int %}
    #    SELECT_TOOL_ERROR
    #{% endif %}

[gcode_macro _RAISE]
gcode:
    {action_raise_error('<b>[_RAISE]</b> ' ~ params.MSG|default(' dunno why'))}

  #RESPOND MSG="<div style='display:flex; align-items:center; gap:0.5em; padding:0.4em 0; font-family:sans-serif;'><a class='command' style='display:flex; align-items:center; text-decoration:none; padding:0.3em 0.6em; background:rgb(50,50,50); border-radius:6px; color:white; border:1px solid rgb(80,80,80);' title='Toggle T0 LEDs' href='SET_LED COLOR=white'><svg style='height:16px; width:16px; margin-right:6px;' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='white' d='M20,11H23V13H20V11M1,11H4V13H1V11M13,1V4H11V1H13M4.92,3.5L7.05,5.64L5.63,7.05L3.5,4.93L4.92,3.5M16.95,5.63L19.07,3.5L20.5,4.93L18.37,7.05L16.95,5.63M12,6A6,6 0 0,1 18,12C18,14.22 16.79,16.16 15,17.2V19A1,1 0 0,1 14,20H10A1,1 0 0,1 9,19V17.2C7.21,16.16 6,14.22 6,12A6,6 0 0,1 12,6M14,21V22A1,1 0 0,1 13,23H11A1,1 0 0,1 10,22V21H14M11,18H13V15.87C14.73,15.43 16,13.86 16,12A4,4 0 0,0 12,8A4,4 0 0,0 8,12C8,13.86 9.27,15.43 11,15.87V18Z' /></svg><span>T0 LEDs</span></a><div style='width:16px; height:16px; background:rgb(255,255,255); border-radius:50%; border:1px solid rgb(100,100,100);'></div></div>"
  #RESPOND MSG="<div><hr role='separator' aria-orientation='horizontal' class='v-divider theme--dark'><div data-v-aca41388='' class='container px-0 py-2'><div data-v-aca41388='' class='row'><div data-v-aca41388='' class='pb-3 col'><div data-v-aca41388='' class='v-subheader _light-subheader theme--dark'><button data-v-aca41388='' type='button' class='v-icon notranslate v-icon--left v-icon--link theme--dark' style='font-size: 16px; height: 16px; width: 16px;'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' role='img' aria-hidden='true' class='v-icon__svg' style='font-size: 16px; height: 16px; width: 16px;'><path d='M20,11H23V13H20V11M1,11H4V13H1V11M13,1V4H11V1H13M4.92,3.5L7.05,5.64L5.63,7.05L3.5,4.93L4.92,3.5M16.95,5.63L19.07,3.5L20.5,4.93L18.37,7.05L16.95,5.63M12,6A6,6 0 0,1 18,12C18,14.22 16.79,16.16 15,17.2V19A1,1 0 0,1 14,20H10A1,1 0 0,1 9,19V17.2C7.21,16.16 6,14.22 6,12A6,6 0 0,1 12,6M14,21V22A1,1 0 0,1 13,23H11A1,1 0 0,1 10,22V21H14M11,18H13V15.87C14.73,15.43 16,13.86 16,12A4,4 0 0,0 12,8A4,4 0 0,0 8,12C8,13.86 9.27,15.43 11,15.87V18Z'></path></svg></button><span data-v-aca41388=''>Case</span><div data-v-aca41388='' class='spacer'></div><span data-v-aca41388='' class='_currentState' style='background-color: rgb(255, 191, 209);'></span></div></div></div><div data-v-aca41388='' class='v-dialog__container'><!----></div></div></div>"

[gcode_macro TOOLCHANGER]
description: "Our central object to do it all."
variable_tool_temps: None
variable_restore_pos_overwrite: False
gcode:


[gcode_macro _auto_continue]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number|int != -1 %}
    UPDATE_DELAYED_GCODE ID=_auto_continue_loop DURATION=0
    TOOL_PROBE_CRASH_RESUME    
  {% else %}
    UPDATE_DELAYED_GCODE ID=_auto_continue_loop DURATION={params.CHECK_INTERVAL|default(1.0)|float}
  {% endif %}

[delayed_gcode _auto_continue_loop]
gcode:
  _auto_continue_retry
[gcode_macro _auto_continue_retry]
gcode:
  M400
  DETECT_ACTIVE_TOOL_PROBE
  _auto_continue



[gcode_macro _toolchange_error_handler]
variable_ui_is_open: False
variable_tool_failed: None
variable_original_park: {}
gcode:
    {% import toolchanger_helper as tch with context %}
    {% import variable_helper    as svh with context %}

    {% set tc, svf   = printer.toolchanger, printer.save_variables.variables %}
    {% set actn      = printer.tool_probe_endstop.active_tool_number %}

    {% set fail_cfg  = printer['gcode_macro _toolchanger_settings'].get('tc_failure', {}) %}
    {% set speed_div = fail_cfg.get('speed_divider', 1)|float %}
    {% set BUTS      = printer['gcode_macro UI_CENTRAL'].ui_settings.buttons %}
    {% set COL       = printer['gcode_macro UI_CENTRAL'].ui_settings.colors %}
    {% set NAME      = '_toolchange_error_handler' %}

    {% if 'T' in params %}
        {% set tool_failed = params.T|int(None) %}
        SET_GCODE_VARIABLE MACRO={NAME} VARIABLE=tool_failed VALUE={tool_failed}
    {% endif %}

    {% set tool = printer[tc.tool_names[tool_failed]] if tool_failed|int(None) is not none else None %}
    {- action_raise_error('no tool, dunno what to use.') if not tool else '' -}

    {% set dock       = { 'x': tool.params_park_x|float,
                          'y': tool.params_park_y|float,
                          'z': tool.params_park_z|float } %}
    {% set path       = tool.params_pickup_path %}
    {% set path_speed = tool.params_path_speed|float / (1.0 if 'FAST' in params else speed_div) %}
    {% set fast       = tool.params_fast_speed|float / (1.0 if 'FAST' in params else speed_div) %}
    {% set close_y    = tool.params_close_y|float %}
    {% set safe_y     = tool.params_safe_y|float %}

    # ─────────────────────────────────────< actions/runners/helpers >───────────────────────────────────────────────────────────────
    {% macro ui(msg) %}
        {- action_respond_info('action:prompt_' ~ msg) -}
    {% endmacro %}

    {% macro create_ui() %}
        { ui('begin Toolchange Failure Recovery')}
        { ui('button_group_start')}
        { ui('button ' ~ BUTS.refresh[0] ~ ' try again|'     ~ NAME ~ ' RETRY=TRY|'        ~ BUTS.refresh[1]) }
        { ui('button ' ~ BUTS.warn[0]    ~ ' try fast|'      ~ NAME ~ ' RETRY=TRY FAST=1|' ~ BUTS.warn[1]) }
        { ui('button ' ~ BUTS.edit[0]    ~ ' detect manual|' ~ NAME ~ ' MOVE_TO_MANUAL=1|' ~ BUTS.edit[1]) }
        { ui('button_group_end')}
        { ui('text Adjust docking position')}
        { ui('button ' ~ BUTS.reset[0] ~ ' docking|' ~ NAME ~ ' RESET=1|' ~ BUTS.reset[1])}
        {% for ax, palette in [ ('X', COL.select), ('Y', COL.select2), ('Z', COL.select3) ] %}
            {ui('button_group_start')}
            {% for inc in [-0.5, -0.1, 0.1, 0.5] %}
                {% set sign = '+' if inc > 0 else '' %}
                {% set col  = palette[1] if loop.index0 in [1, 2] else palette[0] %}
                { ui('button ' ~ ax ~ sign ~ inc ~ '|' ~ NAME ~ ' AX=' ~ ax ~ ' AM=' ~ inc ~ '|' ~ col) }
            {% endfor %}
            { ui('button_group_end')}
        {% endfor %}
        { ui('footer_button ' ~ BUTS.confirm[0] ~ ' continue|' ~ NAME ~ ' CONTINUE=1|' ~ BUTS.confirm[1]) }
        { ui('footer_button ' ~ BUTS.close[0]   ~ ' cancel|'   ~ NAME ~ ' CANCEL=1|'   ~ BUTS.close[1]) }
        { ui('show')}
    {% endmacro %}

    {% macro run_path(mode) %}
        G90
        {% set m = {'from_verify_reverse': 0, 'to_verify': 1, 'from_verify': 2}.get(mode, -1) %}
        {% set steps = (path|reverse if m == 0 else path) %}
        {% set ns = namespace(emit = (m == 1)) %}
        {% for step in steps if m != -1 %}
            {% set isv = 'verify' in step %}
            {% if not ns.emit and m in [0, 2] and isv %}{% set ns.emit = True %}{% endif %}
            {% if ns.emit %}
                {% if not m == 2 %}
                    {%- set ff = (path_speed * step.get('f', 1.0)|float)|round(2) -%}
                    G0{%- for ax in ['x','y','z'] if ax in step -%}{' ' ~ ax|upper ~ (dock[ax]|float + step[ax]|float)}{%- endfor -%} F{ff}
                {% endif %}
                {% if m == 1 and isv %}{% set ns.emit = False %}{% endif %}
            {% endif %}
        {% else %}
            {action_raise_error("run_path: invalid mode")}
        {% endfor %}
    {% endmacro %}

    {% macro update_val(ax, val) %}
        {% set svpath = 'dock_' ~ tch.tk_lower(tool.tool_number) %}
        { svh.svf_update(svpath ~ '.' ~ ax, val) }
        SET_TOOL_PARAMETER T={tool.tool_number} PARAMETER={ 'params_park_' ~ ax } VALUE={val}
    {% endmacro %}

    # ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    # save current location for later. this is a new instance
    {% if 'T' in params %}
        {% set _dock = {'x': tool.params_park_x, 'y': tool.params_ark_y if false else tool.params_park_y, 'z': tool.params_park_z} %}
        { svh.gcode_var_update(NAME, 'original_park', _dock, mode='replace') }
        { run_path('from_verify_reverse') }
    {% endif %}

    {% if 'T' in params or not params %}
        { create_ui() }
        M400
    {% elif params.CANCEL is defined %}
        { ui('end') }
        M400
        CANCEL_PRINT_BASE

    {% elif params.CONTINUE is defined and tool.tool_number == actn %}
        { ui('end') }
        M400
        INITIALIZE_TOOLCHANGER RECOVER=1 T={tool_failed}
        { svh.gcode_var_update(NAME, 'tool_failed', None) }

    {% elif 'AX' in params and 'AM' in params %}
        {% set ax = params.AX|lower %}
        {% set am = params.AM|float %}
        {% set new_pos = (dock[ax]|float + am)|round(3) %}
        { update_val(ax, new_pos) }

    {% elif 'RESET' in params %}
        {% for axis in ['x', 'y', 'z'] if original_park %}
            { update_val(axis, original_park.get(axis)) }
        {% else %}
            { action_raise_error('missing original snapshot, cannot restore.') }
        {% endfor %}

    {% elif 'MOVE_TO_MANUAL' in params %}
        DETECT_ACTIVE_TOOL_PROBE
        ROUNDED_G0 Y={safe_y} F={fast} D=40
        ROUNDED_G0 D=0

    {% elif 'RETRY' in params %}
        {% if params.RETRY == 'TRY' %}
            {% if tool.tool_number == actn %}
                { run_path('from_verify_reverse') }
            {% else %}
                ROUNDED_G0 Z={dock['z'] + path[0].get('z', 0)|float} F={fast} D=50
                ROUNDED_G0 X={dock['x']} F={fast} D=50
            {% endif %}
            ROUNDED_G0 Y={close_y} F={fast} D=5
            ROUNDED_G0{%- for ax in ['x','y','z'] -%}{' ' ~ ax|upper ~ '=' ~ (dock[ax] + path[0].get(ax,0)|float)}{%- endfor -%} F={fast} D=0
            { run_path('to_verify') }
            M400
            DETECT_ACTIVE_TOOL_PROBE
            UPDATE_DELAYED_GCODE ID=_verify_pickup_error_handler DURATION=0.1
        {% elif params.RETRY == 'SUCCESS' %}
            { run_path('from_verify') }
        {% elif params.RETRY == 'FAIL' %}
            { run_path('from_verify_reverse') }
        {% endif %}
    {% endif %}
    M400

  


[delayed_gcode _verify_pickup_error_handler]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number != -1 %}
    _toolchange_error_handler RETRY=SUCCESS
  {% else %}
    _toolchange_error_handler RETRY=FAIL
  {% endif %}






