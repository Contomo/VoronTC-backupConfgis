[gcode_macro _TC_LOG_OFFSET_HISTORY]
description: "Log rolling history of tool offsets  T=  X=  Y=  Z=  [PROBE=]"
variable_macro_html: "?tAppends to the rolling log of tool offsets.?nUsage: T=  X=  Y=  Z=  [/PROBE=]?p_TC_LOG_OFFSET_HISTORY"
variable_default_max_entries: 10
variable_default_rounding:    5
gcode:
  {% set msg          = macro_html %}
  #───< fetch settings >────────────────────────────────────────────────────────────────────────────────
  {% set tcs          = printer['gcode_macro _toolchanger_settings'] %}
  {% set offset_cfg   = tcs.get('offset_history', {}) %}
  {% set svf          = printer.save_variables.variables %}
  {% set max_entries  = offset_cfg.get('max_entries', default_max_entries)|int %}
  {% set r            = offset_cfg.get('rounding',    default_rounding)|int %}

  #───< tool number >───────────────────────────────────────────────────────────────────────────────────
  {% set tn_raw = params.get('T', params.get('TOOL', '')) %}
  {% set d      = namespace(c='') %}
  {% for c in tn_raw if c.isdigit() %}{% set d.c = d.c ~ c %}{% endfor %}
  {% set tn     = d.c|default('-1')|int %}
  #───< check if enabled, if not silently exit.
  {% if 'offset_history' in tcs %}
    {% if tn >= 0 and ('X' in params) and ('Y' in params) and ('Z' in params) %}

      #───< svf key >───────────────────────────────────────────────────────────────────────────────────
      {% set short_key = printer.toolchanger.tool_names[tn]|replace('tool ', '')|lower %}
      {% set save_key  = 'offsets_history_' ~ short_key %}
      {% set old       = svf.get(save_key, {}) %}
      {% set new       = {} %}
      {% set added     = namespace(txt='') %}

      #───< rolling log update  >────────────────────────────────────────────────────────────────────────
      {% for K in ['X','Y','Z','PROBE'] if K in params %}
        {% set val        = params[K]|float|round(r) %}
        {% set prev       = old.get(K|lower, []) %}
        {% set _          = new.update({K|lower: [val] + prev[:max_entries-1]}) %}
        {% set added.txt  = added.txt + (', ' if added.txt else '') + K|lower ~ ': ' ~ val %}
      {% endfor %}

      #───< save/respond  >──────────────────────────────────────────────────────────────────────────────
      SAVE_VARIABLE VARIABLE={save_key} VALUE="{new}"
      {% set msg = (msg ~ '?s0?t?m' ~ short_key|upper ~ '?b' ~ added.txt ~ '?b added ') if 'SILENT' not in params else msg %}
    {% else %}
      {% set msg = msg ~ '?s3?t?mMissing ' ~ 'tool number' if tn < 0 else 'X, Y or Z offsets' %}
    {% endif %}
  {% endif %}

  {% if msg != macro_html %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% endif %}

#####################################################################
#   TC_OFFSET_STATS
#####################################################################
[gcode_macro TC_OFFSET_STATS]
description: "Show stats for a tool's offset log. Usage: TC_OFFSET_STATS TN=1"
variable_macro_html: "?tShow stats for a tool's offset log.?nUsage: TC_OFFSET_STATS TN=1 or none?pTC_OFFSET_STATS "
variable_pad_block_length: 6 # the size of the padded block, 
gcode:
    {% set p = printer %}
    {% if params.TOOL is defined %} # params[0]?
      {% set tool_nums = "0," + params.TOOL|default("") %}
      {% set tools_to_display = [] %}
      {% for t in tool_nums.split(",") %} 
        {% if t >= '0' and t < '99' and t|int <= p.toolchanger.tool_names|length %}
          {% set _ = tools_to_display.append(t|int) %}
        {% else %}
          {% set ns.msg = ns.msg ~ "?s3?t?m?c" ~ t ~ "?c  is not a valid toolnumber" %}
        {% endif %}
      {% endfor %}
    {% else %}
      # no param provided, assume all.
      {% set tools_to_display = p.toolchanger.tool_numbers %}
    {% endif %}

    {% set ns = namespace(msg="", pad_block = '') %}
    {% for _ in range(pad_block_length) %}
      {% set ns.pad_block = ns.pad_block ~ " " %}
    {% endfor %}

    {% for tool_num in tools_to_display %}
      {% set tn = p.toolchanger.tool_names[tool_num]|replace('tool ', '')|lower %}
      {% set key = "offsets_history_" ~ tn %}
      {% set raw = p.save_variables.variables[key]|default({}) %}
      {% if raw|length == 0 %}
        {% set ns.msg = ns.msg ~ "?s2?t?mNo history found for ?c" ~ p.toolchanger.tool_names[tool_num] ~ "?c" %}
      {% else %}
        {% set count = raw.x|length %}
        {% set ns_hist = namespace(entries=[]) %}

        {% for i in range(count) %}
          {% set _ = ns_hist.entries.append({
            "x": raw.x[i]|float,
            "y": raw.y[i]|float,
            "z": raw.z[i]|float,
            "probe": (raw.probe[i]|float) if "probe" in raw and raw.probe|length > i else None
          }) %}
        {% endfor %}
        # ----------------------------------------
        # calc sum, avg and stdt
        # ----------------------------------------
        {% set nsx = namespace(sum=0.0, sum_sq=0.0) %}
        {% set nsy = namespace(sum=0.0, sum_sq=0.0) %}
        {% set nsz = namespace(sum=0.0, sum_sq=0.0) %}
        {% set nsp = namespace(sum=0.0, sum_sq=0.0, count=0) %}

        {% for e in ns_hist.entries %}
          {% set nsx.sum = nsx.sum + e.x %}
          {% set nsx.sum_sq = nsx.sum_sq + (e.x * e.x) %}
          {% set nsy.sum = nsy.sum + e.y %}
          {% set nsy.sum_sq = nsy.sum_sq + (e.y * e.y) %}
          {% set nsz.sum = nsz.sum + e.z %}
          {% set nsz.sum_sq = nsz.sum_sq + (e.z * e.z) %}
          {% if e.probe is not none %}
            {% set nsp.sum = nsp.sum + e.probe %}
            {% set nsp.sum_sq = nsp.sum_sq + (e.probe * e.probe) %}
            {% set nsp.count = nsp.count + 1 %}
          {% endif %}
        {% endfor %}

        {% set avg_x = (nsx.sum / count) %}
        {% set avg_y = (nsy.sum / count) %}
        {% set avg_z = (nsz.sum / count) %}
        {% set std_x = (([0.0, nsx.sum_sq / count - avg_x * avg_x]|max)**0.5) %}
        {% set std_y = (([0.0, nsy.sum_sq / count - avg_y * avg_y]|max)**0.5) %}
        {% set std_z = (([0.0, nsz.sum_sq / count - avg_z * avg_z]|max)**0.5) %}

        {% if nsp.count > 0 %}
          {% set avg_p = nsp.sum / nsp.count %}
          {% set std_p = (([0.0, nsp.sum_sq / nsp.count - avg_p * avg_p]|max)**0.5) %}
        {% endif %}

        # ----------------------------------------
        # max delta over last 3 entries
        # ----------------------------------------
        {% set delta = namespace(x=0.0, y=0.0, z=0.0, p=0.0) %}

        {% set last = ns_hist.entries %}
        {% set n = last|length %}
        {% if n >= 1 %}
          {% set i_start = [0, n - 3]|max %}
          {% set x_vals = [] %}
          {% set y_vals = [] %}
          {% set z_vals = [] %}
          {% set p_vals = [] %}
          {% for i in range(i_start, n) %}
            {% set _ = x_vals.append(last[i].x) %}
            {% set _ = y_vals.append(last[i].y) %}
            {% set _ = z_vals.append(last[i].z) %}
            {% if last[i].probe is not none %}
              {% set _ = p_vals.append(last[i].probe) %}
            {% endif %}
          {% endfor %}

          {% set delta.x = (x_vals|max - x_vals|min) %}
          {% set delta.y = (y_vals|max - y_vals|min) %}
          {% set delta.z = (z_vals|max - z_vals|min) %}
          {% if p_vals|length > 1 %}
            {% set delta.p = (p_vals|max - p_vals|min) %}
          {% endif %}
        {% endif %}

        # ----------------------------------------
        # append to list
        # ----------------------------------------
        {% set ns_rows = namespace(rows=[]) %}

        {% set _ = ns_rows.rows.append({"label": "X", "avg": avg_x, "std": std_x, "delta": delta.x}) %}
        {% set _ = ns_rows.rows.append({"label": "Y", "avg": avg_y, "std": std_y, "delta": delta.y}) %}
        {% set _ = ns_rows.rows.append({"label": "Z", "avg": avg_z, "std": std_z, "delta": delta.z}) %}
        {% if nsp.count > 0 %}
          {% set _ = ns_rows.rows.append({"label": "P", "avg": avg_p, "std": std_p, "delta": delta.p}) %}
        {% endif %}
        # ----------------------------------------
        # Apply correct padding for each.
        # ----------------------------------------
        {% set ns.msg = ns.msg ~ "?n?s0?t?mStats for:?c" ~ tn|upper ~ "?c with?c" ~ count ~ "?c samples." %}

        {% for r in ns_rows.rows %}
          # calculate padding rounding for avreages (in order to round more with large values, such as probe pos)
          {% set val = r.avg %}
          {% set is_negative = val < 0 %}
          {% set int_part_len = (val|int)|string|length + (1 if is_negative else 0) %}
          {% set round_digits = [0, pad_block_length - int_part_len - 2]|max %}

          {% set a = val|round(round_digits)|string %} # mm
          {% set s = (r.std * 1000)|round(0)|string %}  # µm 
          {% set d = (r.delta * 1000)|round(0)|string %}  # µm 

          {% set pad_a = pad_block_length - a|length %}
          {% if pad_a > 0 %}{% set a = ns.pad_block[:pad_a] ~ a %}{% endif %}
          {% set a = a ~ " mm" %}

          {% set pad_s = pad_block_length - s|length %}
          {% if pad_s > 0 %}{% set s = ns.pad_block[:pad_s] ~ s %}{% endif %}
          {% set s = s ~ " µm" %}

          {% set pad_d = pad_block_length - d|length %}
          {% if pad_d > 0 %}{% set d = ns.pad_block[:pad_d] ~ d %}{% endif %}
          {% set d = d ~ " µm" %}

          # --- Avreage display
          {% set ns.msg = ns.msg ~ "?n?c" ~ r.label ~ "μ:" ~ a ~ "?c" %}
          # --- standard deiation display
          {% set ns.msg = ns.msg ~ "  ?c" ~ r.label ~ "σ:" ~ s ~ "?c" %}
          # --- max deviation of last 3 display
          {% set ns.msg = ns.msg ~ "  ?c" ~ r.label ~ "Δ:" ~ d ~ "?c" %}
        {% endfor %}

        


      {% endif %}
    {% endfor %}
  {% set ns.msg = macro_html ~ "?n?s0?t?m?cμ?c?b Avreage, ?b?cσ?c?b Standard deviation, ?b?cΔ?c?b Max delta of last 3?b" ~ ns.msg %}
  {% if 'μ:' in ns.msg or '?s2' in ns.msg or '?s3' in ns.msg %}
    {% set ns.msg = ns.msg ~ "?ddd" %}
    _UNIFIED_RESPOND MSG="{ns.msg}"
  {% endif %}








#####################################################################
#   _TC_ADJUST_TTBZ_DRIFT
#####################################################################
[gcode_macro _TC_ADJUST_TTBZ_DRIFT]
description: "Auto-adjust probe trigger_to_bottom_z drift across staged tools. Run after _TC_UPDATE_OFFSETS to apply drift correction."
variable_macro_html: "?tAuto-adjust probe trigger_to_bottom_z drift across tools?p_TC_ADJUST_TTBZ_DRIFT "
variable_key_name: "ttbz_drift"
gcode:
  {% set p = printer %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% if 'ttbz_drift_autoadjust' in tcs %}
    # ───────────────────────────────────────────────
    # Load user‑config & staged offsets
    # ───────────────────────────────────────────────
    {% set cfg = tcs.get('ttbz_drift_autoadjust', {}) %}
    {% set min_tools       = cfg.get('min_tools',       2)  |int   %}
    {% set max_drift       = cfg.get('max_drift',       0.4)|float %}
    {% set k_mad           = cfg.get('mad_k',           3)  |float %}
    {% set hist_span       = cfg.get('weight_history',  0.3)|float %}
    {% set hist_min        = cfg.get('history_min',     3)  |int   %}
    {% set hist_max        = cfg.get('history_max',     5)  |int   %}
    {% set decay_factor    = cfg.get('drift_decay',     0.9)|float %}
    {% set decay_threshold = cfg.get('decay_threshold', 0.2)|float %}
    {% set storage         = p['gcode_macro _TC_UPDATE_OFFSETS'].storage %}

    {% set r_save = (tcs.get('offset_calibration', {})).get('value_rounding', 3)|int %}

    {% if storage|length == 0 %}
      _UNIFIED_RESPOND MSG="{macro_html}?s3?t?mNo staged offsets, run _TC_UPDATE_OFFSETS first."
    {% else %}
      # ───────────────────────────────────────────────
      # Build current diffs & history‑weights
      # ───────────────────────────────────────────────
      {% set svf_vars   = p.save_variables.variables                %}
      {% set prev_pos   = svf_vars.get('probe_position', {})         %}
      {% set prev_drift = prev_pos.get(key_name, 0) |float           %}
      {% set keys       = storage.keys()     |list                  %}
      {% set diffs      = []                                        %}
      {% set hw_arr     = []                                        %}
      {% set dbg        = namespace(spans=[], hw=[], wvar=[])       %}

      {% for key in keys %}
        {% set cur = storage[key] %}
        {% if 'probe' in cur %}
          {% set old = svf_vars.get('offsets_' ~ key, {}).get('probe', 0) |float %}
          {% set _   = diffs.append(cur.probe|float - old) %}
          {% set span = 0.0 %}
          {% set hw   = 0.5 %}
          {% set hdict = svf_vars.get('offsets_history_' ~ key, {}) %}
          {% if hdict and 'probe' in hdict and hdict.probe|length >= hist_min %}
            {% set h_recent = hdict.probe[:hist_max] %}
            {% set span     = (h_recent|max - h_recent|min)|float %}
            {% set hw       = span >= hist_span and 0.0 or (1 - span / hist_span) %}
          {% endif %}
          {% set hw = hw < 0 and 0.0 or hw %}
          {% set hw = hw > 1 and 1.0 or hw %}
          {% set _  = hw_arr.append(hw) %}
          {% if debug_mode %}
            {% set _ = dbg.spans.append(span) %}
            {% set _ = dbg.hw.append(hw)    %}
          {% endif %}
        {% endif %}
      {% endfor %}

      {% set count = diffs|length %}
      {% if count == 0 %}
        _UNIFIED_RESPOND MSG="{macro_html}?s3?t?mNo probe entries found in staged offsets."
      {% endif %}

      # ───────────────────────────────────────────────
      # Median & MAD
      # ───────────────────────────────────────────────
      {% set sorted_d  = diffs|sort %}
      {% set m         = count % 2 == 1 and sorted_d[count//2] or (sorted_d[count//2-1] + sorted_d[count//2]) / 2.0 %}
      {% set absdev    = [] %}
      {% for d in diffs %}{% set _ = absdev.append((d - m)|abs) %}{% endfor %}
      {% set sorted_dev = absdev|sort %}
      {% set MAD       = count % 2 == 1 and sorted_dev[count//2] or (sorted_dev[count//2-1] + sorted_dev[count//2]) / 2.0 %}
      {% if MAD == 0 %}{% set MAD = 0.000001 %}{% endif %}

      # ───────────────────────────────────────────────
      # Combine weights (history × MAD gate)
      # ───────────────────────────────────────────────
      {% set ns = namespace(w_sum=0.0, wd_sum=0.0) %}
      {% set weights = [] %}
      {% set reject  = [] %}
      {% for i in range(count) %}
        {% set dev   = absdev[i]                                      %}
        {% set w_var = dev >= k_mad * MAD and 0.0 or 1 - dev / (k_mad * MAD) %}
        {% set w     = (hw_arr[i] * w_var)|float                     %}
        {% if w < 0 %}{% set w = 0.0 %}{% endif %}
        {% if w > 1 %}{% set w = 1.0 %}{% endif %}
        {% set _     = weights.append(w)                            %}
        {% if w < 0.05 %}{% set _ = reject.append(i)                %}{% endif %}
        {% set ns.w_sum  = ns.w_sum  + w                           %}
        {% set ns.wd_sum = ns.wd_sum + (w * diffs[i])              %}
      {% endfor %}

      # ───────────────────────────────────────────────
      # Compute new drift & apply decay
      # ───────────────────────────────────────────────
      {% if ns.w_sum == 0 or (weights|select('>',0.05)|list)|length < min_tools %}
        {% set adj    = prev_drift %}
        {% set status = 2 %}
        {% set reason = 'too much spread' %}
      {% else %}
        {% set drift  = ns.wd_sum / ns.w_sum %}
        {% if drift > max_drift %}{% set drift = max_drift %}{% elif drift < -max_drift %}{% set drift = -max_drift %}{% endif %}
        {% set adj    = drift %}
        {% set status = (drift|round(5)) == (prev_drift|round(5)) and 1 or 0 %}
      {% endif %}
      {% if ns.w_sum < decay_threshold %}
        {% set adj = prev_drift * decay_factor %}
      {% endif %}
      
      # ───────────────────────────────────────────────
      # Save drift & history
      # ───────────────────────────────────────────────
      {% set hist_cfg  = cfg.get('offset_history', {})          %}
      {% set rnd_hist  = hist_cfg.get('rounding', 3)  |int      %}
      {% set max_ent   = hist_cfg.get('max_entries', 10) |int   %}
      {% set prev_hist = svf_vars.get('offsets_history_probe', {}).get(key_name, []) %}
      {% set new_hist  = (prev_hist + [adj|round(rnd_hist)])[-max_ent:] %}
      {% set hvars     = p.save_variables.variables.get('offsets_history_probe', {}) %}
      {% set _ = hvars.update({key_name: new_hist}) %}
      SAVE_VARIABLE VARIABLE=offsets_history_probe VALUE="{hvars}"
      {% set pos = prev_pos.copy() %}
      {% set _   = pos.update({key_name: adj|round(r_save)}) %}
      SAVE_VARIABLE VARIABLE=probe_position VALUE="{pos}"

      # ───────────────────────────────────────────────
      # Apply correction to staged offsets
      # ───────────────────────────────────────────────
      {% for key in keys %}
        {% set ent = storage[key] %}
        {% if 'probe' in ent %}
          {% set _ = ent.update({'probe': ent.probe|float - adj}) %}
        {% endif %}
      {% endfor %}
      #SET_GCODE_VARIABLE MACRO=_TC_UPDATE_OFFSETS VARIABLE=storage VALUE="{storage}"

      # ───────────────────────────────────────────────
      # Build operator report
      # ───────────────────────────────────────────────
      {% set header = macro_html ~ '?s0?t?mDrift ' ~ (status == 0 and 'updated' or (status == 1 and 'unchanged (same)' or 'unchanged')) ~ ': ?c' ~ (adj|round(r_save)|string) ~ ' mm?c' %}
      {% set report = [] %}
      # Config + decay info
      {% set cfg = 'tools=' ~ count|string ~ ', hist_min=' ~ hist_min|string ~ ', hist_max=' ~ hist_max|string ~ ', span=' ~ (hist_span|string) ~ ', mad_k=' ~ (k_mad|string) %}
      {% if ns.w_sum < decay_threshold %}
        {% set cfg = cfg ~ ', decay=on(' ~ (decay_factor|string) ~ ')' %}
      {% else %}
        {% set cfg = cfg ~ ', decay=off' %}
      {% endif %}
      {% set _ = report.append('?s0?t?mConfig: ' ~ cfg) %}

      # Legend
      {% set legend = '?n[hw -> history_weight: (0-1)]?n[something mad]?n[w -> total weight]?nΣw=' ~ (ns.w_sum|round(3)|string) %}
      {% set _ = report.append('?s0?t?m?cLegend:?c ' ~ legend) %}

      # Per-tool drifts # todo padding
      {% for i in range(count) %}
        {% set d    = diffs[i]|round(r_save) %}
        {% set w    = weights[i]|round(2) %}
        {% set pct  = m == 0 and 0 or (((diffs[i]-m)/m*100)|round(2)) %}
        {% set excluded = ' ?c[excluded]?c' if i in reject %}
        {% set _ = report.append('?s0?t?m' ~ keys[i] ~ ': ' ~ (d|string) ~ ' mm' ~ ', w='   ~ (w|string) ~ ', pct=' ~ (pct|string) ~ '%' ~ excluded) %}
      {% endfor %}

      # assemble & dispatch
      {% set msg = header ~ report|join('') %}
      _UNIFIED_RESPOND MSG="{msg}"

    {% endif %}
  {% endif %}









###########################################################################################################################################
###   Below is a macro sequency to find the stdt deviations of your nudge and xyz endstops (compared to the nudge ofc)   ##################
###########################################################################################################################################
#####################################################################
#   TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY
#####################################################################
[gcode_macro TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY]
description: Compares nudge repeatability vs. homed endstop repeatability
variable_edge_offset: 15
variable_grid_count: 3
###################### storage variables used for the calculated stuffies
variable_homed_pos: ""
variable_unhomed_pos: ""
gcode:
  {% if "xyz" not in p.toolhead.homed_axes %}
      RESPOND MSG="Printer must be homed before finding tool offsets."
  {% else %}
    SET_GCODE_VARIABLE MACRO=_TC_CALIBRATION_PROBE_ACCURACY_LOOP VARIABLE=unhomed VALUE=0
    SET_GCODE_VARIABLE MACRO=_TC_CALIBRATION_PROBE_ACCURACY_LOOP VARIABLE=homed VALUE=0
    SET_GCODE_VARIABLE MACRO=TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY VARIABLE=unhomed_pos VALUE='""'
    SET_GCODE_VARIABLE MACRO=TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY VARIABLE=homed_pos VALUE='""'
    RESPOND MSG="Starting measurement loop..."
    _TC_CALIBRATION_PROBE_ACCURACY_LOOP
  {% endif %}

#####################################################################
#   _TC_CALIBRATION_PROBE_ACCURACY_LOOP
#####################################################################
[gcode_macro _TC_CALIBRATION_PROBE_ACCURACY_LOOP]
variable_homed: 0
variable_unhomed: 0
gcode:
  {% set grid_count = p["gcode_macro TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY"].grid_count|int %}
  {% set edge_offset = p["gcode_macro TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY"].edge_offset|float %}
  {% set max_x = p.configfile.config["stepper_x"]["position_max"]|float - edge_offset %}
  {% set min_x = p.configfile.config["stepper_x"]["position_min"]|float + edge_offset %}
  {% set max_y = p.configfile.config["stepper_y"]["position_max"]|float - edge_offset %}
  {% set min_y = p.configfile.config["stepper_y"]["position_min"]|float + edge_offset %}
  {% set feed = p.configfile.config["toolchanger"]["params_fast_speed"]|int %}
  {% set total_points = grid_count * grid_count %}

  {% if unhomed < total_points %}
    {% set x = min_x + (max_x - min_x) * (unhomed % grid_count) / (grid_count - 1) %}
    {% set y = min_y + (max_y - min_y) * (unhomed // grid_count) / (grid_count - 1) %}
    RESPOND MSG="Unhomed iteration {unhomed} at X={x|round(1)} Y={y|round(1)}"
    G0 X{x} Y{y} F{feed}
    {% set atn = p.tool_probe_endstop.active_tool_number|int %}
    {% set ttbz = p.configfile.settings.tools_calibrate.trigger_to_bottom_z|float %}
    {% if atn == -1 %}
      RESPOND MSG="<span class='error--text'{macro_html}<span class='warning--text'&apos;tool_probe_endstop.active_tool_number&apos; is {atn} (not valid) run &apos;DETECT_ACTIVE_TOOLPROBE&apos; to update it.'>No active tool</span>"
    {% elif atn == 0 %} # If we are T0
      STATUS_CALIBRATING_Z
      _MOVE_OVER_PROBE
      TOOL_LOCATE_SENSOR
    {% else %}
      STATUS_CALIBRATING_Z
      _MOVE_OVER_PROBE
      TOOL_CALIBRATE_TOOL_OFFSET
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_TC_CALIBRATION_PROBE_ACCURACY_LOOP VARIABLE=unhomed VALUE={unhomed+1}
    {% if p.toolchanger.params_debug_toolchanger %}
      RESPOND MSG="calling _TC_CALIBRATION_PROBE_DATA_COLLECT_LOOP"
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_TC_CALIBRATION_PROBE_DATA_COLLECT_LOOP DURATION=1

  {% elif homed < total_points %}
    {% set x = min_x + (max_x - min_x) * (homed % grid_count) / (grid_count - 1) %}
    {% set y = min_y + (max_y - min_y) * (homed // grid_count) / (grid_count - 1) %}
    RESPOND MSG="Homed iteration {homed} at X={x|round(1)} Y={y|round(1)}"
    G0 X{x} Y{y} F{feed}
    G28 X Y
    {% set atn = p.tool_probe_endstop.active_tool_number|int %}
    {% set ttbz = p.configfile.settings.tools_calibrate.trigger_to_bottom_z|float %}
    {% if atn == -1 %}
      RESPOND MSG="<span class='error--text'{macro_html}<span class='warning--text'&apos;tool_probe_endstop.active_tool_number&apos; is {atn} (not valid) run &apos;DETECT_ACTIVE_TOOLPROBE&apos; to update it.'>No active tool</span>"
    {% elif atn == 0 %} # If we are T0
      STATUS_CALIBRATING_Z
      _MOVE_OVER_PROBE
      TOOL_LOCATE_SENSOR
    {% else %}
      STATUS_CALIBRATING_Z
      _MOVE_OVER_PROBE
      TOOL_CALIBRATE_TOOL_OFFSET
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_TC_CALIBRATION_PROBE_ACCURACY_LOOP VARIABLE=homed VALUE={homed+1}
    {% if p.toolchanger.params_debug_toolchanger %}
      RESPOND MSG="calling _TC_CALIBRATION_PROBE_DATA_COLLECT_LOOP"
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_TC_CALIBRATION_PROBE_DATA_COLLECT_LOOP DURATION=1

  {% else %}
    RESPOND MSG="All measurements done. Analyzing..."
    _MOVE_TO_CENTER
    _TC_NUDGE_ANALYZE_AND_PRINT
  {% endif %}

#####################################################################
#   _TC_CALIBRATION_PROBE_DATA_COLLECT_LOOP
#####################################################################
[delayed_gcode _TC_CALIBRATION_PROBE_DATA_COLLECT_LOOP]
gcode:
  {% if printer.toolchanger.params_debug_toolchanger %}
  RESPOND MSG="_TC_CALIBRATION_PROBE_DATA_COLLECT_LOOP start"
  {% endif %}
  
  {% set loop = printer["gcode_macro _TC_CALIBRATION_PROBE_ACCURACY_LOOP"] %}
  {% set parent = printer["gcode_macro TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY"] %}
  {% set current_homed = loop.homed|int %}
  {% set current_unhomed = loop.unhomed|int %}
  {% set grid_count = parent.grid_count|int %}
  {% set current_homed_pos_string = parent.homed_pos|string %}
  {% set current_unhomed_pos_string = parent.unhomed_pos|string %}
  {% set last_x = printer.tools_calibrate.last_x_result|float|round(4) %}
  {% set last_y = printer.tools_calibrate.last_y_result|float|round(4) %}
  {% set last_z = printer.tools_calibrate.last_z_result|float|round(4) %}
  {% set last_x_string = last_x|string %}
  {% set last_y_string = last_y|string %}
  {% set last_z_string = last_z|string %}

  ######## horrors beyond comprehension follow after this point. 
  ######## we are converting our whole array of coordinates into a string and making a really long string of coordinate points just to later split it.
  {% if current_unhomed < grid_count * grid_count %}
    {% set stringAddition = current_unhomed_pos_string|string + "u_x" + last_x_string + "y" + last_y_string + "z" + last_z_string + ";" %}
    SET_GCODE_VARIABLE MACRO=TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY VARIABLE=unhomed_pos VALUE='"{stringAddition}"'
  {% elif current_homed < grid_count * grid_count %}
    {% set stringAddition = current_homed_pos_string|string + "h_x" + last_x_string + "y" + last_y_string + "z" + last_z_string + ";" %}
    SET_GCODE_VARIABLE MACRO=TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY VARIABLE=homed_pos VALUE='"{stringAddition}"'
  {% endif %}
  {% if printer.toolchanger.params_debug_toolchanger %}
  RESPOND MSG="calling _TC_CALIBRATION_PROBE_ACCURACY_LOOP"
  {% endif %}
  _TC_CALIBRATION_PROBE_ACCURACY_LOOP

#####################################################################
#   _TC_NUDGE_ANALYZE_AND_PRINT
#####################################################################
[gcode_macro _TC_NUDGE_ANALYZE_AND_PRINT]
gcode:
    {% if printer.toolchanger.params_debug_toolchanger %}
      RESPOND MSG="_TC_NUDGE_ANALYZE_AND_PRINT start"
    {% endif %}
  {% set parent = printer["gcode_macro TC_ENDSTOP_AND_CALIBRATION_PROBE_ACCURACY"] %}
  {% set unhomed_str = parent.unhomed_pos|string %}
  {% set homed_str = parent.homed_pos|string %}

  {% set nohomo_ns = namespace(sum_x=0.0, sum_y=0.0, sum_z=0.0, sum_sqr_x=0.0, sum_sqr_y=0.0, sum_sqr_z=0.0, count=0) %}
  {% set homo_ns = namespace(sum_x=0.0, sum_y=0.0, sum_z=0.0, sum_sqr_x=0.0, sum_sqr_y=0.0, sum_sqr_z=0.0, count=0) %}

  ######## le string horrors
  {% for entry in unhomed_str.split(';') %}
    {% if entry.startswith("u_") %}
      {% set x_idx = entry.find('x') %}
      {% set y_idx = entry.find('y') %}
      {% set z_idx = entry.find('z') %}
      {% if x_idx != -1 and y_idx != -1 and z_idx != -1 %}
        {% set x_val = entry[x_idx+1:y_idx]|float %}
        {% set y_val = entry[y_idx+1:z_idx]|float %}
        {% set z_val = entry[z_idx+1:]|float %}
        {% set nohomo_ns.sum_x = nohomo_ns.sum_x + x_val %}
        {% set nohomo_ns.sum_y = nohomo_ns.sum_y + y_val %}
        {% set nohomo_ns.sum_z = nohomo_ns.sum_z + z_val %}
        {% set nohomo_ns.sum_sqr_x = nohomo_ns.sum_sqr_x + x_val*x_val %}
        {% set nohomo_ns.sum_sqr_y = nohomo_ns.sum_sqr_y + y_val*y_val %}
        {% set nohomo_ns.sum_sqr_z = nohomo_ns.sum_sqr_z + z_val*z_val %}
        {% set nohomo_ns.count = nohomo_ns.count + 1 %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% for entry in homed_str.split(';') %}
    {% if entry.startswith("h_") %}
      {% set x_idx = entry.find('x') %}
      {% set y_idx = entry.find('y') %}
      {% set z_idx = entry.find('z') %}
      {% if x_idx != -1 and y_idx != -1 and z_idx != -1 %}
        {% set x_val = entry[x_idx+1:y_idx]|float %}
        {% set y_val = entry[y_idx+1:z_idx]|float %}
        {% set z_val = entry[z_idx+1:]|float %}
        {% set homo_ns.sum_x = homo_ns.sum_x + x_val %}
        {% set homo_ns.sum_y = homo_ns.sum_y + y_val %}
        {% set homo_ns.sum_z = homo_ns.sum_z + z_val %}
        {% set homo_ns.sum_sqr_x = homo_ns.sum_sqr_x + x_val*x_val %}
        {% set homo_ns.sum_sqr_y = homo_ns.sum_sqr_y + y_val*y_val %}
        {% set homo_ns.sum_sqr_z = homo_ns.sum_sqr_z + z_val*z_val %}
        {% set homo_ns.count = homo_ns.count + 1 %}
      {% endif %}
    {% endif %}
  {% endfor %}

  ######## the nudge knows where it is because it knows where it isnt, and by substracting where it is from where it isnt,
  {% set un_mean_x = nohomo_ns.sum_x / nohomo_ns.count %}
  {% set un_mean_y = nohomo_ns.sum_y / nohomo_ns.count %}
  {% set un_mean_z = nohomo_ns.sum_z / nohomo_ns.count %}
  {% set un_stdev_x = ((nohomo_ns.sum_sqr_x / nohomo_ns.count) - un_mean_x*un_mean_x)**0.5 %}
  {% set un_stdev_y = ((nohomo_ns.sum_sqr_y / nohomo_ns.count) - un_mean_y*un_mean_y)**0.5 %}
  {% set un_stdev_z = ((nohomo_ns.sum_sqr_z / nohomo_ns.count) - un_mean_z*un_mean_z)**0.5 %}

  ######## or where it isnt from where it is (whichever is greater) and arriving at a position where it wasnt (and is now)
  {% set ho_mean_x = homo_ns.sum_x / homo_ns.count %}
  {% set ho_mean_y = homo_ns.sum_y / homo_ns.count %}
  {% set ho_mean_z = homo_ns.sum_z / homo_ns.count %}
  {% set ho_stdev_x = ((homo_ns.sum_sqr_x / homo_ns.count) - ho_mean_x*ho_mean_x)**0.5 %}
  {% set ho_stdev_y = ((homo_ns.sum_sqr_y / homo_ns.count) - ho_mean_y*ho_mean_y)**0.5 %}
  {% set ho_stdev_z = ((homo_ns.sum_sqr_z / homo_ns.count) - ho_mean_z*ho_mean_z)**0.5 %}

  RESPOND MSG="-- Nudge (UNHOMED) --"
  RESPOND MSG="Mean X={un_mean_x|round(4)}, Y={un_mean_y|round(4)}, Z={un_mean_z|round(4)}"
  RESPOND MSG="Std  X={un_stdev_x|round(5)}, Y={un_stdev_y|round(5)}, Z={un_stdev_z|round(5)}"

  RESPOND MSG="-- Nudge (HOMED) --"
  RESPOND MSG="Mean X={ho_mean_x|round(4)}, Y={ho_mean_y|round(4)}, Z={ho_mean_z|round(4)}"
  RESPOND MSG="Std  X={ho_stdev_x|round(5)}, Y={ho_stdev_y|round(5)}, Z={ho_stdev_z|round(5)}"

  RESPOND MSG="Done! Compare unhomed vs. homed stdev to gauge endstop accuracy."  
  ######## it arrives where it wasnt.

###########################################################################################################################################
###########################################################################################################################################
###########################################################################################################################################