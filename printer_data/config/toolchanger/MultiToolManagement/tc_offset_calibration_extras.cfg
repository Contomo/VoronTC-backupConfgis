

[gcode_macro _TC_LOG_OFFSET_HISTORY]
description: "Log rolling history of tool offsets  T=  X=  Y=  Z=  [PROBE=]"
variable_macro_html: "?tAppends to the rolling log of tool offsets.?nUsage: T=  X=  Y=  Z=  [/PROBE=]?p_TC_LOG_OFFSET_HISTORY "
variable_default_max_entries: 10
variable_default_rounding:    5
variable_save_sep_or_pile: 'pile'
gcode:
  {% import variable_helper as svh with context %}
  {% set msg          = macro_html %}
  #───< fetch settings >────────────────────────────────────────────────────────────────────────────────
  {% set tcs          = printer['gcode_macro _toolchanger_settings']|default({}) %}
  {% set offset_cfg   = tcs.get('offset_history', {}) %}
  {% set svf          = printer.save_variables.variables.get('datapile', {}) %}
  {% set max_entries  = offset_cfg.get('max_entries', default_max_entries)|int %}
  {% set r            = offset_cfg.get('rounding',    default_rounding)|int %}

  #───< tool number >───────────────────────────────────────────────────────────────────────────────────
  {% set tn_raw = params.get('T', params.get('TOOL', '')) %}
  {% set d      = namespace(c='') %}
  {% for c in tn_raw if c.isdigit() %}{% set d.c = d.c ~ c %}{% endfor %}
  {% set tn     = d.c|default('-1')|int %}
  #───< check if enabled, if not silently exit.
  {% if 'offset_history' in tcs %}
    {% if tn >= 0 and ('X' in params) and ('Y' in params) and ('Z' in params) %}

      #───< svf key >───────────────────────────────────────────────────────────────────────────────────
      {% set short_key = printer.toolchanger.tool_names[tn]|replace('tool ', '')|lower %}
      {% set save_key  = 'offs_history_' ~ short_key %}
      {% set added     = namespace(txt='') %}
      {% set new = {} %}
      #───< rolling log update  >────────────────────────────────────────────────────────────────────────
      {% for K in ['X','Y','Z','PROBE'] if K in params %}
        {% set val        = params[K]|float|round(r) %}
        {% set prev       = svf.get(save_key, {}).get(K|lower, []) %}
        {% set _          = new.update({K|lower: [val] + prev[:max_entries-1]}) %}
        {% set added.txt  = added.txt + (', ' if added.txt else '') + K|lower ~ ': ' ~ val %}
      {% endfor %}
      {svh.svf_update('datapile.' ~ save_key, new)}
      #───< save/respond  >──────────────────────────────────────────────────────────────────────────────
      {% set msg = (msg ~ '?s0?t?m?b' ~ short_key|upper ~ '?b ' ~ added.txt ~ ' added ') if 'SILENT' not in params else msg %}
    {% else %}
      {% set msg = msg ~ '?s3?t?mMissing ' ~ ('tool number' if tn < 0 else 'X, Y or Z offsets') %}
    {% endif %}
  {% endif %}

  {% if msg != macro_html %}
    _UNIFIED_RESPOND MSG="{msg}"
  {% endif %}


#####################################################################

[gcode_macro TC_OFFSET_STATS]
description: "Show μ, σ & Δ for tool-offset logs"
variable_macro_html: "?tTool-offset statistics.?nUsage: TC_OFFSET_STATS TOOL=t0,ebb1 (comma-sep) or omit TOOL= for all.?n?pTC_OFFSET_STATS "
gcode:
  #─── aliases ────────────────────────────────────────────────────
  {% set svv   = printer["save_variables"].variables.datapile %}
  {% set out   = [ macro_html ] %}
  {% set arg   = params.TOOL|default(params.T|default(""))|string|replace(" ","") %}
  {% set axis  = ['x','y','z','probe'] %}

  #─── tool list ──────────────────────────────────────────────────
  {% if arg %}
      {% set tools = arg.split(",") %}
  {% else %}
      {% set tools = [] %}
      {% for k in svv if k.startswith("offs_history_") and 'x' in svv[k] and svv[k].x|length > 0 %}
          {% set _ = tools.append((k[16:])|trim) %}
      {% endfor %}
  {% endif %}

  #─── per-tool stats ─────────────────────────────────────────────
  {% for t in tools if t %}
      {% set key = 'offsets_history_' ~ t %}
      {% set d   = svv.get(key) %}
      {% if d and 'x' in d and d.x|length > 0 %}
        {% set n    = d.x|length %}
        {% set blk  = [] %}
        {% set _    = blk.append('?s0?t?mStats for ' ~ t|upper ~ ' with ' ~ n ~ ' samples.?n') %}
        {% set last3 = 0 if n < 3 else n - 3 %}

        {% for ax in axis if ax in d %}
          {% set v    = d[ax] %}
          {% set mean = (v|sum) / n %}
          {% set ns   = namespace(acc=0) %}
          {% for val in v %}{% set ns.acc = ns.acc + (val-mean)*(val-mean) %}{% endfor %}
          {% set std   = (ns.acc / n) ** 0.5 %}
          {% set delt  = (v[:3]|max) - (v[:3]|min) if v else 0 %}
          {% set L     = 'P' if ax=='probe' else ax|upper %}
          {% set _ = blk.append('?c' ~
               L ~ 'μ: ' ~ ('%8.3f'|format(mean))  ~ ' mm  ' ~
               L ~ 'σ: ' ~ ('%6.1f'|format(std*1000)) ~ ' µm  ' ~
               L ~ 'Δ: ' ~ ('%6.1f'|format(delt*1000)) ~ ' µm?c?n') %}
        {% endfor %}

        {% set _ = out.append(blk|join('')) %}
      {% else %}
        {% set _ = out.append('?s0?t?mNo valid samples for ' ~ t ~ '?n') %}
      {% endif %}
  {% endfor %}

  _UNIFIED_RESPOND MSG="{macro_html ~ '?s0?t?m?cμ?c?b Avreage?n?b?cσ?c?b Standard deviation?n?b?cΔ?c?b Max delta of last 3?b?n' ~ out|join('') ~ '?ddd'}"



#####################################################################
#   _TC_ADJUST_TTBZ_DRIFT
#####################################################################
[gcode_macro _TC_ADJUST_TTBZ_DRIFT]
description: "Auto-adjust probe trigger_to_bottom_z drift across staged tools. Run after _TC_UPDATE_OFFSETS to apply drift correction."
variable_macro_html: "?tAuto-adjust probe trigger_to_bottom_z drift across tools?p_TC_ADJUST_TTBZ_DRIFT "
variable_key_name: "ttbz_drift"
gcode:
  {% set p = printer %}
  {% set tcs = p['gcode_macro _toolchanger_settings'] %}
  {% if 'ttbz_drift_autoadjust' in tcs %}
    # ───────────────────────────────────────────────
    # Load user‑config & staged offsets
    # ───────────────────────────────────────────────
    {% set cfg = tcs.get('ttbz_drift_autoadjust', {}) %}
    {% set min_tools       = cfg.get('min_tools',       2)  |int   %}
    {% set max_drift       = cfg.get('max_drift',       0.4)|float %}
    {% set k_mad           = cfg.get('mad_k',           3)  |float %}
    {% set hist_span       = cfg.get('weight_history',  0.3)|float %}
    {% set hist_min        = cfg.get('history_min',     3)  |int   %}
    {% set hist_max        = cfg.get('history_max',     5)  |int   %}
    {% set decay_factor    = cfg.get('drift_decay',     0.9)|float %}
    {% set decay_threshold = cfg.get('decay_threshold', 0.2)|float %}
    {% set storage         = p['gcode_macro _TC_UPDATE_OFFSETS'].storage %}

    {% set r_save = (tcs.get('offset_calibration', {})).get('value_rounding', 3)|int %}

    {% if storage|length == 0 %}
      _UNIFIED_RESPOND MSG="{macro_html}?s3?t?mNo staged offsets, run _TC_UPDATE_OFFSETS first."
    {% else %}
      # ───────────────────────────────────────────────
      # Build current diffs & history‑weights
      # ───────────────────────────────────────────────
      {% set svf_vars   = p.save_variables.variables                %}
      {% set prev_pos   = svf_vars.get('probe_position', {})        %}
      {% set prev_drift = prev_pos.get(key_name, 0) |float          %}
      {% set keys       = storage.keys()     |list                  %}
      {% set diffs      = []                                        %}
      {% set hw_arr     = []                                        %}
      {% set dbg        = namespace(spans=[], hw=[], wvar=[])       %}

      {% for key in keys %}
        {% set cur = storage[key] %}
        {% if 'probe' in cur %}
          {% set old = svf_vars.get('offsets_' ~ key, {}).get('probe', 0) |float %}
          {% set _   = diffs.append(cur.probe|float - old) %}
          {% set span = 0.0 %}
          {% set hw   = 0.5 %}
          {% set hdict = svf_vars.get('offsets_history_' ~ key, {}) %}
          {% if hdict and 'probe' in hdict and hdict.probe|length >= hist_min %}
            {% set h_recent = hdict.probe[:hist_max] %}
            {% set span     = (h_recent|max - h_recent|min)|float %}
            {% set hw       = span >= hist_span and 0.0 or (1 - span / hist_span) %}
          {% endif %}
          {% set hw = hw < 0 and 0.0 or hw %}
          {% set hw = hw > 1 and 1.0 or hw %}
          {% set _  = hw_arr.append(hw) %}
          {% if debug_mode %}
            {% set _ = dbg.spans.append(span) %}
            {% set _ = dbg.hw.append(hw)    %}
          {% endif %}
        {% endif %}
      {% endfor %}

      {% set count = diffs|length %}
      {% if count == 0 %}
        _UNIFIED_RESPOND MSG="{macro_html}?s3?t?mNo probe entries found in staged offsets."
      {% endif %}

      # ───────────────────────────────────────────────
      # Median & MAD
      # ───────────────────────────────────────────────
      {% set sorted_d  = diffs|sort %}
      {% set m         = count % 2 == 1 and sorted_d[count//2] or (sorted_d[count//2-1] + sorted_d[count//2]) / 2.0 %}
      {% set absdev    = [] %}
      {% for d in diffs %}{% set _ = absdev.append((d - m)|abs) %}{% endfor %}
      {% set sorted_dev = absdev|sort %}
      {% set MAD       = count % 2 == 1 and sorted_dev[count//2] or (sorted_dev[count//2-1] + sorted_dev[count//2]) / 2.0 %}
      {% if MAD == 0 %}{% set MAD = 0.000001 %}{% endif %}

      # ───────────────────────────────────────────────
      # Combine weights (history × MAD gate)
      # ───────────────────────────────────────────────
      {% set ns = namespace(w_sum=0.0, wd_sum=0.0) %}
      {% set weights = [] %}
      {% set reject  = [] %}
      {% for i in range(count) %}
        {% set dev   = absdev[i]                                      %}
        {% set w_var = dev >= k_mad * MAD and 0.0 or 1 - dev / (k_mad * MAD) %}
        {% set w     = (hw_arr[i] * w_var)|float                     %}
        {% if w < 0 %}{% set w = 0.0 %}{% endif %}
        {% if w > 1 %}{% set w = 1.0 %}{% endif %}
        {% set _     = weights.append(w)                            %}
        {% if w < 0.05 %}{% set _ = reject.append(i)                %}{% endif %}
        {% set ns.w_sum  = ns.w_sum  + w                           %}
        {% set ns.wd_sum = ns.wd_sum + (w * diffs[i])              %}
      {% endfor %}

      # ───────────────────────────────────────────────
      # Compute new drift & apply decay
      # ───────────────────────────────────────────────
      {% if ns.w_sum == 0 or (weights|select('>',0.05)|list)|length < min_tools %}
        {% set adj    = prev_drift %}
        {% set status = 2 %}
        {% set reason = 'too much spread' %}
      {% else %}
        {% set drift  = ns.wd_sum / ns.w_sum %}
        {% if drift > max_drift %}{% set drift = max_drift %}{% elif drift < -max_drift %}{% set drift = -max_drift %}{% endif %}
        {% set adj    = drift %}
        {% set status = (drift|round(5)) == (prev_drift|round(5)) and 1 or 0 %}
      {% endif %}
      {% if ns.w_sum < decay_threshold %}
        {% set adj = prev_drift * decay_factor %}
      {% endif %}
      
      # ───────────────────────────────────────────────
      # Save drift & history
      # ───────────────────────────────────────────────
      {% set hist_cfg  = cfg.get('offset_history', {})          %}
      {% set rnd_hist  = hist_cfg.get('rounding', 3)  |int      %}
      {% set max_ent   = hist_cfg.get('max_entries', 10) |int   %}
      {% set prev_hist = svf_vars.get('offsets_history_probe', {}).get(key_name, []) %}
      {% set new_hist  = (prev_hist + [adj|round(rnd_hist)])[-max_ent:] %}
      {% set hvars     = p.save_variables.variables.get('offsets_history_probe', {}) %}
      {% set _ = hvars.update({key_name: new_hist}) %}
      SAVE_VARIABLE VARIABLE=offsets_history_probe VALUE="{hvars}"
      {% set pos = prev_pos.copy() %}
      {% set _   = pos.update({key_name: adj|round(r_save)}) %}
      SAVE_VARIABLE VARIABLE=probe_position VALUE="{pos}"

      # ───────────────────────────────────────────────
      # Apply correction to staged offsets
      # ───────────────────────────────────────────────
      {% for key in keys %}
        {% set ent = storage[key] %}
        {% if 'probe' in ent %}
          {% set _ = ent.update({'probe': ent.probe|float - adj}) %}
        {% endif %}
      {% endfor %}
      #SET_GCODE_VARIABLE MACRO=_TC_UPDATE_OFFSETS VARIABLE=storage VALUE="{storage}"

      # ───────────────────────────────────────────────
      # Build operator report
      # ───────────────────────────────────────────────
      {% set header = macro_html ~ '?s0?t?mDrift ' ~ (status == 0 and 'updated' or (status == 1 and 'unchanged (same)' or 'unchanged')) ~ ': ?c' ~ (adj|round(r_save)|string) ~ ' mm?c' %}
      {% set report = [] %}
      # Config + decay info
      {% set cfg = 'tools=' ~ count|string ~ ', hist_min=' ~ hist_min|string ~ ', hist_max=' ~ hist_max|string ~ ', span=' ~ (hist_span|string) ~ ', mad_k=' ~ (k_mad|string) %}
      {% if ns.w_sum < decay_threshold %}
        {% set cfg = cfg ~ ', decay=on(' ~ (decay_factor|string) ~ ')' %}
      {% else %}
        {% set cfg = cfg ~ ', decay=off' %}
      {% endif %}
      {% set _ = report.append('?s0?t?mConfig: ' ~ cfg) %}

      # Legend
      {% set legend = '?n[hw -> history_weight: (0-1)]?n[something mad]?n[w -> total weight]?nΣw=' ~ (ns.w_sum|round(3)|string) %}
      {% set _ = report.append('?s0?t?m?cLegend:?c ' ~ legend) %}

      # Per-tool drifts # todo padding
      {% for i in range(count) %}
        {% set d    = diffs[i]|round(r_save) %}
        {% set w    = weights[i]|round(2) %}
        {% set pct  = m == 0 and 0 or (((diffs[i]-m)/m*100)|round(2)) %}
        {% set excluded = ' ?c[excluded]?c' if i in reject %}
        {% set _ = report.append('?s0?t?m' ~ keys[i] ~ ': ' ~ (d|string) ~ ' mm' ~ ', w='   ~ (w|string) ~ ', pct=' ~ (pct|string) ~ '%' ~ excluded) %}
      {% endfor %}

      # assemble & dispatch
      {% set msg = header ~ report|join('') %}
      _UNIFIED_RESPOND MSG="{msg}"

    {% endif %}
  {% endif %}


