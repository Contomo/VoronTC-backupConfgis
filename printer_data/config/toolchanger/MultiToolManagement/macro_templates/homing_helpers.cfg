[gcode_macro _homing_helper_macros]
gcode:    
    #──────────────────────────< True or nothing >────────────────────────────
    {%- macro axis_is_sensorless(axis) -%}
        {%- set cfg = printer.configfile.settings -%}
        {%- if get_axis_driver(axis) and ('virtual_endstop' in cfg['stepper_' ~ axis|lower].endstop_pin|default('')) -%}
            {True}
        {%- endif -%}
    {%- endmacro -%}

    #─────────────────< GET AND SET CURRENTS >───────────────────
    {%- macro get_axis_current(axis, type='run') -%}
        {%- if get_axis_driver(axis) -%}
            {printer[get_axis_driver(axis)][type ~ '_current']}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro set_axis_current(axis, target_current=None) -%}
        {%- if axis -%}
            {%- set current = target_current|float(False) or get_config_axis_current(axis)|float -%}
            {%- if get_axis_driver(axis) and current|round(2) != get_axis_current(axis)|float|round(2) -%}
                {%- set _ = printer[get_axis_driver(axis)].update({'run_current': current}) -%}
                SET_TMC_CURRENT STEPPER={'stepper_' ~ axis} CURRENT={current}
            {%- endif -%}
        {%- else -%}
            {action_respond_info("set_stepper_current: needs axis to set") }
        {%- endif -%}
    {%- endmacro -%}

    #─────────────────< gets default motor current for axis >───────────────────
    {%- macro get_config_axis_current(axis, type='run') -%}
        {%- if get_axis_driver(axis) -%}
            {printer.configfile.settings[get_axis_driver(axis)][type ~ '_current']}
        {%- endif -%}
    {%- endmacro -%}

    #─────────────────< gets full TMC name for axis >───────────────────
    {%- macro get_axis_driver(axis) -%}
        {%- set stepper_name = 'stepper_' ~ axis|lower -%}
        {%- for drv in ['tmc2209', 'tmc5160', 'tmc2240'] if drv ~ ' ' ~ stepper_name in printer.configfile.settings -%}
            {drv ~ ' ' ~ stepper_name}
        {%- endfor -%}
    {%- endmacro -%}

    #────────────────────< gets closest distance to dock >─────────────────────
    {%- macro get_distance_to_docks(pnt) -%}
        {%- set distances = [] -%}
        {%- for t_name in printer.toolchanger.tool_names -%}
            {%- set dock = {} -%}
            {%- for ax in ['x', 'y', 'z'] -%}
                {%- set _ = dock.update({ax: printer[t_name].get('params_park_' ~ ax, 0)|float(0)}) -%}
            {%- endfor -%}
            {%- set _ = distances.append(point_distance(pnt, dock)|float) -%}
        {%- endfor -%}
        {%- if distances -%}{distances|min}{%- endif -%}
    {%- endmacro -%}

    #────────────────────< force move "equivalent" but moves axis >─────────────────────
    {%- macro force_G0(axis_param=None, feed=False) -%}
        {%- if axis_param is none -%}
            {action_respond_info("force_G0: requires axis and distance (eg. X10)") }
        {%- else -%}
            {%- set axis     = (axis_param[0]|string|upper) -%}
            {%- set distance = (axis_param[1:]|float) -%}
            {%- set step_key = 'stepper_' ~ axis|lower -%}

            {%- if axis not in ['X', 'Y', 'Z'] -%}
                {action_respond_info("force_G0: invalid axis '" ~ axis ~ "'. Must be X, Y, or Z.") }
            {%- elif step_key not in printer.configfile.settings -%}
                {action_respond_info("force_G0: '" ~ step_key ~ "' not found.") }
            {%- else -%}
                #SAVE_GCODE_STATE NAME=force_G0
                {%- set stepper_config = printer.configfile.settings[step_key] -%}
                SET_KINEMATIC_POSITION
                SET_KINEMATIC_POSITION {axis}={stepper_config.position_min + distance if distance > 0 else stepper_config.position_max - distance}
                SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0
                G91
                G0 {axis}{distance}{(' F' ~ feed) if feed else ''}
                G90
                SET_KINEMATIC_POSITION CLEAR_HOMED={'XYZ'|replace(printer.toolhead.homed_axes|upper, '')}
                #RESTORE_GCODE_STATE NAME=force_G0 MOVE=0
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    #===========================================================================================< DIRECT CALL/TESTING
    {%- if rawparams and 'DATA' in params -%}
        {action_respond_info("returned: " ~ self._TemplateReference__context[params.MACRO](params.DATA))}
    {%- elif rawparams and 'MACRO' in params -%}
        {action_respond_info("returned: " ~ self._TemplateReference__context[params.MACRO]())}
    {%- endif -%}