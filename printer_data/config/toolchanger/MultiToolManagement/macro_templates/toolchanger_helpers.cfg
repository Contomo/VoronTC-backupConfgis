#{%- set literal_parser = printer.printer.lookup_object('gcode_macro')._action_raise_error.__globals__['ast'].literal_eval -%}
#{%- set deepcopy = printer.printer.lookup_object('gcode_macro')._action_raise_error.__globals__['copy'].deepcopy -%}
#{%- set OrderedDict = printer.printer.lookup_object('gcode_macro')._action_raise_error.__globals__['collections'].OrderedDict -%}

[gcode_macro _toolchanger_helper_macros]
gcode:
    #===========================================================================================< LOCALS/SETTINGS
    #────────────────────────────────────────────────────< short forms/naming shorts.
    {% set _tc  = printer.toolchanger         %}
    {% set _th  = printer.toolhead            %}
    {% set _cfg = printer.configfile.settings %}

    {%- set round_svf = (printer['gcode_macro _toolchanger_settings'].get('offset_calibration', {})).get('value_rounding', 3)|int -%}
    {%- set _cache = namespace(tn=None) -%}
    #===========================================================================================< IO/INTERNALS

    #────────────────────────────────────────────────────< RESPOND HELPERS
    {%- macro respond_colored(msg, prefix, color) -%}
        {%- if '-' in color -%}
            {- action_respond_info('<span class="' ~ color ~ '">' ~(prefix and ('<strong>[' ~ prefix|trim ~ '] </strong>') or '') ~ msg ~ '</span>') -}
        {%- else -%}
            {- action_respond_info('<span style="color:' ~ color ~ ';">' ~(prefix and ('<strong>[' ~ prefix|trim ~ '] </strong>') or '') ~ msg ~ '</span>') -}
        {%- endif -%}
    {%- endmacro -%}


    {%- macro _msg_info(msg = '') -%}                   {- action_respond_info(msg) -}                       {%- endmacro -%}
    {%- macro _msg_warn(msg = '', prefix='Warning') -%} {- respond_colored(msg, prefix, 'warning--text') -}  {%- endmacro -%}
    {%- macro _msg_error(msg = '', prefix='ERROR')  -%} {- respond_colored(msg, prefix, 'error--text') -}    {%- endmacro -%}
    {%- macro _raise_error(msg = '') -%}                {- action_raise_error(msg) -}                        {%- endmacro -%}

    {%- macro fmt_coord(dict) -%}
        {%- for key, value in dict.items() if dict.keys()|length >= 3 -%}
            {- key[0]|upper ~ ': ' ~ '%+.2f'|format(value) ~ ' mm'}{', ' if not loop.last else '' -}
        {%- else -%}
            {'n/A'}
        {%- endfor -%}
    {%- endmacro -%}

    # ---< error proof divide
    {%- macro divide(numerator, denominator, precision=3) -%}
        {%- set num, den, result = numerator|float(None), denominator|float(None), numerator -%}
        {%- if num is none or den is none -%} {- _msg_warn("cannot perform" ~ numerator ~ "/" ~ denominator, 'DIV_ERR') -}
        {%- elif den == 0.0 -%} {- _msg_warn("(" ~ numerator ~ "/" ~ denominator ~ ")", 'DIV_BY_0') -}
        {%- else -%}{%- set result = (num / den)|round(precision|int(3)) -%}{%- endif -%}
        {result}
    {%- endmacro -%}


    #───< just gimme the god damn value, idc if coord, list, dict tuple, upper, lower go fuckyourself....
    {%- macro get_ax(axis, container, fallback=none) -%}
        {%- set axes = ['x','y','z'] -%}
        {%- set letter = axes[axis] if axis is number else axis|string|lower -%}
        {%- if container is sequence and container is not none -%}
            {%- set result = container[axes.index(letter)]|default(fallback) -%}
        {%- elif container is not none -%}
            {%- set result = container.get(letter)|default(container.get(letter|upper)|default(fallback)) -%}
        {%- else -%}
            {%- set result = fallback -%}
        {%- endif -%}
        {result}
    {%- endmacro -%}

    #────────────────────< gets closest y distance to docks >─────────────────────
    {%- macro get_y_distance_to_docks(y_or_coord=none) -%}
        {%- set distances = [999] -%}
        {%- set y = y_or_coord|float if y_or_coord|float(none) is number else get_ax('y', y_or_coord)|float(none) -%}
        {%- set y = _th.position.y if y is none else y %}
        {%- for t_name in _tc.tool_names if y is not none -%}
            {%- set y_pos = printer[t_name].get('params_park_' ~ 'y', none)|float(none) -%}
            {%- set _     = distances.append(y - y_pos) if y_pos is not none else '' -%}
        {%- endfor -%}
        {distances|min}
    {%- endmacro -%}

    #────────────────────< gets closest distance to docks >─────────────────────
    {%- macro get_distance_to_docks(pnt=none) -%}
        {%- set pnt = _th.position if pnt is none else pnt -%}
        {%- set distances = [999] -%}
        {%- for t_name in _tc.tool_names -%}
            {%- set dock = {} -%}
            {%- for ax in ['x', 'y', 'z'] -%}
                {%- set _ = dock.update({ax: printer[t_name].get('params_park_' ~ ax, 0)|float(0)}) -%}
            {%- endfor -%}
            {%- set _ = distances.append(point_distance(pnt, dock)|float) -%}
        {%- endfor -%}
        {distances|min}
    {%- endmacro -%}



    #===========================================================================================< TRANSLATION/LOOKUP HELPER

    #────────────────────────────────────────────────────< EASY LOOKUP
    # ---< tool key for svf/named lookup/display
    {%- macro tool_key(i) -%} { _tc.tool_names[i]|replace('tool ','')} {%- endmacro -%}
    {%- macro tk_lower(i) -%} { tool_key(i)|lower }                                    {%- endmacro -%}

    # ---< searches for the number if its present in tool probes
    {%- macro get_probe_name_from_tn(tool_number) -%}
        {%- set found = [] -%}
        {%- for k, v in _cfg.items() if k[:11] == 'tool_probe ' and v.tool|default(-1) == tool_number|int -%}
            {%- set _ = found.append(k) -%}
        {%- endfor -%}
        {- _msg_error("Multiple probes found for tool_number " ~ tool_number) if found|length > 1 else '' -}
        {found[0] if found else _msg_error("cannot find probe for tool '" ~ tool_number ~ "'")}
    {%- endmacro -%}

    {%- macro get_tool_min_extrude_temp(tool_number) -%}
        {%- set tool_name = _tc.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {_cfg[extruder_name].min_extrude_temp}
        {%- else -%}{_msg_warn("cannot get tools '" ~ tool_key(tool_number) ~ "' min extrude temp, has no extruder")}{%- endif -%}
    {%- endmacro -%}

    # ---< gets the target from a tn
    {%- macro get_tool_target(tool_number) -%}
        {%- set tool_name = _tc.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].target}
        {%- else -%}{-1}{_msg_warn("cannot get tools '" ~ tool_key(tool_number) ~ "' target, has no extruder")}{%- endif -%}
    {%- endmacro -%}

    # ---< gets the temp from a tn
    {%- macro get_tool_temp(tool_number) -%}
        {%- set tool_name = _tc.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].temperature}
        {%- else -%}{-1}{_msg_warn("cannot get tools '" ~ tool_key(tool_number) ~ "' temp, has no extruder")}{%- endif -%}
    {%- endmacro -%}

    # ---< gets the temp from a tn
    {%- macro get_tool_extruder(tool_number) -%}
        {%- set tool_name = _tc.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if 'extruder' in extruder_name and extruder_name in printer -%}
            {extruder_name}
        {%- endif -%}
    {%- endmacro -%}

    # ---< just tells you if it can extrude.
    {%- macro tool_can_extrude(tool_number) -%}
        {%- set tool_name = _tc.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {'True' if printer[extruder_name].can_extrude else ''}
        {%- else -%}{_msg_warn("cannot get tools '" ~ tool_key(tool_number) ~ "' extruder")}{%- endif -%}
    {%- endmacro -%}
    #────────────────────────────────────────────────────< LIVE STATE LOOKUP/EDIT
    
    # ---< actively pulls in a fresh result and caches it (state wont change in this ref frame, no need to repoll)
    {%- macro get_mounted_tn() -%}
        {%- if _cache.tn is none -%}
            {%- set tpe_obj = printer.printer.lookup_object('tool_probe_endstop') -%}
            {%- set probes = tpe_obj._query_open_tools() -%}
            {%- if probes|length == 1 -%}
                {%- set _ = tpe_obj.set_active_probe(probes[0]) -%}
                {%- set _cache.tn = probes[0].tool -%}
            {%- else -%}
                {%- set _cache.tn = -1 -%}
            {%- endif -%}
            {%- if probes|length > 1 -%}{_msg_warn("Multiple active tool probes!? please check your hardware/config!")}{%- endif -%}
        {%- endif -%}
        {%- set _ = printer.tool_probe_endstop.update({'active_tool_number': _cache.tn|int}) -%}
        {_cache.tn}
    {%- endmacro -%}


    #────────────────────────────────────────────────────< ACCELERATION SHIZZLE

    {%- macro try_divide_accel(accel_divide_override=None) -%}
        {%- if printer.print_stats.state|lower != "printing" -%}
            {%- set tcs = printer['gcode_macro _toolchanger_settings'] -%}
            {%- set divider = accel_divide_override|float(tcs.get('macro_accel_divider', None)|float(None)) -%}
            {%- if divider is not none and divider > 1.0 -%}
                {divide_vel(accel_divide=divider)}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro divide_vel(vel_divide=1.0, accel_divide=1.0) -%}
        {%- set accel    = _tc.params_fast_accel|default(_cfg.printer.max_accel)|float    -%}
        {%- set velocity = _tc.params_fast_speed|default(_cfg.printer.max_velocity)|float -%}
        SET_VELOCITY_LIMIT VELOCITY={divide(velocity, vel_divide)} ACCEL={divide(accel, accel_divide)}
    {%- endmacro -%}

    {%- macro restore_vel() -%}
        SET_VELOCITY_LIMIT VELOCITY={_th.max_velocity} ACCEL={_th.max_accel}
    {%- endmacro -%}


    #===========================================================================================< STATE CHECKING

    {%- macro check_homed() -%}
        {%- if _th.homed_axes != "xyz" -%}
            {%- if _cfg.toolchanger.on_axis_not_homed == 'home' -%}
                {- _msg_info("Homing first...") -}
                G28
            {%- else -%}
                {- _raise_error("Printer must be homed first.") -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_tc_status() -%}
        {%- if _tc.status == 'uninitialized' -%}
            {- _msg_info("Toolchanger uninitialized, attempting to initialize...") -}
            INITIALIZE_TOOLCHANGER
        {%- elif _tc.status == 'error' -%}
            {_raise_error("Toolchanger is in an error state.")}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_tn_actn() -%}
        {% set tn = _tc.tool_number|int %}
        {%- set actn = printer.tool_probe_endstop.active_tool_number|int -%}
        {%- if tn != actn or actn == -1 or tn == -1 -%}
            {- _msg_info("Something seems wrong here... trying to recover") -}
            {%- set actn = get_mounted_tn()|int -%}
            {%- if actn != -1 -%}
                INITIALIZE_TOOLCHANGER T={actn}
            {%- else -%}
                {_raise_error("Nope... definetly no tool on there right now.")}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_ok() -%}
        {check_tc_status()}
        {check_homed()}
        {check_tn_actn()}
    {%- endmacro -%}

    #===========================================================================================< T<n> CALL SCRAMBLER/UNSCRAMBLER


    #===========================================================================================< UPDATE INTERNALS HELPERS
    #───────────────────< push SVF probe offset -> tool probe offset >────────────────────
    {%- macro update_tool_probe_from_svf(tool_number, respond=_msg_info, respond_warn=_msg_warn) -%}
        {%- set tool_name = _tc.tool_names[tool_number|int] -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = printer.save_variables.variables.get(svf_key, {}) -%}
        {%- if 'probe' in offsets and (offsets.probe is number) -%}
            {%- set probe_obj = printer.printer.lookup_object('tool_probe_endstop').tool_probes[tool_number|int] -%}
            {%- set _ = probe_obj.probe_offsets.__setattr__('z_offset', offsets.probe) -%}
            {- respond("Applied probe offset for " ~ probe_obj.name ~ " (" ~ offsets.probe ~ ")") if respond  else '' -}
        {%- elif respond_warn -%}
            {respond_warn("Missing probe offset for " ~ tool_name ~ " in " ~ svf_key)}
        {%- endif -%}
    {%- endmacro -%}

    #───────────────────< push tools SVF gcode offsets -> toolchanger tools gcode offsets >────────────────────
    {%- macro update_tool_offsets_from_svf(tool_number, respond=_msg_info, respond_warn=_msg_warn) -%}
        {%- set tool_name = _tc.tool_names[tool_number|int] -%}
        {%- set tool_obj = printer.printer.lookup_object(tool_name, None) -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = printer.save_variables.variables.get(svf_key, {}) -%}
        {%- set applied_offsets = [] -%}
        {%- for axis in ['x', 'y', 'z'] if axis in offsets -%}
            {%- set _ = tool_obj.__setattr__('gcode_' ~ axis ~ '_offset', offsets[axis]) -%}
            {%- set _ = applied_offsets.append(axis|upper ~ "=" ~ offsets[axis]) -%}
        {%- else -%}
            {- respond_warn("Missing offsets for " ~ tool_name ~ " in " ~ svf_key) if respond_warn else '' -}
        {%- endfor -%}
        {%- if applied_offsets and respond -%}
            {- respond("Applied gcode offsets for " ~ tool_name ~ ": " ~ (applied_offsets|join(', '))) if respond else '' -}
        {%- endif -%}
    {%- endmacro -%}

    #───────────────────< push SVF calibration probes TTBZ -> tools calibrate trigger to bottom z >────────────────────
    {%- macro update_ttbz_from_svf(respond=_msg_info, respond_warn=_msg_warn) -%}
        {%- set probe_pos  = printer.save_variables.variables.get('probe_position', {}) -%}
        {%- set ttbz = probe_pos.get('trigger_to_bottom_z', None) -%}
        {%- if ttbz is not none -%}
            {%- set _ = printer.printer.lookup_object('tools_calibrate').__setattr__('trigger_to_bottom_z', ttbz|float) -%}
            {respond("Updated trigger_to_bottom_z (" ~ ttbz ~ ")") if respond else ''}
        {%- else -%}
            {respond_warn("Failed to update ttbz") if respond_warn else ''}
        {%- endif -%}
    {%- endmacro -%}


    #===========================================================================================< DIRECT CALL/TESTING
    {%- if rawparams and 'DATA' in params -%}
        {_msg_info("returned: " ~ self._TemplateReference__context[params.MACRO](params.DATA))}
    {%- elif rawparams and 'MACRO' in params -%}
        {_msg_info("returned: " ~ self._TemplateReference__context[params.MACRO]())}
    {%- endif -%}



   





