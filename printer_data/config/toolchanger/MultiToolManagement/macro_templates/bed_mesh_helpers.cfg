[gcode_macro _bedmesh_helper_macros]
gcode:
    #────────────────────< private helpers >──────────────────────
    {%- set _all_profiles = printer.printer.lookup_object('bed_mesh').pmgr.profiles -%}
    {%- macro _name_in_profiles(name) -%}
        {%- if name in _all_profiles -%}
            {True}
        {%- else -%}
            {- action_respond_info("mesh helper: profile '" ~ name ~ "' not found.") -}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro _update_mesh_param(name, kv) -%}
        {%- if _name_in_profiles(name) -%}
            {%- set _ = _all_profiles[name].setdefault('mesh_params', {}) -%}
            {%- set _ = _all_profiles[name]['mesh_params'].update(kv) -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro _get_mesh_param(name, k) -%}
        {%- if _name_in_profiles(name) -%}{- _all_profiles[name]['mesh_params'].get(k, '') -}{%- endif -%}
    {%- endmacro -%}

    {%- macro _remove_mesh_param(name, k) -%}
        {%- if _name_in_profiles(name) -%}{%- set _ = _all_profiles[name]['mesh_params'].pop(k, None) -%}{%- endif -%}
    {%- endmacro -%}

    #────────────────────< Copies a mesh profile in memory >──────────────────────
    {%- macro copy_mesh(src, dest=None) -%}
        {%- if _name_in_profiles(src) and dest is not none -%}
            {%- set new_params, new_points = {}, [] -%}
            {%- for row in _all_profiles[src]['points'] -%}
                {%- set _ = new_points.append(row[:]) -%}
            {%- endfor -%}
            {%- set _ = _all_profiles.update({dest: {'points': new_points}}) -%}
            {_update_mesh_param(dest, _all_profiles[src]['mesh_params'])}
            { action_respond_info("Copied mesh profile '" ~ src ~ "' to '" ~ dest ~ "'") }
        {%- endif -%}
    {%- endmacro -%}

    #───────────────────< Adjusts a single Z point in a mesh >────────────────────
    {%- macro adjust_mesh_point(name, x_idx, y_idx, zval=None) -%}
        {%- if _name_in_profiles(name) and zval is not none -%}
            {%- set matrix = [] -%}
            {%- for row in _all_profiles[name]['points'] -%}
                {%- set _ = matrix.append(row|list) -%}
            {%- endfor -%}
            {%- if y_idx|int < 0 or y_idx|int > matrix|length - 1 or x_idx|int < 0 or x_idx|int > (matrix[0]|length) - 1 -%}
                {action_respond_info("adjust_mesh_point: Index (" ~ x_idx|string ~ "," ~ y_idx|string ~ ") is out of bounds.")}
            {%- else -%}
                {%- set _ = matrix[y_idx].__setitem__(x_idx|int, zval|float) -%}
                {%- set _ = _all_profiles[name].update({'points': matrix}) -%}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    #───────────────────< Applies a Z offset to an entire mesh >───────────────────
    {%- macro adjust_mesh_z(name, offset=None, mode='relative') -%}
        {%- set new_points = [] -%}
        {%- if _name_in_profiles(name) and offset is not none -%}
            {%- for row in _all_profiles[name]['points'] -%}
                {%- set new_row = [] -%}
                {%- for z0 in row -%}
                    {%- set _ = new_row.append(((z0 if mode == 'relative' else 0) + offset|float)|round(6)) -%}
                {%- endfor -%}
                {%- set _ = new_points.append(new_row) -%}
            {%- endfor -%}
            {%- set _ = _all_profiles[name].update({'points': new_points}) -%}
            {action_respond_info("Applied a Z offset of " ~ offset|string ~ " to mesh '" ~ name ~ "'")}
        {%- endif -%}
    {%- endmacro -%}

    #──────────────< Creates a new, flat mesh profile in memory (with defaults) >───────────────
    {%- macro create_mesh(name, x_count=6, y_count=6, z=0, x_pps=None, y_pps=None, algo=None, tension=None) -%}
        {%- set params, points = {}, [] -%}
        {%- set _ = params.update({'x_count': x_count|int, 'y_count': y_count|int}) -%}
        {%- for ax, idx in [('x', 0), ('y', 1)] -%}{%- for lim in ['min', 'max'] -%}
                {%- set _ = params.update({(lim ~ '_' ~ ax): printer.configfile.settings.bed_mesh['mesh_' ~ lim][idx]}) -%}
        {%- endfor -%}{%- endfor -%}
        {%- for y in range(y_count|int) -%}
            {%- set row = [] -%}
            {%- for x in range(x_count|int) -%}{%- set _ = row.append(z|float) -%}{%- endfor -%}
            {%- set _ = points.append(row) -%}
        {%- endfor -%}
        {%- set _ = _all_profiles.update({name: {'points': points, 'mesh_params': params}}) -%}
        {set_mesh_pps(name, x_pps, y_pps)}
        {set_mesh_interpolation(name, algo, tension)}
        {action_respond_info("Created mesh '" ~ name ~ "' (" ~ x_count|string ~ "x" ~ y_count|string ~ ") at Z=" ~ z|string)}
    {%- endmacro -%}

    #────────────────< Sets the points-per-segment for a mesh >─────────────────
    {%- macro set_mesh_pps(name, x_pps=None, y_pps=None) -%}
        {%- set mesh_pps_x = x_pps|int(_get_mesh_param(name, 'mesh_x_pps')|int(y_pps|int(printer.configfile.settings.bed_mesh.mesh_pps[0]))) -%}
        {%- set mesh_pps_y = y_pps|int(_get_mesh_param(name, 'mesh_y_pps')|int(x_pps|int(printer.configfile.settings.bed_mesh.mesh_pps[1]))) -%}
        {_update_mesh_param(name, {'mesh_x_pps': mesh_pps_x, 'mesh_y_pps': mesh_pps_y})}
    {%- endmacro -%}

    #───────────< Sets the interpolation algorithm and tension for a mesh >────────────
    {%- macro set_mesh_interpolation(name, algo=None, tension=None) -%}
        {%- set algo_clean = (algo or _get_mesh_param(name, 'algo') or 'bicubic')|string|lower|trim -%}
        {%- if algo_clean == 'bicubic' -%}
            {_update_mesh_param(name, {'algo': algo_clean})}
            {_update_mesh_param(name, {'tension': tension|float(_get_mesh_param(name, 'tension'))|float(printer.configfile.settings.bed_mesh.bicubic_tension|default(0.2))})}
        {%- elif algo_clean == 'lagrange' -%}
            {_update_mesh_param(name, {'algo': algo_clean})}
        {%- elif algo_clean == 'direct' -%}
            {set_mesh_pps(name, 0)}
        {%- else -%}
            {action_respond_info("Invalid algorithm '" ~ algo ~ "'. Must be 'lagrange', 'direct' or 'bicubic'.") }
        {%- endif -%}
    {%- endmacro -%}

    #────────────────────< Loads a mesh from memory >──────────────────────
    {%- macro load_mesh(name) -%}
        #TODO add checks if all parameters are present.
        {%- if _name_in_profiles(name) -%}
            BED_MESH_PROFILE LOAD="{name}"
        {%- endif -%}
    {%- endmacro -%}

[gcode_macro TEST_BEDHELPER_DIRECT]
gcode:
    {%- from bedmesh_helper import create_mesh, adjust_mesh_point, adjust_mesh_z, copy_mesh, save_config_mesh with context -%}
    #{adjust_mesh_point('default', 3, 3, -50)}
    {create_mesh('default2', 10, 10, 0)}



