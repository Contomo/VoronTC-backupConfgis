[gcode_macro _variable_helper_macros]
gcode:
    #===========================================================================================< LOCALS/SETTINGS
    {%- set round_svf = (printer['gcode_macro _toolchanger_settings'].get('offset_calibration', {})).get('value_rounding', 3)|int -%}
    {%- set _cache = namespace(tn=None) -%}
    #===========================================================================================< IO/INTERNALS

    #────────────────────────────────────────────────────< RESPOND HELPERS
    {%- macro _respond_colored(msg, prefix, color) -%}
            {- action_respond_info('<span class="' ~ color ~ '">' ~(prefix and ('<strong>[' ~ prefix|trim ~ '] </strong>') or '') ~ msg ~ '</span>') -}
    {%- endmacro -%}
    {%- macro _msg_warn(msg = '', prefix='[Warning]') -%} {- _respond_colored(msg, prefix, 'warning--text') -}  {%- endmacro -%}
    {%- macro _msg_error(msg = '', prefix='[ERROR]')  -%} {- _respond_colored(msg, prefix, 'error--text') -}    {%- endmacro -%}
    {%- macro _raise_error(msg = '') -%}                  {- action_raise_error(msg) -}                        {%- endmacro -%}

    # ---< gcode command + "live" update
    {%- macro _sync_set_gcode_var(macro_name, var_name, value) -%}
        {%- set macro = printer['gcode_macro ' ~ (macro_name|replace('gcode_macro ', ''))] -%}
        {%- set _ = macro.update({var_name: value}) if macro[var_name] is mapping else macro.__setitem__(var_name, value) -%}
        {%- set safe_value = "'" ~ value|replace("'", "\'")|replace('"', '\"') ~ "'" if value is string else value -%}
        SET_GCODE_VARIABLE MACRO="{macro_name|replace('gcode_macro ', '')}" VARIABLE="{var_name}" VALUE="{safe_value}"
    {%- endmacro -%}

    # ---< gcode command + "live" update
    {%- macro _sync_set_svf_var(var_name, value) -%}
        {%- set svf = printer.save_variables.variables -%}
        {%- set _ = svf.update({var_name: value}) if svf[var_name] is mapping else svf.__setitem__(var_name, value) -%}
        {%- set safe_value = "'" ~ value|replace("'", "\'")|replace('"', '\"') ~ "'" if value is string else value -%}
        SAVE_VARIABLE VARIABLE={var_name} VALUE="{safe_value}"
    {%- endmacro -%}

    # ---< recursively rounds all values in a dict in place
    {%- macro _deep_round_inplace(data, precision) -%}
        {%- for k, v in data.items() if data is mapping -%}
            {%- if v is mapping -%}
                {_deep_round_inplace(v, precision)}
            {%- elif v is number -%}
                {%- set _ = data.update({k: v|float|round(precision)}) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endmacro -%}

    # ---< safely iterates into nested structures leaving default dicks behind
    {%- macro _nested_set(mutable=none, path=none, value=None, rounding=4) -%}
        {%- set local = namespace(pointer=mutable) -%}
        {%- set value = value|round(rounding) if value is number else value -%}
        {%- for key in path if path is not none and mutable is mapping -%}
            {%- if not loop.last -%}
                {%- set local.pointer = local.pointer.setdefault(key, {}) -%}
            {%- elif value is mapping and local.pointer.get(path[-1], none) is mapping -%}
                {%- set _ = local.pointer[path[-1]].update(value) -%}
            {%- else -%}
                {%- set _ = local.pointer.update({path[-1]: value}) -%}
            {%- endif -%}
        {%- else -%}
            {_msg_warn('internal error, missing mutable or path', '_nested_set')}
        {%- endfor -%}
    {%- endmacro -%}


    #===========================================================================================< GCODE VARIABLES HELPERS
    {%- macro gcode_var_update(macro_name=none, var_path=none, value=none, rounding=4, mode='merge') -%}
        {%- if macro_name is none or var_path is none -%}
            {- _msg_warn("missing any of macro_name, var_path", 'gcode_var_update') -}
        {%- else -%}
            {%- set macro_key = 'gcode_macro ' ~ macro_name -%}
            {%- set parts     = (var_path|string|trim).split('.') -%}
            {%- set var_name  = parts.pop(0) -%}
            {%- if macro_key not in printer or var_name not in printer[macro_key] -%}
                {- _msg_warn("couldn't find macro " ~ macro_name ~ " in printer or " ~ var_name ~ " in macro", 'gcode_var_update') -}
            {%- elif mode == 'replace' -%}
                {%- set root_data = value -%}
            {%- else -%}
                {%- set original_data = printer[macro_key].get(var_name, {}) -%}
                {%- set root_data = original_data.copy() if original_data is mapping else {} -%}
                {%- if parts -%}
                    {_nested_set(root_data, parts, value)}
                {%- elif value is mapping and root_data is mapping -%}
                    {%- set _ = root_data.update(value) -%}
                {%- else -%}
                    {%- set root_data = value -%}
                {%- endif -%}
            {%- endif -%}
            {_sync_set_gcode_var(macro_name, var_name, root_data)}
        {%- endif -%}
    {%- endmacro -%}

    # ---< easily add / subtract to values stored in another gcode-macro’s variables
    # usage:
    #   {svh.gcode_var_edit_value('MY_MACRO', 'my_var.sub_key',  +1)}
    #   {svh.gcode_var_edit_value('MY_MACRO', 'my_var',         -0.2)}
    {%- macro gcode_var_edit_value(macro_name=None, var_path=None, value_to_add=None) -%}
        {%- if macro_name is none or var_path is none or value_to_add is none -%}
            {- _msg_warn("gcode_var_edit_value requires macro_name, var_path and value_to_add " ~ "(" ~ macro_name ~ ":" ~ var_path ~ ":" ~ value_to_add ~ " given)", 'gcode_var_edit_value') -}
        {%- else -%}
            {%- set macro_key = 'gcode_macro ' ~ macro_name -%}
            {%- if macro_key not in printer -%}
                {- _msg_warn("macro '" ~ macro_name ~ "' not found in printer", 'gcode_var_edit_value') -}
            {%- else -%}
                {%- set parts    = (var_path|string|trim).split('.') -%}
                {%- set var_name = parts.pop(0) -%}
                {%- if var_name not in printer[macro_key] -%}
                    {- _msg_warn("variable '" ~ var_name ~ "' not found in macro '" ~ macro_name ~ "'", 'gcode_var_edit_value') -}
                {%- else -%}
                    {%- set root_data = printer[macro_key].get(var_name, {}) -%}
                    {%- set root_data = (root_data.copy() if root_data is mapping else root_data) -%}
                    {%- set ns = namespace(ptr=root_data) -%}
                    {%- for key in parts -%}
                        {%- set ns.ptr = ns.ptr[key] if ns.ptr is mapping and key in ns.ptr else 0 -%}
                    {%- endfor -%}
                    {%- set current_value = 0 if ns.ptr is mapping else ns.ptr -%}
                    {%- set num_current, num_delta = current_value|float(None), value_to_add|float(None) -%}
                    {%- if num_current is none or num_delta is none -%}
                        {- _msg_warn("Cannot add, non-numeric value at path '" ~ var_path ~ "'",'gcode_var_edit_value') -}
                    {%- else -%}
                        {- gcode_var_update(macro_name, var_path, num_current + num_delta) -}
                    {%- endif -%}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}


    {%- macro _get_tool_target(tool_number) -%}
        {%- set extruder_name = printer[printer.toolchanger.tool_names[tool_number|int]].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].target}
        {%- else -%}{-1}{_msg_warn("cannot get tool '" ~ tool_number ~ "' target, has extruder")}{%- endif -%}
    {%- endmacro -%}

    #===========================================================================================< TEMP STATE SAVING
    # ---< save to variable while also keeping state locally (no issues with saving and restoring in the same exec frame)
    {%- macro save_tool_targets_to_variable(macro, variable, turn_heaters_off = False) -%}
        {%- if "gcode_macro " ~ macro in printer and variable|string|lower in printer["gcode_macro " ~ macro] -%}
            {%- set original = printer["gcode_macro " ~ macro].get(variable|string|lower, {}) -%}
            {%- set temps = original if original is mapping else {} -%}
            {%- for tn in printer.toolchanger.tool_numbers -%}
                {%- set _ = temps.update({tn: _get_tool_target(tn)|float}) -%}
                {'M104 T' ~ tn ~ ' S0' ~ '\n' if turn_heaters_off else ''}
            {%- endfor -%}
            {- _sync_set_gcode_var(macro, variable, temps) -}
        {%- else -%}
            {- _msg_warn("macro '" ~ macro ~ "' not found in printer or variable '" ~ variable ~ "' not found in macro", 'save_tool_targets_to_variable') -}
        {%- endif -%}
    {%- endmacro -%}

    # ---< restores from variable (or this local frame)
    {%- macro restore_tool_targets_from_variable(macro, variable, command='M104', tool_number=printer.toolchanger.tool_numbers) -%}
        {%- if "gcode_macro " ~ macro in printer and variable|string|lower in printer["gcode_macro " ~ macro] -%}
            {%- set saved_temps = printer["gcode_macro " ~ macro].get(variable|string|lower, {}) -%}
            {%- for tn, temp in saved_temps.items() if saved_temps and saved_temps is mapping and (tn == tool_number|int(-1) if tool_number is number else tn in tool_number) -%}
                {command ~ ' T' ~ tn ~ ' S' ~ temp ~ '\n'}
            {%- else -%}
                {- _msg_warn("Data in '" ~ variable ~ "' is not a valid temperature dictionary.") -}
            {%- endfor -%}
        {%- else -%}
            {- _msg_warn("Cannot restore temps: macro '" ~ macro ~ "' or variable '" ~ variable ~ "' not found. (or empty/not mapping)", 'restore_tool_targets_from_variable') -}
        {%- endif -%}
    {%- endmacro -%}
    
    #===========================================================================================< SAVE VARIABLES EDITOR
    # ---< update a key in the save variable file, may be nested. may be called repeatedly (keeps state)
    # usage:
    #   - {svh.svf_update('yourvar.' ~ key_in_var, value_for_key}
    #
    # less prefered:
    #   - {svh.svf_update('yourvar', {'key_in_var', value_for_key}}
    #
    {%- macro svf_update(path=None, value=None, mode='merge') -%}
        {%- if path is none -%}
            {- _msg_warn("missing path", 'svf_update') -}
        {%- else -%}
            {%- set path_parts = (path|string).split('.') -%}
            {%- set variable_name = path_parts.pop(0) -%}
            {%- if mode == 'replace' -%}
                 {%- set root_data = value -%}
            {%- else -%}
                {%- set original_data = printer.save_variables.variables.get(variable_name, {}) -%}
                {%- set root_data = original_data.copy() if original_data is mapping else {} -%}
                {%- if path_parts -%}
                    {_nested_set(root_data, path_parts, value)}
                {%- elif value is mapping -%}
                    { _deep_round_inplace(value, round_svf) }
                    {%- set _ = root_data.update(value) -%}
                {%- else -%}
                    {%- set root_data = value|float|round(round_svf) if value is number else value -%}
                {%- endif -%}
            {%- endif -%}
           {_sync_set_svf_var(variable_name, root_data)}
        {%- endif -%}
    {%- endmacro -%}

    # ---< easily add/substract to values in the save variable file, may also be nested. 
    {%- macro svf_edit_value(path=None, value_to_add=None) -%}
        {%- if path is none or value_to_add is none -%}
            {- _msg_warn("svf_edit_value requires path and value (" ~ path ~ ": " ~ value_to_add ~ " were given)", 'svf_edit_value') -}
        {%- else -%}
            {%- set path_parts = (path|string|trim).split('.') -%}
            {%- set var_name = path_parts[0] -%}
            {%- set keys = path_parts[1:] -%}
            {%- set root_data = printer.save_variables.variables.get(var_name, {}) -%}
            {%- set root_data = root_data if root_data is not mapping else root_data.copy() -%} # copy cause paranoia
            {%- set ns = namespace(ptr=root_data) -%}
            {%- for key in keys -%}
                {%- set ns.ptr = ns.ptr[key] if ns.ptr is mapping and key in ns.ptr else 0 -%}
            {%- endfor -%}
            {%- set current_value = 0 if ns.ptr is mapping else ns.ptr -%}
            {%- set num_current, num_to_add = current_value|float(None), value_to_add|float(None) -%}
            {%- if num_current is none or num_to_add is none -%}
                {- _msg_warn("Cannot add, non-numeric value at path '" ~ path ~ "'", '[SVF_ERR]') -}
            {%- else -%}
                {- svf_update(path, num_current + num_to_add) -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

  



   