[gcode_macro _global_macros]
gcode:
    #──────────────────────────< utility >──────────────────────────
    {%- macro clamp(value, min_val, max_val) -%}
        {[[value|float, max_val|float]|min, min_val|float]|max}
    {%- endmacro -%}

    {%- macro lerp(a, b, t) -%} #(linear interpolate)
        {a|float + (b|float - a|float) * t|float}
    {%- endmacro -%}

    {%- macro map(value, in_min, in_max, out_min, out_max) -%}
        {(value|float - i_min|float) * (o_max|float - o_min|float) / (i_max|float - i_min|float) + o_min|float}
    {%- endmacro -%}




    #───< just gimme the god damn value, idc if coord, list, dict tuple, upper, lower go fuckyourself....
    {%- macro _get_ax(axis, container, fallback) -%}
        {%- set axes = ['x','y','z'] -%}
        {%- set letter = axes[axis] if axis is number else axis|string|lower -%}
        {%- if container is sequence -%}
            {%- set result = container[axes.index(letter)]|default(fallback) -%}
        {%- else -%}
            {%- set result = container.get(letter)|default(container.get(letter|upper)|default(fallback)) -%}
        {%- endif -%}
        {result}
    {%- endmacro -%}

    #──────────────────────────< calculate distance between two points
    {%- macro point_distance(p1, p2) -%}
        {%- set dx = _get_ax(0, p1)|float - _get_ax(0, p2)|float -%}
        {%- set dy = _get_ax(1, p1)|float - _get_ax(1, p2)|float -%}
        {%- set dz = _get_ax(2, p1)|float - _get_ax(2, p2)|float -%}
        {math.sqrt(dx*dx + dy*dy + dz*dz)}
    {%- endmacro -%}
