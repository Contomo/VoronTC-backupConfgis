[gcode_macro _global_macros]
gcode:
    #──────────────────────────< constant π >────────────────────────────
    {%- set const_pi = 3.14159265358 -%}
    {%- set const_two_pi = 6.28318530718 -%}
    {%- set const_e  = 2.71828182845 -%}

    #──────────────────────────< Angle Conversions >──────────────────────────
    {%- set deg_to_rad = const_pi / 180.0 -%}
    {%- set rad_to_deg = 180.0 / const_pi -%}

    {%- macro degrees(radians) -%}
        {radians|float * rad_to_deg}
    {%- endmacro -%}
    
    {%- macro radians(degrees) -%}
        {degrees|float * deg_to_rad}
    {%- endmacro -%}

    {%- macro sign(n) -%}
        {%- set n = n|float -%}
        {1 if n > 0 else -1 if n < 0 else 0}
    {%- endmacro -%}


    #──────────────────────────< utility >──────────────────────────
    {%- macro clamp(value, min_val, max_val) -%}
        {[[value|float, max_val|float]|min, min_val|float]|max}
    {%- endmacro -%}

    {%- macro lerp(a, b, t) -%} #(linear interpolate)
        {a|float + (b|float - a|float) * t|float}
    {%- endmacro -%}

    #──────────────────────────< factorial n! >──────────────────────────
    {%- macro fact(n) -%}
        {%- set ns = namespace(r=1.0) -%}
        {%- for i in range(2, n+1) -%}{%- set ns.r = ns.r * i -%}{%- endfor -%}
        {ns.r}
    {%- endmacro -%}

    #──────────────────────────< integer power x^k >────────────────────
    {%- macro ipow(x, k) -%}
        {%- set ns = namespace(r=1.0) -%}
        {%- for _ in range(k) -%}{%- set ns.r = ns.r * x -%}{%- endfor -%}
        {ns.r}
    {%- endmacro -%}

    #──────────────────────────< sqrt(x) – 3× Newton-Raphson >──────────
    {%- macro sqrt(x) -%}
        {%- set ns = namespace(g = x/2.0) -%}
        {%- for _ in range(3) -%}{%- set ns.g = 0.5 * (ns.g + x / ns.g) -%}{%- endfor -%}
        {ns.g}
    {%- endmacro -%}

    #──────────────────────────< sin(x) (rad) – 5-term Taylor >─────────
    {%- macro sin(x, precision=5) -%}
        {%- set x_norm = (x|float + const_pi) % const_two_pi - const_pi %}
        {%- set calc_ns = namespace(term=x_norm, sum=x_norm) -%}
        {%- for n in range(1, precision|int) -%}
            {%- set calc_ns.term = calc_ns.term * (-1.0) * x_norm * x_norm / ((2*n) * (2*n + 1)) -%}
            {%- set calc_ns.sum  = calc_ns.sum  + calc_ns.term -%}
        {%- endfor -%}
        { calc_ns.sum }
    {%- endmacro -%}

    #──────────────────────────< cos(x) (rad) – 5-term Taylor >─────────
    {%- macro cos(x, precision=5) -%}
        {%- set x_norm = (x|float + const_pi) % const_two_pi - const_pi %}
        {%- set calc_ns = namespace(term=1.0, sum=1.0) -%}
        {%- for n in range(1, precision|int) -%}
            {%- set calc_ns.term = calc_ns.term * (-1.0) * x_norm * x_norm / ((2*n - 1) * (2*n)) -%}
            {%- set calc_ns.sum  = calc_ns.sum  + calc_ns.term -%}
        {%- endfor -%}
        { calc_ns.sum }
    {%- endmacro -%}


    #──────────────────────────< tan >─────────
    {%- macro tan(x) -%}
        {sin(x)|float/cos(x)|float}
    {%- endmacro -%}

    #──────────────────────────< atan2(y,x) – 5-term series >───────────
    {%- macro atan2(y, x) -%}
        {%- set ns = namespace(angle = 0.0) -%}
        {%- set x_f = x|float -%}
        {%- set y_f = y|float -%}
        {%- if x_f == 0.0 -%}
            {%- set ns.angle = (const_pi / 2.0) if y_f >= 0 else -(const_pi / 2.0) -%}
        {%- else -%}
            {%- set z = y_f / x_f -%}
            {%- set sign = -1.0 if z < 0 else 1.0 -%}
            {%- set z_abs = z * sign -%}
            {%- set atan_approx = (const_pi / 2.0) - (z_abs / (z_abs*z_abs + 0.28)) if z_abs > 1.0 else z_abs / (1.0 + 0.28 * z_abs*z_abs) -%}
            {%- set ns.angle = sign * atan_approx -%}
            {%- if x_f < 0.0 -%}
                {%- set ns.angle = ns.angle + const_pi if y_f >= 0 else ns.angle - const_pi -%}
            {%- endif -%}
        {%- endif -%}
        { ns.angle }
    {%- endmacro -%}


    #──────────────────────────< just gimme the god damn value, idc if coord, list, dict....
    {%- macro get_ax(axis, container, fallback) -%}
        {%- set axes = ['x','y','z'] -%}
        {%- set letter = axes[axis] if axis is number else axis|string|lower -%}
        {%- if container is sequence -%}
            {%- set result = container[axes.index(letter)]|default(fallback) -%}
        {%- else -%}
            {%- set result = container.get(letter)|default(container.get(letter|upper)|default(fallback)) -%}
        {%- endif -%}
        {result}
    {%- endmacro -%}

    #──────────────────────────< calculate distance between two points
    {%- macro point_distance(p1, p2) -%}
        {%- set dx = get_ax(0, p1)|float - get_ax(0, p2)|float -%}
        {%- set dy = get_ax(1, p1)|float - get_ax(1, p2)|float -%}
        {%- set dz = get_ax(2, p1)|float - get_ax(2, p2)|float -%}
        {sqrt(dx*dx + dy*dy + dz*dz)}
    {%- endmacro -%}


[gcode_macro MY_TEST]
gcode:
    # 1. Get a direct reference to the literal_eval function.
    {%- set literal_parser = printer.printer.lookup_object('gcode_macro')._action_raise_error.__globals__['ast'].literal_eval -%}

    # 2. Call the macro. It returns a string.
    {% set result_string = get_user_data() %}
    # result_string is now the string "('erik', 42)"

    # 3. Use the parser to convert the string back into a NATIVE TUPLE.
    {% set native_tuple = literal_parser(result_string) %}
    
    # 4. Now, because native_tuple IS a tuple, it can be unpacked. NO CRASH.
    {% set name, age = native_tuple %}

    {action_respond_info("User: " ~ name ~ ", Age: " ~ age)}