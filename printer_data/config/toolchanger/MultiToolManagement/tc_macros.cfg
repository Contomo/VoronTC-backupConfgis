
# 
# In here one finds stuff like temperature commands 
# global required macros, and or fan stuffs
# 
[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set p, tc = printer, printer.toolchanger %}

    # ── Parse parameters ------------------------------------------------------
    {% set tn   = params['T']|default(tc.tool_number)|int %}
    {% set temp = params['S']|default(0)|float(0) %}

    # ── Resolve remapped T-commands during a print ---------------------------
    {% if p.print_stats.state|lower == 'printing' and 'gcode_macro T' ~ tn in p %}
        {% set tn = p['gcode_macro T' ~ tn].tool_number|default(tn) %}
    {% endif %}

    # ── Sanity checks & heater lookup ----------------------------------------
    {% if tn in tc.tool_numbers %}
        {% set extruder = tch.get_tool_extruder(tn) %}
        {% if extruder %}
            {% set cur_target = tch.get_tool_target(tn)|float   %}
            SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={temp}
            {% if cur_target != temp %}
                {% if temp == 0.0 %}
                    {tch.respond_colored('turned off ' ~ tch.tool_key(tn), 'M104', 'grey')}
                {% else %}
                    {tch.respond_colored(('lowering ' if cur_target > temp else 'heating ') ~ tch.tool_key(tn) ~ ' to ' ~ temp|round(1) ~ ' °C', 'M104', 'grey')}
                {% endif %}
            {% endif %}
        {% else %}
            {tch.respond_colored('tool ' ~ tch.tool_key(tn) ~ 'has no extruder', 'M104', 'error--text')}
        {% endif %}
    {% elif tn == -1 %}
        {tch.respond_colored('no tool selected', 'M104', 'error--text')}
    {% else %}
        {tch.respond_colored('unknown tool number ' ~ tn, 'M104', 'error--text')}
    {% endif %}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>] [D<deadband>] [L<min temp>] [U<max temp>]
variable_default_deadband: 10.0 # Default ± deadband
gcode:
    {% import toolchanger_helper as tch with context %}
    {% set p, tc = printer, printer.toolchanger %}

    # ── Parse parameters ------------------------------------------------------
    {% set tn       = params['T']|default(tc.tool_number)|int %}
    {% set target   = params['S']|float(0) %}
    {% set deadband = params['D']|default(default_deadband)|float %}
    {% set min_temp = params['L']|default(none)|float(none) %}
    {% set max_temp = params['U']|default(none)|float(none) %}

    # ── Resolve remapped T-commands during a print ---------------------------
    {% if p.print_stats.state|lower == 'printing' and 'gcode_macro T' ~ tn in p %}
        {% set tn = p['gcode_macro T' ~ tn].tool_number|default(tn) %}
    {% endif %}

    # ── Sanity checks & heater lookup ----------------------------------------
    {% if tn in tc.tool_numbers %}
        {% set extruder = tch.get_tool_extruder(tn) %}
        {% if extruder %}

            # ── 0 °C or below = turn heater off --------------------------------
            {% if target <= 0 %}
                {tch.respond_colored('turning off ' ~ tch.tool_key(tn) ~ '\'s heater', 'M109', 'grey')}
                SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={target}
            {% else %}

                # ── Build MIN / MAX window -----------------------------------
                {% set min_temp = target - deadband if min_temp is none else min_temp %}
                {% set max_temp = target + deadband if max_temp is none else max_temp %}

                # ── Apply set-point and message if it differs ----------------
                SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={target}
                {% set cur_target = tch.get_tool_target(tn)|float %}
                {% if (cur_target - target)|abs > 10 %}    
                    #{tch.respond_colored(('lowering ' if cur_target > target else 'heating ') ~ tch.tool_key(tn) ~ ' to ' ~ target|round(1) ~ ' °C', 'M109', 'grey')}
                {% endif %}

                # ── Wait until within range ----------------------------------
                {tch.respond_colored('waiting for ' ~ tch.tool_key(tn) ~ ' to be between '~ min_temp|round(1) ~ '–' ~ max_temp|round(1) ~ ' °C','M109', 'grey')}
                TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={min_temp} MAXIMUM={max_temp}
            {% endif %}
        {% else %}
            {tch.respond_colored('tool ' ~ tch.tool_key(tn) ~ ' has no extruder', 'M109', 'error--text')}
        {% endif %}
    {% elif tn == -1 %}
        {tch.respond_colored('no tool selected', 'M109', 'error--text')}
    {% else %}
        {tch.respond_colored('unknown tool number ' ~ tn, 'M109', 'error--text')}
    {% endif %}


[gcode_macro SAVE_TOOLTEMP_STATE]
description: Save tool heater targets for later RESTORE_TOOLTEMP_STATE
variable_slots: {}
gcode:
    {% set name = params.NAME|default('default') %}
    {% set targets = {} %}
    {% for _name in printer.toolchanger.tool_names if printer.toolchanger %}
        {% set tool = printer[_name] %}
        {% if tool.extruder %}
            {% set _ = targets.update( {tool.tool_number: printer[tool.extruder].target} ) %}
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG="SAVE_TOOLTEMP_STATE: missing [toolchanger]"
    {% endfor %}
    {% for tn, _ in targets.items() if params.DISABLE|default(0)|int %}
        M104 T{tn} S0
    {% endfor %}
    {% set _ = slots.update( {name: targets} ) %}
    SET_GCODE_VARIABLE MACRO=SAVE_TOOLTEMP_STATE VARIABLE=slots VALUE="{slots}"

[gcode_macro RESTORE_TOOLTEMP_STATE]
description: Restore tool heater targets saved by SAVE_TOOLTEMP_STATE
gcode:
    {% set name = params.NAME|default('default') %}
    {% set slots = printer['gcode_macro SAVE_TOOLTEMP_STATE'].slots %}
    {% set targets = slots.get(name, {}) %}
    {% for tn, target in targets.items() if targets %}
        M104 T{tn} S{target}
    {% else %}
        RESPOND TYPE=error MSG="RESTORE_TOOLTEMP_STATE: missing state '{name}'"
    {% endfor %}
    {% for tn, target in targets.items() if params.WAIT|default(1)|int %}
        M109 T{tn} S{target}
    {% endfor %}
    {% set _ = slots.pop(name, None) %}
    SET_GCODE_VARIABLE MACRO=SAVE_TOOLTEMP_STATE VARIABLE=slots VALUE="{slots}"


#################################################################################################################
# _TAP_PROBE_ACTIVATE ###########################################################################################
#################################################################################################################
[gcode_macro _TAP_PROBE_ACTIVATE] #TODO ADD RIGHT USAGE FOR OTHERS LATER
description: Ensure safe temp for bed probing
variable_max_temp: 150
gcode:
  {% set tcs = printer['gcode_macro _toolchanger_settings'] %}
  {% if tcs.use_tap_requires_temperature == True %}
      {% set actual_temp = printer[params.HEATER].temperature %}
      {% set target_temp = printer[params.HEATER].target %}
      {% if target_temp > max_temp %}
          # fix _UNIFIED_RESPOND
          { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
          SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
      {% endif %}
      # Temperature target is already low enough, but nozzle may still be too hot.
      {% if actual_temp > max_temp  + 2 %}
          { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
          TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
      {% endif %}
    {% endif %}
