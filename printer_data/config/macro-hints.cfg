### Filters
Usage:
var.foo|bar()

'abs', 'attr', 'batch', 'capitalize', 'center', 'count', 'd', 'default', 'dictsort',
'e', 'escape', 'filesizeformat', 'first', 'float', 'forceescape', 'format', 'groupby',
'indent', 'int', 'items', 'join', 'last', 'length', 'list', 'lower',
'map', 'max', 'min', 'pprint', 'random', 'reject', 'rejectattr', 'replace',
'reverse', 'round', 'safe', 'select', 'selectattr', 'slice', 'sort', 'string',
'striptags', 'sum', 'title', 'tojson', 'trim', 'truncate', 'unique', 'upper',
'urlencode', 'urlize', 'wordcount', 'wordwrap', 'xmlattr'














{% set l = namespace(entries=[], cur='') %}
  {% for char in raw %}
    {% set l.cur = l.cur ~ char if ('{' or '}') in (l.cur or char) else l.cur %}
    {% set l.cur = "" if ('{' and '}') in l.cur and l.entries.append(l.cur) is none else l.cur %}
  {% endfor %}

cut up [{}, {}, {}, {}, {}]
into {} parts. (still strings)



      {% set min_tick = min_val|round(0, 'floor')|int %}
      {% set max_tick = max_val|round(0, 'ceil')|int %}
      ceil and floor actually work?



Without the jinja2.ext.do extension, you can do this:

{% set x=my_dict.__setitem__("key", "value") %}
Disregard the x variable and use the dictionary which is now updated.

This also works for len() (__len__()), str() (__str__()), repr() (__repr__()) and many similar things.




variable hello:None
SET_GCODE_VARIABLE MACRO=TEST_STUFF VARIABLE=hello VALUE="{my_object | pprint | replace("\n", "") | replace("\"", "\\\"")}"
SAVE_VARIABLE VARIABLE="my_saved_variable" VALUE="{my_object | pprint | replace("\n", "") | replace("\"", "\\\"")}"

__getitem__ to get items from dicts.


 printer.configfile.config["toolchanger"]["params_fast_speed"]|int                                                             
 get tool from tool number or active
          {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
          {% set tool = printer.tool[printer.tool_names[tn]] %}




[gcode_macro 1]
variable_one: 0
gcode:
    SET_GCODE_VARIABLE MACRO=2 VARIABLE=two VALUE={one}
    RESPOND MSG="{printer["gcode_macro 2"].two}"
    RESPOND MSG="{one}"
    RESPOND MSG="{params.VALUEPASSEDINSTRINGONE}"
   
[gcode_macro 2]
variable_two: 0
gcode:
    SET_GCODE_VARIABLE MACRO=1 VARIABLE=one VALUE={two}
    RESPOND MSG="{printer["gcode_macro 1"].one}"
    RESPOND MSG="{two}"
    RESPOND MSG="{params.VALUEPASSEDINSTRINGTWO}"

{% if not printer['gcode_macro PRINT_START'].printing %} # macro state
{% if printer.idle_timeout.state|string != "Printing" %} MOVE_TO_CENTER {% endif %} # may be printing while home or qgl
die position von printer.toolhead.position[2] ist absolut




<svg viewBox="0 0 400 400" width="250" height="250" style="display: block; margin: 1em auto; background: transparent;">
  <!-- Cube faces using polygon projection -->
  <!-- XY face (bottom/front) -->
  <polygon points="120,300 300,300 340,260 160,260" fill="rgba(255,0,0,0.1)" stroke="rgba(255,0,0,0.3)" />

  <!-- YZ face (left) -->
  <polygon points="120,300 120,140 160,100 160,260" fill="rgba(0,0,255,0.1)" stroke="rgba(0,0,255,0.3)" />

  <!-- XZ face (back) -->
  <polygon points="160,260 160,100 340,100 340,260" fill="rgba(0,255,0,0.1)" stroke="rgba(0,255,0,0.3)" />

  <!-- Axes Labels -->
  <text x="345" y="265" font-size="12" fill="red">X</text>
  <text x="165" y="95" font-size="12" fill="green">Y</text>
  <text x="105" y="135" font-size="12" fill="blue">Z</text>
</svg>