#SET_KINEMATIC_POSITION [X=<value>] [Y=<value>] [Z=<value>] [SET_HOMED=<[X][Y][Z]>] [CLEAR_HOMED=<[X][Y][Z]>]

#########################################################################################
#    [homing_override]    ###############################################################
#########################################################################################
[homing_override] # fix check if we crashed
axes: xyz
gcode:
    {% set p = printer %}
    {% set tc = p.toolchanger %}
    {% set tcs = p['gcode_macro _toolchanger_settings'] %}
    {% set actn = p.tool_probe_endstop.active_tool_number|int %}
    {% set restoreAccel = p.toolhead.max_accel|float %}
    {% set homeparams = 'X Y Z' if 'X' not in params and 'Y' not in params and 'Z' not in params else rawparams %}
    {% if (tc.status != "ready" or tc.tool_number != actn or actn == -1) and tc.status != "error" %} 
      INITIALIZE_TOOLCHANGER 
    {% else %}
        DETECT_ACTIVE_TOOL_PROBE
        
        _TAP_PROBE_ACTIVATE 
        STOP_TOOL_PROBE_CRASH_DETECTION
        SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
        G90
      #🟨────────────────────────────────────────────────────────────────────────────────────────#
      #🟨 Feel free to change anything, just remember you need _TC_ADJUST_HOME_OFFSET for tool probing.
      #🟨────────────────────────────────────────────────────────────────────────────────────────#
        # if we are quite far to the front, move back first
        {% if 'Z' in homeparams and p.toolhead.position[1] < tc.params_safe_y - 50 and p.toolhead.position[1]|int != 0 and p.toolhead.position[2] > 100 and 'XYZ' in p.toolhead.homed_axes|upper %} 
          {% if tcs.macro_accel_divider|default(False) %} 
            SET_VELOCITY_LIMIT ACCEL={(p.configfile.config.printer.max_z_accel|float / tcs.macro_accel_divider|float)|int} 
          {% endif %}
          # move to save postion if we are up at the docs.
          G0 Y{tc.params_safe_y} 
        {% endif %}# p.toolhead.homed_axes contains "xyz" after setting kin pos 
        # divide accel if we want to
        {% if tcs.macro_accel_divider|default(False) %} 
          SET_VELOCITY_LIMIT ACCEL={(p.configfile.config.printer.max_z_accel|float / tcs.macro_accel_divider|float)|int} 
        {% endif %}
        # do a z home first.
        {% if 'Z' not in p.toolhead.homed_axes|upper %} 
          G28 Z 
        {% endif %}
        G0 Z10 F2500  
        # home Y first
        {% if 'Y' in homeparams or 'X' in homeparams %} 
          HOME_Y 
        {% endif %}
        # home X next
        {% if 'X' in homeparams %}
           HOME_X
        {% endif %}
        # home z last
        {% if 'Z' in homeparams %}
          HOME_Z
        {% endif %}
        # load gcode offsets, restore acceleration.
        
        TC_LOAD_OFFSETS # ❌ note: whatever you change this must stay at the end of whatever youre doing
        STATUS_READY
        SET_VELOCITY_LIMIT ACCEL={restoreAccel}
    {% endif %}

#########################################################################################
#    HOME_X   
#########################################################################################
[gcode_macro HOME_X]
variable_retract_after_home: 10
gcode:
  # save current acceleration
  {% set restoreAccel = printer.toolhead.max_accel|float %}
  {% set tcs = printer['gcode_macro _toolchanger_settings'] %}
  # set accel based on setting.
  {% if tcs.get('macro_accel_divider', False) %} SET_VELOCITY_LIMIT ACCEL={(printer.configfile.config.printer.max_accel|float // tcs.macro_accel_divider|float)|int} {% endif %}
  # get homing direction
  {% set x_dir = 1 if printer.configfile.config['stepper_x']['homing_positive_dir'] == True else 0 %}
  {% set y_dir = 1 if printer.configfile.config['stepper_y']['homing_positive_dir'] == True else 0 %}
  #────────────────────────────────────────────────────────────────────────────────────────
  # home X
  G28 X
  # relative move
  G91
  # retract a bit 
  G0 X{retract_after_home|int * x_dir} Y{retract_after_home|int * y_dir} F{printer.toolchanger.params_fast_speed}
  # absolute mode
  G90
  SET_VELOCITY_LIMIT ACCEL={restoreAccel}

#########################################################################################
#    HOME_Y   
#########################################################################################
[gcode_macro HOME_Y]
gcode:
  # save current acceleration
  {% set restoreAccel = printer.toolhead.max_accel|float %}
  {% set tcs = printer['gcode_macro _toolchanger_settings'] %}
  # set accel based on setting.
  {% if tcs.get('macro_accel_divider', False) %} 
    SET_VELOCITY_LIMIT ACCEL={(printer.configfile.config.printer.max_accel|float // tcs.macro_accel_divider|float)|int} 
  {% endif %}
  #────────────────────────────────────────────────────────────────────────────────────────
  # home Y
  G28 Y
  # restore last acceleration
  SET_VELOCITY_LIMIT ACCEL={restoreAccel}

#########################################################################################
#    HOME_Z   
#########################################################################################
[gcode_macro HOME_Z]
# randomly shifts the XY position on z home by that amount.
# prevents excessive wear of a single spot on heated bed.
variable_z_home_xy_random: 10
gcode:
  # save current acceleration
  {% set restoreAccel = printer.toolhead.max_accel|float %}
  {% set tcs = printer['gcode_macro _toolchanger_settings'] %}
  {% set step_x = printer.configfile.config['stepper_x'] %}
  {% set step_y = printer.configfile.config['stepper_y'] %}
  {% set center_x = ((step_x.position_max|float) / 2.0) + ((range((z_home_xy_random|int * -5), (z_home_xy_random|int * 5))|random) / 10.0) %}
  {% set center_y = ((step_y.position_max|float) / 2.0) + ((range((z_home_xy_random|int * -5), (z_home_xy_random|int * 5))|random) / 10.0) %}

  {% if tcs.get('macro_accel_divider', False) %} 
    SET_VELOCITY_LIMIT ACCEL={(printer.configfile.config.printer.max_accel|float // tcs.macro_accel_divider|float)|int} 
  {% endif %}
  #────────────────────────────────────────────────────────────────────────────────────────
  G0 X{center_x|round(2)} Y{center_y|round(2)} F{printer.toolchanger.params_fast_speed}

  {% if tcs.get('macro_accel_divider', False) %} 
    SET_VELOCITY_LIMIT ACCEL={(printer.configfile.config.printer.max_z_accel|float // tcs.macro_accel_divider|float)|int} 
  {% endif %}
  G28 Z


  _TC_ADJUST_HOME_OFFSET  # ❌ note: whatever you change this must stay at the end of whatever youre doing
  
  SET_VELOCITY_LIMIT ACCEL={restoreAccel}
