# chat gippity gibberish dont use this

#####################################################################
# 1) SEARCH_INIT
#    Called by user:  SEARCH_INIT S=some_term
#    - sets the BFS queue to [ { keys_list: ["printer"], path_text: "printer" } ]
#    - resets an empty results list
#    - schedules [delayed_gcode search_loop]
#####################################################################
[gcode_macro SEARCH_INIT]
variable_queue: []
variable_results: []
variable_search_term: ""
variable_color_path: "rgb(128,128,128)"
variable_color_key: "rgb(0,150,255)"
variable_color_value: "rgb(255,200,50)"
variable_color_type: "rgb(180,180,180)"
variable_color_match: "rgb(255,0,100)"

gcode:
  {% set s = params.S|default("") %}
  {% if s|length == 0 %}
    RESPOND MSG="<span style='color:red'>Error: Provide S=some_term</span>"
  {% else %}
    {% set quoted = "'" ~ s ~ "'" %}
    SET_GCODE_VARIABLE MACRO=SEARCH_INIT VARIABLE=search_term VALUE={quoted}

    {% set start_item = { "keys_list": ["printer"], "path_text": "printer" } %}
    {% set queue_list = [ start_item ] %}
    SET_GCODE_VARIABLE MACRO=SEARCH_INIT VARIABLE=queue VALUE={queue_list}

    {% set empty_list = [] %}
    SET_GCODE_VARIABLE MACRO=SEARCH_INIT VARIABLE=results VALUE={empty_list}

    RESPOND MSG="<div>Initialized BFS for &quot;{s}&quot;</div>"
    UPDATE_DELAYED_GCODE ID=search_loop DURATION=0
  {% endif %}




#####################################################################
# 2) [delayed_gcode search_loop]
#    This runs repeatedly, calling SEARCH_STEP,
#    then re-schedules itself if the queue is not empty
#    or calls SEARCH_DONE if BFS is complete.
#####################################################################
[delayed_gcode search_loop]
gcode:
  {% set queue = printer["gcode_macro SEARCH_INIT"].queue %}
  {% if queue|length > 0 %}
    SEARCH_STEP
    UPDATE_DELAYED_GCODE ID=search_loop DURATION=0
  {% else %}
    SEARCH_DONE
    CANCEL_DELAYED_GCODE ID=search_loop
  {% endif %}



#####################################################################
# 3) SEARCH_STEP
#    Processes a small "batch" of BFS items each time it runs:
#    - For each BFS item, we check whether it's a dict, look for matches,
#      highlight them, and enqueue sub-dicts to go deeper.
#    - Then we store the updated queue/results back to macro variables.
#####################################################################
[gcode_macro SEARCH_STEP]
variable_batch: 5
gcode:
  {% set batch       = printer["gcode_macro SEARCH_STEP"].batch|int %}
  {% set queue       = printer["gcode_macro SEARCH_INIT"].queue %}
  {% set results     = printer["gcode_macro SEARCH_INIT"].results %}
  {% set needle      = printer["gcode_macro SEARCH_INIT"].search_term %}
  {% set color_path  = printer["gcode_macro SEARCH_INIT"].color_path %}
  {% set color_key   = printer["gcode_macro SEARCH_INIT"].color_key %}
  {% set color_val   = printer["gcode_macro SEARCH_INIT"].color_value %}
  {% set color_type  = printer["gcode_macro SEARCH_INIT"].color_type %}
  {% set color_match = printer["gcode_macro SEARCH_INIT"].color_match %}

  {% if queue|length == 0 %}
    RESPOND MSG="<span style='color:red'>Queue empty, skipping</span>"
  {% else %}
    {% set ns = namespace(
      new_queue   = [],
      new_results = results,
      qsize       = queue|length
    ) %}

    # We process up to 'batch' items from the front
    {% for i in range(batch) %}
      {% if i >= ns.qsize %}
        ; no more items to process
      {% else %}
        {% set item = queue[i] %}
        {% set subkeys = item["keys_list"] %}
        {% set path_txt = item["path_text"] %}

        ; Descend 'printer' object
        {% set obj = printer %}
        {% for k in subkeys %}
          {% if obj is mapping and (k in obj) %}
            {% set obj = obj[k] %}
          {% else %}
            {% set obj = None %}
          {% endif %}
        {% endfor %}

        {% if obj is mapping %}
          ; BFS expansion + search
          {% for subkey, subval in obj.items() %}
            {% set subval_str = subval|string %}

            ; If needle is in subkey or subval_str
            {% if needle|length > 0 and (needle in subkey or needle in subval_str) %}
              ; highlight path_txt, subkey, subval_str
              HIGHLIGHT_STRING BASE={ "'" ~ path_txt ~ "'" } NEEDLE={ "'" ~ needle ~ "'" } COLOR={ "'" ~ color_match ~ "'" }
              {% set h_path = printer["gcode_macro HIGHLIGHT_STRING"].return|default("''") %}
              {% set h_path_unquoted = h_path.strip("'") %}

              HIGHLIGHT_STRING BASE={ "'" ~ subkey ~ "'" } NEEDLE={ "'" ~ needle ~ "'" } COLOR={ "'" ~ color_match ~ "'" }
              {% set h_skey = printer["gcode_macro HIGHLIGHT_STRING"].return|default("''") %}
              {% set h_skey_unquoted = h_skey.strip("'") %}

              HIGHLIGHT_STRING BASE={ "'" ~ subval_str ~ "'" } NEEDLE={ "'" ~ needle ~ "'" } COLOR={ "'" ~ color_match ~ "'" }
              {% set h_sval = printer["gcode_macro HIGHLIGHT_STRING"].return|default("''") %}
              {% set h_sval_unquoted = h_sval.strip("'") %}

              {% set valtype = subval.__class__.__name__ %}

              {% set line = "<span title='Full path: " ~ path_txt ~ "." ~ subkey ~ "'>"
                  ~ "<span style='color:" ~ color_path ~ "'>" ~ h_path_unquoted ~ "</span> {"
                  ~ "<span style='color:" ~ color_key ~ "'>" ~ h_skey_unquoted ~ "</span>: "
                  ~ "<span style='color:" ~ color_val  ~ "'>" ~ h_sval_unquoted ~ "</span> "
                  ~ "<span style='color:" ~ color_type ~ "'>(" ~ valtype ~ ")</span>"
                  ~ "}</span>" %}

              {% set ns.new_results = ns.new_results + [ line ] %}
            {% endif %}

            ; If subval is a dict => BFS
            {% if subval is mapping %}
              {% set new_item = {"keys_list": subkeys + [subkey], "path_text": path_txt ~ "." ~ subkey} %}
              {% set ns.new_queue = ns.new_queue + [ new_item ] %}
            {% endif %}
          {% endfor %}
        {% endif %}
      {% endif %}
    {% endfor %}

    ; Now skip 'batch' items from the front
    {% set leftover = [] %}
    {% for idx in range(ns.qsize) %}
      {% if idx >= batch %}
        {% set leftover = leftover + [ queue[idx] ] %}
      {% endif %}
    {% endfor %}

    ; final_queue = leftover + ns.new_queue
    {% set final_queue = leftover + ns.new_queue %}

    ; Save back
    SET_GCODE_VARIABLE MACRO=SEARCH_INIT VARIABLE=queue VALUE={final_queue}
    SET_GCODE_VARIABLE MACRO=SEARCH_INIT VARIABLE=results VALUE={ns.new_results}
  {% endif %}


#####################################################################
# 4) SEARCH_DONE
#    Called once BFS is done (queue empty). Prints results.
#####################################################################
[gcode_macro SEARCH_DONE]
gcode:
  {% set s = printer["gcode_macro SEARCH_INIT"].search_term %}
  {% set r = printer["gcode_macro SEARCH_INIT"].results %}
  {% set c = r|length %}

  {% if c == 0 %}
    RESPOND MSG="<div>No matches found for &quot;{s}&quot;</div>"
  {% else %}
    RESPOND MSG="<div>Results for &quot;{s}&quot; (count: {c}):</div>"
    {% for line in r %}
      RESPOND MSG="{line}"
    {% endfor %}
  {% endif %}



[gcode_macro HIGHLIGHT_STRING]
variable_return: ""
gcode:
  {% set base   = params.BASE|default("") %}
  {% set needle = params.NEEDLE|default("") %}
  {% set color  = params.COLOR|default("") %}

  {% if base|length == 0 or needle|length == 0 %}
    # Nothing to highlight
    SET_GCODE_VARIABLE MACRO=HIGHLIGHT_STRING VARIABLE=return VALUE={"''"}
  {% else %}
    {% set parts = base.split(needle) %}
    {% set ns = namespace(joined="") %}
    {% for idx in range(parts|length) %}
      {% set ns.joined = ns.joined ~ parts[idx] %}
      {% if idx < parts|length -1 %}
        {% set ns.joined = ns.joined ~ "<span style='color:" ~ color ~ "'>" ~ needle ~ "</span>" %}
      {% endif %}
    {% endfor %}
    # Wrap the final HTML in single quotes so Klipper sees it as a Python string literal
    SET_GCODE_VARIABLE MACRO=HIGHLIGHT_STRING VARIABLE=return VALUE={"'" ~ ns.joined ~ "'"}
  {% endif %}
