
#pickup_gcode: # PICKUP ### PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ###  PICKUP ### 
#    {% set x = tool.params_park_x|float %}
#    {% set y = tool.params_park_y|float %}
#    {% set z = tool.params_park_z|float %}
#    {% set fast = tool.params_fast_speed|float %}
#    {% set path = tool.params_pickup_path %}
#    RESPOND TYPE=echo MSG='Picking up {tool.name}'
#    G90
#    #   ##############  Fast to the last point  ##############
#    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
#    ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast} D=5
#    ROUNDED_G0 Y={y + path[0]['y']|float} F={fast} D=0
#    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
#
#    {% if tool.extruder %}
#      M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
#    {% endif %}
#    # Run the path
#    {% for pos in path %}
#      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
#      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
#      {% if 'verify' in pos %}
#        M400
#        DETECT_TOOL
#        START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number}
#        #_VERIFY_TOOL_DETECTED T={tool.tool_number}
#      {% endif %}
#    {% endfor %}
#    # Restore the position with smooth rounded move.
#    RESPOND TYPE=echo MSG='Restore position {restore_position}'
#    ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
#    {% if 'Z' in restore_position %}
#      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
#    {% endif %}
#    {% if 'X' in restore_position %}config/toolchanger/toolchanger.cfg
#      ROUNDED_G0 X={restore_position.X} F={fast} D=1000
#    {% endif %}
#    {% if 'Y' in restore_position %}
#      ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
#    {% endif %}
#    ROUNDED_G0 D=0    ROUNDED_G0 D=0



[toolchanger]
params_debug_toolchanger: True

t_command_restore_axis:
params_safe_y: 150
params_close_y: 25
params_fast_speed: 20000
params_path_speed: 1000
params_type: 'changer_sc'
params_dropoff_path: [{'z':3.5, 'y':4}, {'z':0, 'y':0}, {'z':-12, 'y':0}]
params_pickup_path: [{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0.5, 'y':2.5, 'f':0.5}, {'z':8, 'y':8}]  

#params_dropoff_path: [{'z':0, 'y':4}, {'z':0, 'y':0}, {'z':-12, 'y':0}]
#params_pickup_path: [{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0, 'y':0}, ]

#params_dropoff_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
#params_pickup_path: [{'z':-10, 'y':16}, {'z':-10, 'y':0}, {'z':0, 'y':0, 'f':0.5, 'verify':1}, {'y':5.5, 'z':0}, {'y':9.5, 'z':2}, {'y':9.5 ,'z':4}]

#params_sc_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
# params_sc_path: [{'z':5, 'y':60}, {'z':5, 'y':0}, {'z':0, 'y':0}, {'z':-6, 'y':0}, {'z':-6, 'y': 10}]

#params_stealthchanger_xol_path: [{'y':59, 'z':17.5},{'y':5, 'z':17.5},{'y':5, 'z':0.2},{'y':0.5, 'z':0.1},{'z':0, 'y':0, 'f':0.5},{'z':-10, 'y':0}, {'z':-10, 'y':16}]

#params_sc_path: [{'y':9.5 ,'z':8}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]

#params_sc_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]

initialize_on: first-use
uses_axis: xyz
on_axis_not_homed: home

verify_tool_pickup: False # true if you want it to crash klipper every time a pickup fails *lol*

initialize_gcode:
    _INITIALIZE_FROM_DETECTED_TOOL

#########################################################################################
# before_change_gcode # 
#########################################################################################
before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

#########################################################################################
# after_change_gcode # 
#########################################################################################
after_change_gcode:
    #_after_change_gcode
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    _UPDATE_SHAPER T={tool.tool_number}
    {% if not printer['gcode_macro PRINT_START'].printing %}
        STOP_TOOL_PROBE_CRASH_DETECTION
    {% endif %}



#########################################################################################
# dropoff_gcode # 
#########################################################################################
dropoff_gcode: 
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_dropoff_path %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    G90
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
    STOP_TOOL_PROBE_CRASH_DETECTION
    #  ############## Run the path ##############
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
      M400
    {% endfor %}

#########################################################################################
# pickup_gcode # 
#########################################################################################
pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_pickup_path %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    G90
    #   ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast} D=5
    ROUNDED_G0 Y={y + path[0]['y']|float} F={fast} D=0
    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.

    {% if tool.extruder %}
      M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}
    # Run the path

    {% set ns = namespace(run=True) %}
    {% for pos in path %}
        {% if ns.run %}
            {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
            G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
        {% endif %}
        {% if 'verify' in pos %}     
            {% set ns.run = False %} ################### we do as before. but stop the pickup at the verify position  ###################
        {% endif %}
    {% endfor %}
    #{% set detected = printer["gcode_macro DETECT_TOOL"].detected_tool %}
    #EXTENDED_RESPOND MSG="Somehow this worked? (tool T{detected})" COLOR="secondary"

    M400
    DETECT_TOOL
    _VERIFY
    #_INITIALIZE_FROM_DETECTED_TOOL
    #_alternate_pickup_gcode
    #UPDATE_DELAYED_GCODE ID=_pickup_gcode DURATION=0.1 # need to wait for a tad before calling. this lets the whole macro finish and allows detected tool to be updated

#[gcode_macro _after_change_gcode]
#gcode:
#    {% set tool_failed = printer["gcode_macro TX"].new_tool|int %}
#    {% if tool_failed != -1 %}
#        {% set tool = printer["tool T"+tool_failed|string] %}
#    {% set tn = "T"+(tool.tool_number|string) %}
#    {% if printer["gcode_macro " + tn ] %}
#        SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
#    {% endif %}
#    _UPDATE_SHAPER T={tool.tool_number}
#    {% if not printer['gcode_macro PRINT_START'].printing %}
#        STOP_TOOL_PROBE_CRASH_DETECTION
#    {% endif %}

[gcode_macro _VERIFY]
gcode:
    {% if printer.tool_probe_endstop.active_tool_number | int == -1 %}
        #SELECT_TOOL_ERROR MESSAGE="$_VERIFY$ | crash, halting"
        _TC_FAILURE
    {% else %}
        EXTENDED_RESPOND MSG="$_VERIFY$ | Detected T{printer.tool_probe_endstop.active_tool_number}" COLOR="secondary"
        _TC_FINISH_PICKUP # need to split it up to check if the tool was actually picked up
        _TC_FINISH_TX# same here
    {% endif %}
    

#####################################################################################
################################## TOOLCHANGER END ##################################
#####################################################################################
[delayed_gcode _pickup_gcode]
gcode:
    DETECT_TOOL # update our tool detector to see if the tool is actually recognized
    _TC_FAILURE # did everything go according to plan?

[gcode_macro _alternate_pickup_gcode]
gcode:
    DETECT_TOOL # update our tool detector to see if the tool is actually recognized
    _TC_FINISH_PICKUP # need to split it up to check if the tool was actually picked up
    _TC_FINISH_TX# same here
    _TC_FAILURE # did everything go according to plan?

#########################################################################################
# _TC_FINISH_PICKUP # The other part of pickup_gcode
#########################################################################################

[gcode_macro _TC_FINISH_PICKUP]
gcode: 
    {% if printer["gcode_macro DETECT_TOOL"].detected_tool != -1 %}
        START_TOOL_PROBE_CRASH_DETECTION T={printer["gcode_macro DETECT_TOOL"].detected_tool}
        {% set new_tool = printer["gcode_macro TX"].new_tool %}
        {% set path = new_tool.params_pickup_path %}
        {% set x = new_tool.params_park_x %}
        {% set y = new_tool.params_park_y %}
        {% set z = new_tool.params_park_z %}
        {% set path_speed = new_tool.params_path_speed %}
        {% set ns = namespace(run=False, index=0) %}
        {% for pos in path %} ######### finish the pickup path
            {% if 'verify' in pos %}            
                {% set ns.run = True %}
            {% endif %}
            {% if ns.run == True %}
                {% set speed = path_speed|float * (pos.get('f', 1.0)|float) %}
                G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
                EXTENDED_RESPOND MSG="$_TC_FINISH_PICKUP$ | Reversing {pos}" COLOR="secondary"
            {% endif %}
            {% set ns.index = ns.index + 1 %}
        {% endfor %}
    {% endif %}

#########################################################################################
# TX # A macro we call from the tools with the tool number 
#[gcode_macro T0]
#variable_tool_number: 0
#gcode:
#    TX TN={tool_number}
# 
# In here we do everything related to happen before the old tool gets stored.
#########################################################################################

[gcode_macro TX]
description: call with TN=$toolnumber$, basically like the T$toolnumber$ but with some extra stuff
variable_restore_axis: "XYZ"

# dont touch below, or do, idc, gets pupdated anyway
variable_restore_gcode_x: 0
variable_restore_gcode_y: 0
variable_restore_gcode_z: 0
variable_global_z_offset: 0
variable_new_tool: -1
variable_old_tool: -1
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        ##################################################################################################################
        # why all of this? because the we need to assign the offsets during th "flying" move of the tool in restoring "XYZ" bbecause we are loading it from a variables file.
        #\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
            # make sure you dont accidentally zero the offsets before this runs tho, or youll be where we started
            {% set new_tool = params.TN|int %}
            {% set current_tool = printer.tool_probe_endstop.active_tool_number|int %} #printer.toolchanger.detected_tool_number ||||| printer.toolchanger.tool_number
            {% set svf = printer.save_variables.variables %}
            {% set fast = printer.toolchanger.params_fast_speed|float %}
            {% set old_offsets = {"X": svf['t' + current_tool|string + '_offset_x']|default(0), "Y": svf['t' + current_tool|string + '_offset_y']|default(0), "Z": svf['t' + current_tool|string + '_offset_z']|default(0)} %} #old tool offsets
            {% set tx_start_pos = {"X": printer.toolhead.position[0]|float|default(0), "Y": printer.toolhead.position[1]|float|default(0), "Z": printer.toolhead.position[2]|float|default(0) } %} # starting position with old gcode offsets still on
            {% set gcode_pos = {"X": (tx_start_pos["X"] - old_offsets["X"])|default(0)|round(3), "Y": (tx_start_pos["Y"] - old_offsets["Y"])|default(0)|round(3), "Z": (tx_start_pos["Z"] - old_offsets["Z"])|default(0)|round(3)} %} #starting position with absolute offsets
            {% set global_z_offset = (printer.gcode_move.homing_origin.z|float|default(0)|round(3) - old_offsets["Z"]|float|default(0)|round(3)) %} #should retrieve our global z offset back.

            {% if printer.toolchanger.params_debug_toolchanger %}
                {% set new_offsets = {"X": svf['t' + new_tool|string + '_offset_x']|default(0), "Y": svf['t' + new_tool|string + '_offset_y']|default(0), "Z": svf['t' + new_tool|string + '_offset_z']|default(0)} %} #new tool offsets
                {% set tx_stop_pos = {"X": (gcode_pos["X"] + new_offsets["X"])|default(0)|round(3), "Y": (gcode_pos["Y"] + new_offsets["Y"])|default(0)|round(3), "Z": (gcode_pos["Z"] + new_offsets["Z"])|default(0)|round(3)} %} #absolute pos with new offsets
                EXTENDED_RESPOND MSG="$TX$ | Switching from T{current_tool} (off:{old_offsets}) to T{new_tool} (off: {new_offsets} with global off: Z{global_z_offset})" COLOR="secondary"
                EXTENDED_RESPOND MSG="$TX$ | Restoring (GCODE-OLD) X={tx_start_pos["X"]|default(0)|round(3)}, Y={tx_start_pos["Y"]|default(0)|round(3)}, Z={tx_start_pos["Z"]|default(0)|round(3)}" COLOR="secondary"
                EXTENDED_RESPOND MSG="$TX$ | Restoring (ABSOLUTE) X={gcode_pos["X"]|default(0)|round(3)}, Y={gcode_pos["Y"]|default(0)|round(3)}, Z={gcode_pos["Z"]|default(0)|round(3)}" COLOR="secondary"
                EXTENDED_RESPOND MSG="$TX$ | Restoring (GCODE-NEW) X={tx_stop_pos["X"]|default(0)|round(3)}, Y={tx_stop_pos["Y"]|default(0)|round(3)}, Z={tx_stop_pos["Z"]|default(0)|round(3)}" COLOR="secondary"
            {% endif %}    
        #/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
        # of course if variable_restore_axis is not use, all of this is pretty useless # if you want to keep using the old save config way, this is useless
        ##################################################################################################################
            SET_GCODE_VARIABLE MACRO=TX VARIABLE=restore_gcode_x VALUE={gcode_pos["X"]|default(0)|round(3)}
            SET_GCODE_VARIABLE MACRO=TX VARIABLE=restore_gcode_y VALUE={gcode_pos["Y"]|default(0)|round(3)}
            SET_GCODE_VARIABLE MACRO=TX VARIABLE=restore_gcode_z VALUE={gcode_pos["Z"]|default(0)|round(3)}
            SET_GCODE_VARIABLE MACRO=TX VARIABLE=old_tool VALUE={old_tool}
            SET_GCODE_VARIABLE MACRO=TX VARIABLE=new_tool VALUE={new_tool}
            SET_GCODE_VARIABLE MACRO=TX VARIABLE=global_z_offset VALUE={global_z_offset}

            SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0 #soft reset offsets 
            SELECT_TOOL T={new_tool} # select new tool, all in absolute space
    {% endif %}

#########################################################################################
# _TC_FINISH_TX # The other part of TX, gets its values from TX
# and runs after the whole pickup stuff is done.
# it needs to be split, because now we are checking if its actually picked up
# In here we do everything related to happen before the old tool gets stored.
#########################################################################################
[gcode_macro _TC_FINISH_TX]
    gcode:
        {% set tool = printer["gcode_macro DETECT_TOOL"].detected_tool %}

        {% if tool != -1 %} # if the toolchange was successful, finish the TX call.

            _TC_RESTORE_POSITION
            SAVE_VARIABLE VARIABLE=old_tool VALUE={tool}
            SET_GCODE_VARIABLE MACRO=T{tool} VARIABLE=active VALUE=1
        {% endif %}

#########################################################################################
# _TC_FAILURE # The actual stuff you want to happen on tool change failure
#########################################################################################
[gcode_macro _TC_FAILURE]
gcode:
    {% if printer["gcode_macro DETECT_TOOL"].detected_tool == -1 %}
        RESPOND TYPE=error MSG="Toolchange failed"

        _TC_FAIL_REVERSE # reverse out of dock
        ROUNDED_G0 Y={printer.toolchanger.params_safe_y} F={printer.toolchanger.params_fast_speed / 2} D=100# move to a safe y position
        ROUNDED_G0 X=175 Y=250 F={printer.toolchanger.params_fast_speed} D=0# move to an idle position 
        #PAUSE_BASE
    {% endif %}


#########################################################################################
# _TC_RECOVER_FAILURE # call this to recover
#########################################################################################
[gcode_macro TC_RECOVER_FAILURE]
description: Recover from a toolchange failure
gcode:
    DETECT_TOOL # update the detected tool
    _TC_RECOVER_FAILURE # call actual command

[gcode_macro _TC_RECOVER_FAILURE]
gcode:
    {% set detected_tool = printer["gcode_macro DETECT_TOOL"].detected_tool%}
    {% if detected_tool != -1 %}
        SAVE_VARIABLE VARIABLE=old_tool VALUE={detected_tool}
        INITIALIZE_TOOLCHANGER T={detected_tool}
        _SET_GCODE_TOOL_OFFSETS T={detected_tool}
        RESPOND TYPE=echo MSG="success, returning to old position"
        _TC_RESTORE_POSITION
        RESUME
    {% else %}
        RESPOND TYPE=error MSG="No Tool detected"
    {% endif %}


############################################################################################################################################################################
# Macros used by the above to aids in recovery/etc
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

#########################################################################################
# _SET_GCODE_TOOL_OFFSETS # sets tool offsets from save_variables
#########################################################################################
[gcode_macro _SET_GCODE_TOOL_OFFSETS]
description: call with T=$toolnumber$
gcode:
    {% set svf = printer.save_variables.variables %}
    {% set global_z_offset = printer["gcode_macro TX"].global_z_offset|default(0) %}
    {% set new_offsets = {"X": svf['t' + params.T|string + '_offset_x']|default(0), "Y": svf['t' + params.T|string + '_offset_y']|default(0), "Z": svf['t' + params.T|string + '_offset_z']|default(0)} %} #new tool offsets
    SET_GCODE_OFFSET X={new_offsets["X"]|default(0)|round(3)} Y={new_offsets["Y"]|default(0)|round(3)} Z={(new_offsets["Z"]|default(0)|round(3) - global_z_offset)|default(0)|round(3)} MOVE=1 # set new offsets and global offset (at this point tool is at close Y, so its okay to do that here)             


#########################################################################################
# DETECT_TOOL # A macro we can call that updates itself.
#########################################################################################
[gcode_macro DETECT_TOOL]
variable_detected_tool: -1
gcode:
    DETECT_ACTIVE_TOOL_PROBE
    _DETECT_TOOL
[gcode_macro _DETECT_TOOL]
gcode:
    {% if printer.tool_probe_endstop.active_tool_number | int == -1 %}
    EXTENDED_RESPOND MSG="$DETECT_TOOL$ | No tool detected" COLOR="secondary"
    SET_GCODE_VARIABLE MACRO=DETECT_TOOL VARIABLE=detected_tool VALUE=-1
    {% else %}
    EXTENDED_RESPOND MSG="$DETECT_TOOL$ | Detected T{printer.tool_probe_endstop.active_tool_number} (on call {detected_tool})" COLOR="secondary"
    SET_GCODE_VARIABLE MACRO=DETECT_TOOL VARIABLE=detected_tool VALUE={printer.tool_probe_endstop.active_tool_number}
    {% endif %}
    #EXTENDED_RESPOND MSG="$DETECT_TOOL$ | printer.tool_probe_endstop.active_tool_number = {printer.tool_probe_endstop.active_tool_number}" COLOR="secondary"

#########################################################################################
# _TC_FAIL_REVERSE # call to reverse out of the tool we tried to pick up
#########################################################################################
[gcode_macro _TC_FAIL_REVERSE]
gcode:
    {% set tool_failed = printer["gcode_macro TX"].new_tool|int %}
    {% if tool_failed != -1 %}
        {% set tool = printer["tool T"+tool_failed|string] %}
        {% set path = tool.params_pickup_path %}
        {% set x = tool.params_park_x|float %}
        {% set y = tool.params_park_y|float %}
        {% set z = tool.params_park_z|float %}
        {% set ns = namespace(run=False, index=path|length - 1) %}
        {% for pos in path|reverse %}
            {% if ns.run %}
                {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
                G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
            {% endif %}
            {% if 'verify' in pos %}            
                {% set ns.run = True %}
            {% endif %}
        {% set ns.index = ns.index - 1 %}
        {% endfor %}
    {% endif %}

#########################################################################################
# _TC_RESTORE_POSITION # Restore old pos.
#########################################################################################
[gcode_macro _TC_RESTORE_POSITION]
description: call this to restore the position after a toolchange
gcode:
    {% set fast = printer.toolchanger.params_fast_speed|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set close_y = printer.toolchanger.params_close_y|float %}
    {% set safe_y = printer.toolchanger.params_safe_y|float %}
    {% set restore_axis = printer["gcode_macro TX"].restore_axis|default("") %}
    {% set gcode_pos = {
      "X": printer["gcode_macro TX"].restore_gcode_x|float,
      "Y": printer["gcode_macro TX"].restore_gcode_y|float,
      "Z": printer["gcode_macro TX"].restore_gcode_z|float
    } %}
    {% set global_z_offset = printer["gcode_macro TX"].global_z_offset %}
    {% set tool = printer["gcode_macro DETECT_TOOL"].detected_tool %}

    ; Set tool offsets
    _SET_GCODE_TOOL_OFFSETS T={tool}

    {% if 'Y' in restore_axis %}
      ROUNDED_G0 Y={safe_y} F={fast} D=20
    {% endif %}
    ; Define safe Y positions
    {% if 'Z' in restore_axis %}
      ; Drop to 5mm above restore Z
      ROUNDED_G0 Z={(gcode_pos.Z + 5.0)|round(3)} F={fast} D=150
    {% endif %}

    {% if 'X' in restore_axis %}
      ROUNDED_G0 X={gcode_pos.X|round(3)} F={fast} D=1000
    {% endif %}

    {% if 'Y' in restore_axis %}
      ROUNDED_G0 Y={gcode_pos.Y|round(3)} F={fast} D=20
    {% endif %}
    {% if 'Z' in restore_axis %}
      ; Final descent to restore Z minus global offset
      ROUNDED_G0 Z={(gcode_pos.Z - global_z_offset)|round(3)} F={fast} D=10
    {% endif %}
    ; End the rounded move chain
    ROUNDED_G0 D=0



#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# 
############################################################################################################################################################################


[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  DETECT_ACTIVE_TOOL_PROBE
  _INITIALIZE_FROM_DETECTED_TOOL_IMPL

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL_IMPL]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number | int == -1 %}
    EXTENDED_RESPOND MSG="$_INITIALIZE_FROM_DETECTED_TOOL_IMPL$ | no active tool probe, not initilizing" COLOR="secondary"
    PAUSE
  {% else %}
    EXTENDED_RESPOND MSG="$_INITIALIZE_FROM_DETECTED_TOOL_IMPL$ | initializing toolchanger" COLOR="secondary"
    INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
  {% endif %}

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and wait.
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
  D= Dead-band, allows the temperature variance +/- the deadband
variable_default_deadband: 10.0
gcode:
    {% set s = params.S|float %}
    {% set deadband = default_deadband|float %}
    {% if params.D is defined %}
        {% set deadband = params.D|float %}
    {% endif %}
    {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
    {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
    {% set extruder = printer[tool].extruder %}

    SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
    {% if s > 0 %}
        {% set lower_bound = s - (deadband / 2) %}
        {% set upper_bound = s + (deadband / 2) %}
        { action_respond_info("Waiting for temp to be within %.1fC and %.1fC" % (lower_bound, upper_bound)) }
        TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={lower_bound} MAXIMUM={upper_bound}   ; Wait for hotend temp (within D degrees)
    {% endif %}




#[gcode_macro M106]
#rename_existing: M106.1
#description: Override "M106" to account for multiple extruders.
#gcode:
#    {% set raw_speed = params.S|default(255)|float %}
#    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
#    {% set fan_tool = 0 if (printer.toolchanger.tool_number|string) == "-1" else printer.toolchanger.tool_number|string %}
#    {% if (params.P) is defined %}
#      {% set P_fan = "part_fan_t" + params.P|string %}
#      SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
#    {% else %}
#      SET_FAN_SPEED FAN="part_fan_t{fan_tool}" SPEED={fan_speed}
#    {% endif %}

#[gcode_macro M107]
#rename_existing: M107.1
#description: Override "M107" to account for multiple extruders.
#gcode:
#    # If we specified a fan, turn it off
#    {% if (params.P) is defined %}
#      M106 S0 P{params.P}
#    {% else %}
#      # Otherwise, turn off all part cooling fans
#      {% set num_tools = printer.toolchanger.tool_numbers|length|int %}
#      # Loop through the tools.
#      {% for i in range(num_tools) %}
#        # Turn off the fans
#        M106 S0 P{i}
#      {% endfor %}
#    {% endif %}


#########################################################################################
# TOOLCHANGER SPECIFICS #
#########################################################################################

# Probing using tap always using right temp

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}





######################################################################################
################################ SHAPER UPDATE/CHECKS ################################
######################################################################################

[gcode_macro _UPDATE_SHAPER]
description: "Set input shaper to tool values, defaults to active tool. If none available, defaults to printer config"

variable_lastshapers_sx=0
variable_lastshapers_sy=0
variable_lastshapers_dx=0
variable_lastshapers_dy=0
 
gcode:
    _SHAPER_CONFIG_CHECK {rawparams}
    {% if "input_shaper" in printer.configfile.config %}
        {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
        {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
        {% set shaper_config = printer.configfile.config["input_shaper"] %}
        {% set tool_config = printer.configfile.config.get("tool T" ~ tn, {}) %}

        {% set last_shapers = {"SX": lastshapers_sx, "SY": lastshapers_sy, "DX": lastshapers_dx, "DY": lastshapers_dy} %}
        {% set printer_shapers = {"SX": 0, "SY": 0, "DX": 0, "DY": 0} %}
        {% set shapers_to_load = {"SX": 0, "SY": 0, "DX": 0, "DY": 0} %}

        {% if "shaper_freq_x" in shaper_config %}
        {% set _ = printer_shapers.update({"SX": shaper_config["shaper_freq_x"]|float}) %}
        {% endif %}
        {% if "shaper_freq_y" in shaper_config %}
            {% set _ = printer_shapers.update({"SY": shaper_config["shaper_freq_y"]|float}) %}
        {% endif %}
        {% if "damping_ratio_x" in shaper_config %}
            {% set _ = printer_shapers.update({"DX": shaper_config["damping_ratio_x"]|float}) %}
        {% endif %}
        {% if "damping_ratio_y" in shaper_config %}
            {% set _ = printer_shapers.update({"DY": shaper_config["damping_ratio_y"]|float}) %}
        {% endif %}

        {% if "params_input_shaper_freq_x" in tool_config %}
            {% set _ = shapers_to_load.update({"SX": tool_config["params_input_shaper_freq_x"]|float}) %}
        {% else %}
            {% set _ = shapers_to_load.update({"SX": printer_shapers["SX"]}) %}
        {% endif %}
        {% if "params_input_shaper_freq_y" in tool_config %}
            {% set _ = shapers_to_load.update({"SY": tool_config["params_input_shaper_freq_y"]|float}) %}
        {% else %}
            {% set _ = shapers_to_load.update({"SY": printer_shapers["SY"]}) %}
        {% endif %}
        {% if "params_input_shaper_damping_ratio_x" in tool_config %}
            {% set _ = shapers_to_load.update({"DX": tool_config["params_input_shaper_damping_ratio_x"]|float}) %}
        {% else %}
            {% set _ = shapers_to_load.update({"DX": printer_shapers["DX"]}) %}
        {% endif %}
        {% if "params_input_shaper_damping_ratio_y" in tool_config %}
            {% set _ = shapers_to_load.update({"DY": tool_config["params_input_shaper_damping_ratio_y"]|float}) %}
        {% else %}
            {% set _ = shapers_to_load.update({"DY": printer_shapers["DY"]}) %}
        {% endif %}

        {% if printer.toolchanger.params_debug_toolchanger %}
            EXTENDED_RESPOND MSG="$_UPDATE_SHAPER$ | printer shapers: {printer_shapers}" COLOR="secondary"
            EXTENDED_RESPOND MSG="$_UPDATE_SHAPER$ | last shapers: {last_shapers}" COLOR="secondary"
            EXTENDED_RESPOND MSG="$_UPDATE_SHAPER$ | load shapers: {shapers_to_load}" COLOR="secondary"
        {% endif %}
        {% if shapers_to_load["SX"] != lastshapers_sx or shapers_to_load["SY"] != lastshapers_sy or shapers_to_load["DX"] != lastshapers_dx or shapers_to_load["DY"] != lastshapers_dy %}
            SET_GCODE_VARIABLE MACRO=_UPDATE_SHAPER VARIABLE=lastshapers_sx VALUE={shapers_to_load["SX"]}
            SET_GCODE_VARIABLE MACRO=_UPDATE_SHAPER VARIABLE=lastshapers_sy VALUE={shapers_to_load["SY"]}
            SET_GCODE_VARIABLE MACRO=_UPDATE_SHAPER VARIABLE=lastshapers_dx VALUE={shapers_to_load["DX"]}
            SET_GCODE_VARIABLE MACRO=_UPDATE_SHAPER VARIABLE=lastshapers_dy VALUE={shapers_to_load["DY"]}
            SET_INPUT_SHAPER SHAPER_FREQ_X={shapers_to_load["SX"]} SHAPER_FREQ_Y={shapers_to_load["SY"]} DAMPING_RATIO_X={shapers_to_load["DX"]} DAMPING_RATIO_Y={shapers_to_load["DY"]}
            {% if printer.toolchanger.params_debug_toolchanger %}
                EXTENDED_RESPOND MSG="$_UPDATE_SHAPER$ | Updated shapers" COLOR="secondary"
            {% endif %}
        {% else %}
            {% if printer.toolchanger.params_debug_toolchanger %}
                EXTENDED_RESPOND MSG="$_UPDATE_SHAPER$ | Shapers unchanged" COLOR="secondary"
            {% endif %}
        {% endif %}
    {% else %}
        EXTENDED_RESPOND MSG="$_UPDATE_SHAPER$ | printer has no shaper config, no changes made." COLOR="secondary"
    {% endif %}


[gcode_macro _SHAPER_CONFIG_CHECK]
gcode:
    {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
    {% if not printer.toolchanger.params_supress_warnings_low %}
        {% if "input_shaper" in printer.configfile.config %}
            ##### CONFIG SHAPER ##### CONFIG SHAPER #####
            {% set shaper_config = printer.configfile.config["input_shaper"] %}
            {% if "shaper_freq_x" not in shaper_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="shaper_freq_x missing in [input_shaper]"
            {% endif %}
            {% if "shaper_freq_y" not in shaper_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="shaper_freq_y missing in [input_shaper]"
            {% endif %}
            {% if "damping_ratio_x" not in shaper_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="damping_ratio_x missing in [input_shaper]"
            {% endif %}
            {% if "damping_ratio_y" not in shaper_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="damping_ratio_y missing in [input_shaper]"
            {% endif %}

            ##### TOOL SHAPER ##### TOOL SHAPER #####
            {% set tool_config = printer.configfile.config.get("tool T" ~ tn, {}) %}
            {% if "params_input_shaper_freq_x" not in tool_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="params_input_shaper_freq_x missing in [tool T{tn}]"
            {% endif %}
            {% if "params_input_shaper_freq_y" not in tool_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="params_input_shaper_freq_y missing in [tool T{tn}]"
            {% endif %}
            {% if "params_input_shaper_damping_ratio_x" not in tool_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="params_input_shaper_damping_ratio_x missing in [tool T{tn}]"
            {% endif %}
            {% if "params_input_shaper_damping_ratio_y" not in tool_config %}
                EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="params_input_shaper_damping_ratio_y missing in [tool T{tn}]"
            {% endif %}
        {% else %}
            EXTENDED_RESPOND PREFIX="$_SHAPER_CONFIG_CHECK$ |" PREFIX_COLOR=warning MSG="[input_shaper] section missing in printer.cfg"
        {% endif %}
    {% endif %}




######################################################################################
################################ SHAPER UPDATE/CHECKS ################################
######################################################################################



[gcode_macro EXTENDED_RESPOND]
description: "PREFIX PREFIX_COLOR MSG COLOR"
gcode:
  {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

  {% if params.TYPE is defined and params.MSG is defined %} # if TYPE and MSG are defined, just use the default RESPOND
      {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}
          {% set type = 'TYPE=' + params.TYPE|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'echo_no_space', 'command' or 'error'"
      {% endif %}
  {% endif %}

  {% set color = "DEFAULT" %} # default garbage value
  
  {% if params.MSG is defined and params.COLOR is defined %}
  
      {% set color = params.COLOR|lower %}

      {% if color in colors %} # valid color supplied
          {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %} # apply color to main message body
      {% else %}
          RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}

  {% elif params.MSG is defined %} # no color, but yes message
      {% set msg = 'MSG="'+ params.MSG + '"'|string %}
  {% endif %}

  {% if params.PREFIX is defined and params.PREFIX_COLOR is defined %} # check if a separate color was supplied for the prefix - otherwise, fall back on the default one
  
      {% set prefixColor = params.PREFIX_COLOR | default("DEFAULT") | lower %}
  
      {% if prefixColor in colors %} # valid prefix color supplied
          {% set prefix = 'PREFIX="<span class=' + prefixColor + '--text>' + params.PREFIX + '</span>"'|string %}
      {% elif color in color %} # prefix color is invalid - fall back on overall value if possible
          {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND PREFIX_COLOR '{prefixColor}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}
      
  {% elif params.PREFIX is defined and color in colors %} # no provided prefix color - use the same color for the prefix as is used for the main message body if possible
      {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
  {% elif params.PREFIX is defined %} # no valid colors provided either for the prefix or overall but we DO have a prefix- leave it default
      {% set prefix = 'PREFIX="' + params.PREFIX + '"'|string %}
  {% else %} # no prefix provided - don't use one!
      {% set prefix = "" | string %}
  {% endif %}
  
  RESPOND {type} {prefix} {msg}