


[gcode_macro RELOAD]
gcode:
    {% set _ = printer.printer.objects.__delitem__(params.MODULE) %}
    {% set cfg = printer.printer.objects['configfile'].read_main_config() %}
    {% set _ = printer.printer.load_object(config=cfg, section=params.MODULE) %}

[sensorless_auto_tune]










[gcode_macro SENSORLESS_AUTO_TUNE]
variable_state: {}
gcode:
    {% if state and not params %}
        UPDATE_DELAYED_GCODE ID=_SENSORLESS_AUTO_TUNE DURATION=0
        SET_GCODE_VARIABLE MACRO=SENSORLESS_AUTO_TUNE VARIABLE=state VALUE={{}}
    {% else %}
        {% set sensitivities = { 'tmc2130': {'min':   0, 'max': 255 },
                                 'tmc2660': {'min':   0, 'max': 255 },
                                 'tmc2209': {'min':   0, 'max': 255 },
                                 'tmc5160': {'min': -64, 'max': 63  } 
                             } %}

        # --------------------- stepper helpers ----------------------------------------------------------------
        {%- macro _get_tmc_type(axis) -%}
            {% set scfg = printer.configfile.settings['stepper_' ~ axis] -%}
            {%- if scfg and ':virtual_endstop' in scfg.endstop_pin and scfg.endstop_pin[0:3] == 'tmc' -%}
                {scfg.endstop_pin.split(':')[0].split('_')[0]} 
            {%- else -%}
                {action_raise_error("stepper with name '" ~ 'stepper_' ~ axis ~ "' not found. (or isnt configured properly)")}
            {%- endif -%}
        {%- endmacro -%}

        # --------------------- pos helpers ------------------------------------------------------------------------
        {%- macro _get_mcu_pos(axis) -%}
            {%- set kin = printer.printer.lookup_object('toolhead').get_kinematics() -%}
            {%- set stepper = (kin.get_steppers()|selectattr('_name','equalto', 'stepper_' ~ axis)|list)[0] -%}
            {stepper.get_mcu_position()}
        {%- endmacro -%}
        
        {%- macro _get_step_dist(axis) -%}
            {%- set kin = printer.printer.lookup_object('toolhead').get_kinematics() -%}
            {%- set stepper = (kin.get_steppers()|selectattr('_name','equalto', 'stepper_' ~ axis)|list)[0] -%}
            {stepper.get_step_dist()}
        {%- endmacro -%}

        {%- macro _move_stepper(axis, dist) -%}
            SET_GCODE_OFFSET X=0 Y=0 Z=0
            G91
            G0 {axis|upper}{-1.0 * dist|float}
            G90
            M400
        {%- endmacro -%}
        # --------------------- test helpers -----------------------------------------------------------------------
        {%- macro _run_test(axis, threshold) -%}
            SET_TMC_FIELD STEPPER={'stepper_' ~ axis|lower} FIELD=SGT VALUE={threshold}
            G4 P100
            G28 {axis|upper}
            M400
        {%- endmacro -%}

        {%- macro _dist_moved(axis) -%}
            {(state.start_pos[axis]|float - _get_mcu_pos(axis)|float)|abs * _get_step_dist(axis)|float}
        {%- endmacro -%}

        {%- macro _loop() -%}
            M400
            SET_GCODE_VARIABLE MACRO=SENSORLESS_AUTO_TUNE VARIABLE=state VALUE="{state}"
            UPDATE_DELAYED_GCODE ID=_SENSORLESS_AUTO_TUNE DURATION=0.1
        {%- endmacro -%}

        # --------------------- exec ---------------------------------------------------------------------------

        {% set ax = state.get('axis', params.get('AXIS', 'x'))|lower %}
        {% set lo, hi = sensitivities[_get_tmc_type(ax)]['min'], sensitivities[_get_tmc_type(ax)]['max'] %}

        {% if not state %} # start call
            {% set _ = state.update({'start_pos': {'x': _get_mcu_pos('x')|int, 'y': _get_mcu_pos('y')|int} } ) %}
            {% set _ = state.update({'axis': ax, 'sgt': lo} ) %}
        {% endif %}

        {% if 'start_pos' in state and not state.get('running', 0) %}
            {_run_test(ax, state.sgt)}
            {% set _ = state.update({'running': 1}) %}
            {_loop()}
        {% elif state.get('running', 0) %}
            {action_respond_info('dist_moved: ' ~ _dist_moved(ax))}
            {% if (_dist_moved(ax)|float)|abs > 3.0 %}
                {action_respond_info('most sensitive SGT: ' ~ state.sgt)}
                UPDATE_DELAYED_GCODE ID=_SENSORLESS_AUTO_TUNE DURATION=0
                SET_GCODE_VARIABLE MACRO=SENSORLESS_AUTO_TUNE VARIABLE=state VALUE={{}}
            {% else %}
                {% set _ = state.update({'sgt': state.sgt + (1 if lo < hi else -1) } ) %}
                {_move_stepper(ax, _dist_moved(ax))}
                {_run_test(ax, state.sgt)}
                {_loop()}
            {% endif %} 
        {% endif %} 
    {% endif %}

[delayed_gcode _SENSORLESS_AUTO_TUNE]
gcode:
    SENSORLESS_AUTO_TUNE KEEP=GOING


