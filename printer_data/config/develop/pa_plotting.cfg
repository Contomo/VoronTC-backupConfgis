
[gcode_macro _PA_DATA_STORAGE]
variable_graph_pla_rgb_raw:"""
    0.03200, 19.740, 1000 | 0.02650, 19.740, 2000 | 0.02100, 19.740, 4000
    0.03100,  7.897, 1000 | 0.02800,  7.897, 2000 | 0.02500,  7.897, 4000
    0.03500,  3.949, 1000 | 0.02700,  3.949, 2000 | 0.02600,  3.949, 4000
    """
variable_abs_insane_speeds_twoeighty_heat:"""
    0.02800, 20.150, 1000 | 0.02600, 20.150, 2000 | 0.02600, 20.150, 4000
    0.03000, 16.120, 1000 | 0.02600, 16.120, 2000 | 0.02600, 16.120, 4000
    0.03200, 12.090, 1000 | 0.02600, 12.090, 2000 | 0.02600, 12.090, 4000
    0.03400,  8.060, 1000 | 0.02600,  8.060, 2000 | 0.02600,  8.060, 4000
    0.03600,  4.030, 1000 | 0.02600,  4.030, 2000 | 0.02600,  4.030, 4000
    """
variable_graph_pla_rgb_adjusted:"""
    0.03200, 19.740, 1000 | 0.02650, 19.740, 2000 | 0.02100, 19.740, 4000
    0.03350,  7.897, 1000 | 0.02800,  7.897, 2000 | 0.02500,  7.897, 4000
    0.03500,  3.949, 1000 | 0.02950,  3.949, 2000 | 0.02650,  3.949, 4000
    """
variable_graph_elegoo_pla_sea_green:"""
                                                                          | 0.02600, 21.100, 3000 | 0.02400, 21.100, 4000 | 0.02200, 21.100, 5000 | 0.02000, 21.100, 6000 | 0.02000, 21.100, 7000 | 0.01800, 21.100, 8000
                                                                          | 0.02800, 17.590, 3000 | 0.02400, 17.590, 4000 | 0.02200, 17.590, 5000 | 0.02000, 17.590, 6000 | 0.02000, 17.590, 7000 | 0.02000, 17.590, 8000
                                                  | 0.03200, 14.070, 2000 | 0.02600, 14.070, 3000 | 0.02600, 14.070, 4000 | 0.02200, 14.070, 5000 | 0.02200, 14.070, 6000 | 0.02200, 14.070, 7000 | 0.02200, 14.070, 8000
    0.03800, 10.550,  500 | 0.03800, 10.550, 1000 | 0.03200, 10.550, 2000 | 0.02800, 10.550, 3000 | 0.02600, 10.550, 4000 | 0.02400, 10.550, 5000 | 0.02400, 10.550, 6000 | 0.02400, 10.550, 7000 | 0.02200, 10.550, 8000
    0.05200,  7.034,  500 | 0.04000,  7.034, 1000 | 0.03400,  7.034, 2000 | 0.03000,  7.034, 3000 | 0.02600,  7.034, 4000 | 0.02600,  7.034, 5000 | 0.02600,  7.034, 6000 | 0.02600,  7.034, 7000 | 0.02200,  7.034, 8000
    0.05400,  3.517,  500 | 0.04600,  3.517, 1000 | 0.03800,  3.517, 2000 | 0.03200,  3.517, 3000 | 0.03200,  3.517, 4000 | 0.02600,  3.517, 5000 | 0.01800,  3.517, 6000 | 0.01400,  3.517, 7000 | 0.01200,  3.517, 8000
    0.06600,  1.759,  500 | 0.06600,  1.759, 1000 | 0.04600,  1.759, 2000 | 0.03400,  1.759, 3000                                                                                           
    """
variable_zyltech_deep_blue_us_batch_petg:"""
    0.05000,  8.345, 1000 | 0.05000,  8.345, 5800 | 0.05000,  8.345, 7000
    0.05000,  7.511, 1000 | 0.05000,  7.511, 5800 | 0.05000,  7.511, 7000
    0.05000,  6.676, 1000 | 0.05000,  6.676, 5800 | 0.04500,  6.676, 7000
    0.05500,  5.842, 1000 | 0.04500,  5.842, 5800 | 0.04500,  5.842, 7000
    0.06000,  5.007, 1000 | 0.04500,  5.007, 5800 | 0.04500,  5.007, 7000
    0.07000,  4.173, 1000 | 0.04000,  4.173, 5800 | 0.04500,  4.173, 7000
    0.07500,  3.338, 1000 | 0.04000,  3.338, 5800 | 0.05000,  3.338, 7000
    0.08000,  2.504, 1000 | 0.05000,  2.504, 5800 | 0.06000,  2.504, 7000
    0.08500,  1.669, 1000 | 0.06000,  1.669, 5800 | 0.07000,  1.669, 7000
    0.09000,  0.834, 1000 | 0.07000,  0.834, 5800 | 0.07500,  0.834, 7000
    """
variable_v2:"""
    0.05000, 16.000, 1000 | 0.04000, 16.000, 2000 | 0.03000, 16.000, 4000
    0.05000, 12.000, 1000 | 0.04000, 12.000, 2000 | 0.03500, 12.000, 4000
    0.05500,  8.000, 1000 | 0.04500,  8.000, 2000 | 0.04500,  8.000, 4000
    0.06000,  4.000, 1000 | 0.05500,  4.000, 2000 | 0.05000,  4.000, 4000
    """
variable_x1c:"""
    0.03500, 16.000, 1000 | 0.03000, 16.000, 2000 | 0.02500, 16.000, 4000 | 0.02000, 16.000, 8000
    0.03500, 12.000, 1000 | 0.03000, 12.000, 2000 | 0.02500, 12.000, 4000 | 0.02500, 12.000, 8000
    0.04000,  8.000, 1000 | 0.03500,  8.000, 2000 | 0.03000,  8.000, 4000 | 0.03000,  8.000, 8000
    0.04500,  4.000, 1000 | 0.04500,  4.000, 2000 | 0.04500,  4.000, 4000 | 0.03500,  4.000, 8000
    """
variable_esun_abs_cf:"""
    0.03649, 23.450, 1000 | 0.03463, 23.450, 3250 | 0.03423, 23.450, 3500 | 0.03283, 23.450, 4500
    0.03800, 20.000, 1000 | 0.03614, 20.000, 3250 | 0.03574, 20.000, 3500 | 0.03434, 20.000, 4500
    0.03866, 18.000, 1000 | 0.03680, 18.000, 3250 | 0.03640, 18.000, 3500 | 0.03500, 18.000, 4500
    0.04094,  9.000, 1000 | 0.03908,  9.000, 3250 | 0.03868,  9.000, 3500 | 0.03728,  9.000, 4500
    0.04129,  7.600, 1000 | 0.03943,  7.600, 3250 | 0.03903,  7.600, 3500 | 0.03763,  7.600, 4500
    0.04229,  5.630, 1000 | 0.04043,  5.630, 3250 | 0.04003,  5.630, 3500 | 0.03863,  5.630, 4500
    0.04329,  3.900, 1000 | 0.04143,  3.900, 3250 | 0.04103,  3.900, 3500 | 0.03963,  3.900, 4500
    """

variable_sunlu_pla_white:"""
                                                                          | 0.03800, 13.430, 4000 | 0.03400, 13.430, 8000
    0.06600,  6.713,  500 | 0.05800,  6.713, 1000 | 0.04800,  6.713, 2000 | 0.04600,  6.713, 4000 | 0.04400,  6.713, 8000
    0.07800,  3.357,  500 | 0.07000,  3.357, 1000 | 0.06200,  3.357, 2000 | 0.05600,  3.357, 4000 | 0.04200,  3.357, 8000
    0.08200,  1.678,  500 | 0.07200,  1.678, 1000 | 0.06600,  1.678, 2000 |                                              
    """
variable_orange_petg_zyltech:""" # dont graph these.... up to 0.4... too high
    0.07700, 12.760, 1000 | 0.06400, 12.760, 2800 | 0.06300, 12.760, 5600
    0.07900, 10.630, 1000 | 0.06700, 10.630, 2800 | 0.06700, 10.630, 5600
    0.08100,  8.508, 1000 | 0.07200,  8.508, 2800 | 0.08200,  8.508, 5600
    0.08500,  6.381, 1000 | 0.08800,  6.381, 2800 | 0.08400,  6.381, 5600
    0.10800,  4.254, 1000 | 0.10200,  4.254, 2800 | 0.10200,  4.254, 5600
    0.15000,  2.127, 1000 | 0.23500,  2.127, 2800 | 0.40500,  2.127, 5600
    """

variable_deep_blue_petg_zyltech:""" # dont graph these.... up to 0.4... too high
    0.06400,  8.264, 1000 | 0.06200,  8.264, 2800 | 0.06200,  8.264, 5600
    0.07200,  6.198, 1000 | 0.07000,  6.198, 2800 | 0.06800,  6.198, 5600
    0.08600,  4.132, 1000 | 0.08200,  4.132, 2800 | 0.07700,  4.132, 5600
    0.14000,  2.070, 1000 | 0.22000,  2.070, 2800 | 0.34000,  2.070, 5600
    """

variable_graph_model_from_docs:"""
    0.03600, 15.350, 1000 | 0.02800, 15.350, 2000 | 0.02400, 15.350, 4000
    0.03600, 11.510, 1000 | 0.02900, 11.510, 2000 | 0.02600, 11.510, 4000
    0.03600,  7.680, 1000 | 0.03000,  7.680, 2000 | 0.02800,  7.680, 4000
    0.03600,  3.840, 1000 | 0.03600,  3.840, 2000 | 0.03200,  3.840, 4000
    """
variable_sunlu_asa_natural:"""
                                                                          | 0.03200, 16.870, 3000 | 0.03000, 16.870, 4000 | 0.02800, 16.870, 5000 | 0.02400, 16.870, 7000 | 0.02400, 16.870, 8000
                                                  | 0.04000, 13.500, 2000 | 0.03400, 13.500, 3000 | 0.03200, 13.500, 4000 | 0.02800, 13.500, 5000 | 0.02800, 13.500, 7000 | 0.02800, 13.500, 8000
                          | 0.05000, 10.120, 1000 | 0.04000, 10.120, 2000 | 0.03400, 10.120, 3000 | 0.03200, 10.120, 4000 | 0.03000, 10.120, 5000 | 0.03000, 10.120, 7000 | 0.02800, 10.120, 8000
    0.06800,  6.749,  500 | 0.05200,  6.749, 1000 | 0.04200,  6.749, 2000 | 0.03800,  6.749, 3000 | 0.03800,  6.749, 4000 | 0.03600,  6.749, 5000 | 0.03600,  6.749, 7000 | 0.03400,  6.749, 8000
    0.06800,  3.374,  500 | 0.06200,  3.374, 1000 | 0.05400,  3.374, 2000 | 0.04400,  3.374, 3000 | 0.04400,  3.374, 4000 | 0.04400,  3.374, 5000 | 0.03800,  3.374, 7000 | 0.03600,  3.374, 8000
    """

variable_petg_overture_light_gary:"""
    0.09400,  7.000, 1000 | 0.08400,  7.000, 2000 | 0.08400,  7.000, 3000 | 0.08400,  7.000, 4000 | 0.07800,  7.000, 5000 | 0.07400,  7.000, 6000 | 0.07200,  7.000, 7000 | 0.07000,  7.000, 8000
    0.13200,  3.500, 1000 | 0.13200,  3.500, 2000 | 0.12000,  3.500, 3000 | 0.11000,  3.500, 4000 | 0.10800,  3.500, 5000 | 0.09600,  3.500, 6000 | 0.07400,  3.500, 7000 | 0.07200,  3.500, 8000
    """

variable_petg_sunlu_red:"""
    0.06300, 27.070, 1000 | 0.05700, 27.070, 2500 | 0.04500, 27.070, 4000
    0.06300, 15.470, 1000 | 0.06000, 15.470, 2500 | 0.04500, 15.470, 4000
    0.05700,  7.735, 1000 | 0.05700,  7.735, 2500 | 0.05600,  7.735, 4000
    0.06800,  3.567, 1000 | 0.05250,  3.567, 2500 | 0.05500,  3.567, 4000
    """
gcode:
    # ------------------------------------------------------------------------------------------------
    # Parser to allow reformatting dumps added to variables for copy and paste,
    # in the same format as those above.
    # ------------------------------------------------------------------------------------------------
    # ----------- seperator key, float/int formatting ----------
    {% set split = '|' %}
    {% set formatter = "%7.5f, %6.3f, %4d" %}
    {% set row_sep = '\n    ' %}
    # ----------------------------------------------------------
    {% set html_start = "<div style='display:inline-block; min-width:400px; max-width:95%; 
                        background-color:rgb(15,15,15); border:2px solid rgb(60,60,60); border-radius:4px; padding:8px; margin-top:4px;'>
                        <div style='white-space:pre; overflow-x:auto;'>" %}
    {% set html_end = "</div></div>" %}

    {% set ds = printer['gcode_macro _PA_DATA_STORAGE'] %}
    {% set placeholder = " " * ((formatter % (0,0,0))|length) %}
    {% set outputs = [] %}
    # ---------------------[ Build raw list ]
    {% for name, content in ds.items() if content is string and '.' in content %}
        {% set trip = [] %}
        {% for r in (content|replace(split, '\n')).strip().split('\n') %}
            {% set c = r.strip().split(',') %}
            {% if c|map('trim')|list|length == 3 %}
                {% set _ = trip.append((c[0]|float, c[1]|float, c[2]|int)) %}
            {% endif %}
        {% endfor %}
        # ---------------------[ sort to iterate over ]
        {% set flows = trip|map(attribute=1)|unique|list|sort(reverse=True) %}
        {% set accels = trip|map(attribute=2)|unique|list|sort %}
        {% set lines = [] %}
        {% for f in flows %}
            {% set rows = [] %}
            {% for a in accels %}
                # ---------------------[ fill each cell with data, or placeholder ]
                {% set cell_data = trip|selectattr(1, 'equalto', f)|selectattr(2, 'equalto', a)|first %}
                {% set cell = (formatter % (cell_data[0], cell_data[1], cell_data[2])) if cell_data else placeholder %}
                {% set _ = rows.append(cell) %}
            {% endfor %}
            # ---------------------[ join those and remove excess placeholders ]
            {% set _ = lines.append((rows|join(' ' ~ split ~ ' '))|replace('    ' ~ split ~ '    ', '         ')) %}
        {% endfor %}
        {% set _ = outputs.append(html_start ~ ('variable_' ~ name ~ ':"""' ~ row_sep ~ lines|join(row_sep) ~ row_sep ~ '"""')|replace(' ', '&nbsp;') ~ html_end) %}
    {% endfor %}
    {action_respond_info(outputs|join('\n'))}
# endstorage

[gcode_macro PA_PLANE_PLOT]
gcode:
    # --- Parameters ---
    {% set elev = params.ELEV|default(25)|int %}
    {% set azim = params.AZIM|default(120)|int %}
    {% set size = params.SIZE|default(10)|int %}
    {% set res = params.RES|default(100)|int %}
    # DEGREE controls the complexity of the fitted model. 3 is a robust starting point.
    {% set degree = params.DEGREE|default(3)|int %}

    # --- Setup and Imports ---
    {% set import       = printer.printer.__class__.__init__.__globals__.importlib.import_module %}
    {% set io           = import('io') %}
    {% set b64          = import('base64') %}
    {% set np           = import('numpy') %}
    {% set math         = import('math') %}
    {% set _3d          = import('mpl_toolkits.mplot3d') %}
    {% set matplotlib   = import('matplotlib') %}
    {% set plt          = matplotlib.pyplot %}

    # --- Data Parsing from _PA_DATA_STORAGE ---
    {% set parsed_data = [] %}
    {% set all_pa, all_flow, all_accel = [], [], [] %}

    {% for name, data in printer['gcode_macro _PA_DATA_STORAGE'].items() if name.startswith('graph_') %}
      {% if name.startswith('graph_') %}
        {% set lines = (data|replace('|', '\n')).strip().split('\n') %}
        {% set d_pa, d_flow, d_accel = [], [], [] %}
        {% for line in lines[1:] %}
            {% set items = line.strip().split(',') %}
            {% if items|length == 3 and items[0]|float(0.0) > 0.001 %}
                {% set _ = d_pa.append(items[0]|float) %}
                {% set _ = d_flow.append(items[1]|float) %}
                {% set _ = d_accel.append(items[2]|float) %}
            {% endif %}
        {% endfor %}
        {% if d_pa %}
            {% set _ = parsed_data.append({'name': name|replace('graph_', ''), 'pa': d_pa, 'flow': d_flow, 'accel': d_accel}) %}
            {% set _ = all_pa.extend(d_pa) %}
            {% set _ = all_flow.extend(d_flow) %}
            {% set _ = all_accel.extend(d_accel) %}
        {% endif %}
      {% endif %}
    {% endfor %}

    # --- Plot Generation ---
    {% set n_plots = parsed_data|length %}
    {% if n_plots > 0 %}
        {% set _ = plt.style.use('dark_background') %}
        {% set ncols = math.ceil(math.sqrt(n_plots))|int %}
        {% set nrows = math.ceil(n_plots / ncols)|int %}
        
        {% set fig, axes = plt.subplots(nrows, ncols, figsize=(size, size), subplot_kw={'projection': '3d'}) %}
        {% set axes_flat = axes.flatten() if n_plots > 1 else [axes] %}
        
        {% for data in parsed_data %}
            {% if data.pa|length > 3 %}
                {% set ax = axes_flat[loop.index0] %}
                
                {% set x_data = np.array(data.accel) %}
                {% set y_data = np.array(data.flow) %}
                {% set z_data = np.array(data.pa) %}

                # --- CORRECT, STABLE MODEL FITTING ---
                # STAGE 1: Standardize the data (mean=0, std=1) for numerical stability.
                {% set x_mean, x_std = x_data.mean(), x_data.std() %}
                {% set y_mean, y_std = y_data.mean(), y_data.std() %}
                
                # Avoid division by zero on flat data.
                {% if x_std == 0.0 %}{% set x_std = 1.0 %}{% endif %}
                {% if y_std == 0.0 %}{% set y_std = 1.0 %}{% endif %}
                
                {% set x_scaled = (x_data - x_mean) / x_std %}
                {% set y_scaled = (y_data - y_mean) / y_std %}

                # STAGE 2: Build the design matrix from the stable, scaled data.
                {% set A = [] %}
                {% for i in range(degree + 1) %}
                    {% for j in range(degree + 1 - i) %}
                        {% set _ = A.append((x_scaled**i) * (y_scaled**j)) %}
                    {% endfor %}
                {% endfor %}
                {% set A = np.vstack(A).T %}
                
                # STAGE 3: Use least squares to find the best-fit coefficients. This is now stable.
                {% set coeffs, _, _, _ = np.linalg.lstsq(A, z_data, rcond=None) %}

                # --- EVALUATION ON HIGH-RESOLUTION GRID ---
                # Create the plot grid using the full range of all datasets.
                {% set accel_space = np.linspace(all_accel|min, all_accel|max, res) %}
                {% set flow_space = np.linspace(all_flow|min, all_flow|max, res) %}
                {% set A_grid, F_grid = np.meshgrid(accel_space, flow_space) %}

                # Apply the *exact same* standardization to the grid before evaluating.
                {% set A_grid_scaled = (A_grid - x_mean) / x_std %}
                {% set F_grid_scaled = (F_grid - y_mean) / y_std %}

                # Evaluate the polynomial model across the grid.
                {% set PA_final = np.zeros(A_grid.shape) %}
                {% set k = 0 %}
                {% for i in range(degree + 1) %}
                    {% for j in range(degree + 1 - i) %}
                        {% set PA_final = PA_final + coeffs[k] * (A_grid_scaled**i) * (F_grid_scaled**j) %}
                        {% set k = k + 1 %}
                    {% endfor %}
                {% endfor %}

                # --- Plotting Stage ---
                {% set surf = ax.plot_surface(A_grid, F_grid, PA_final, cmap='viridis', edgecolor='none', antialiased=True, rstride=1, cstride=1) %}
                {% set _ = ax.scatter(x_data, y_data, z_data, c='red', s=15, depthshade=False, label='Measured Points') %}

                # --- Formatting ---
                {% set _ = ax.set_title(data.name, color='white', pad=20) %}
                {% set _ = ax.set_xlabel('Accel', fontsize=8) %}
                {% set _ = ax.set_ylabel('Flow', fontsize=8) %}
                {% set _ = ax.set_zlabel('PA', fontsize=8) %}
                {% set _ = ax.set_xlim(all_accel|min, all_accel|max) %}
                {% set _ = ax.set_ylim(all_flow|min, all_flow|max) %}
                {% set _ = ax.set_zlim(all_pa|min, all_pa|max) %}
                {% set _ = ax.view_init(elev=elev, azim=azim) %}
                {% set _ = ax.tick_params(labelsize=7) %}
                {% set _ = ax.invert_xaxis() %}
            {% endif %}
        {% endfor %}

        # --- Final Touches ---
        {% for i in range(n_plots, nrows * ncols) %}
            {% set _ = fig.delaxes(axes_flat[i]) %}
        {% endfor %}
        {% set _ = fig.tight_layout(pad=3.0) %}

        # --- SVG Conversion ---
        {% set buf = io.BytesIO() %}
        {% set _ = fig.savefig(buf, format='svg', transparent=True) %}
        {% set _ = plt.close(fig) %}
        {% set svg = buf.getvalue() %}
        {% set img = 'data:image/svg+xml;base64,' ~ b64.b64encode(svg).decode() %}

        {action_respond_info('<img style="background-color:rgb(34,34,34); max-width:100%;" src="' ~ img ~ '"/>')}
    {% endif %}




[gcode_macro PA_MULTI_PLANE_PLOT]
description:"""PA_MULTI_PLANE_PLOT [ELEV=<int>] [AZIM=<int>] [SIZE=<int>]
                                   [INTERPOLATION=<int>] [PREFIX=<str>]
                                   [STRICT=0|1] [METHOD=linear|nearest]"""

gcode:
    {% set elev                 = params.ELEV|default(20)|int %}
    {% set azim                 = params.AZIM|default(65)|int %}
    {% set size                 = params.SIZE|default(10)|int %}
    {% set prefix               = params.PREFIX|default('graph_') %}
    {% set interpolation_points = params.INTERPOLATION|default(25)|int %}

    {% set import       = printer.printer.__class__.__init__.__globals__.importlib.import_module %}
    {% set io           = import('io') %}
    {% set b64          = import('base64') %}
    {% set np           = import('numpy') %}
    {% set math         = import('math') %}
    {% set _3d          = import('mpl_toolkits.mplot3d') %}
    {% set matplotlib   = import('matplotlib') %}
    {% set plt          = matplotlib.pyplot %}
    {% set interpolate  = import('scipy.interpolate') %}

    {% set parsed_data = [] %}
    {% set all_pa, all_flow, all_accel = [], [], [] %}

    {% for name, data in printer['gcode_macro _PA_DATA_STORAGE'].items() if name.startswith(prefix) %}
        {% set lines = (data|replace('|', '\n')).strip().split('\n') %}
        {% set d_pa, d_flow, d_accel = [], [], [] %}
        {% for line in lines %}
            {% set items = line.strip().split(',') %}
            {% if items|length == 3 and items[0]|float(0.0) > 0.001 %}
                {% set _ = d_pa.append(items[0]|float) %}
                {% set _ = d_flow.append(items[1]|float) %}
                {% set _ = d_accel.append(items[2]|float) %}
            {% endif %}
        {% endfor %}
        {% if d_pa %}
            {% set _ = parsed_data.append({'name': name, 'pa': d_pa, 'flow': d_flow, 'accel': d_accel}) %}
            {% set _ = all_pa.extend(d_pa) %}
            {% set _ = all_flow.extend(d_flow) %}
            {% set _ = all_accel.extend(d_accel) %}
        {% endif %}
    {% endfor %}

    {% set n_plots = parsed_data|length %}
    {% if n_plots > 0 %}
        {% set _ = plt.style.use('dark_background') %}
        {% set ncols = math.ceil(math.sqrt(n_plots))|int %}
        {% set nrows = math.ceil(n_plots / ncols)|int %}
        
        {% set fig, axes = plt.subplots(nrows, ncols, figsize=(size, size), subplot_kw={'projection': '3d'}) %}
        {% set axes_flat = axes.flatten() if n_plots > 1 else [axes] %}
        
        {% for data in parsed_data if data.pa|length > 3 %}
            {% set ax = axes_flat[loop.index0] %}
            {% set accel_space = np.linspace(all_accel|min, all_accel|max, interpolation_points) %}
            {% set flow_space = np.linspace(all_flow|min, all_flow|max, interpolation_points) %}
            {% set A_grid, F_grid = np.meshgrid(accel_space, flow_space) %}
            # Interpolate the data
            {% set points = np.vstack((data.accel, data.flow)).T %}
            {% set values = np.array(data.pa) %}
            {% set PA_smooth = interpolate.griddata(points, values, (A_grid, F_grid), method='cubic') %}
            {% set surf = ax.plot_surface(A_grid, F_grid, PA_smooth, cmap='viridis', edgecolor='none') %}
            {% set _ = ax.scatter(data.accel, data.flow, data.pa, c='red', s=10) %}
            # --- Formatting ---
            {% set _ = ax.set_title(data.name, color='white', pad=5) %}
            {% set _ = ax.set_xlabel('Accel', fontsize=size) %}
            {% set _ = ax.set_ylabel('Flow', fontsize=size) %}
            {% set _ = ax.set_zlabel('PA', fontsize=size) %}
            {% set _ = ax.set_xlim(all_accel|min, all_accel|max) %}
            {% set _ = ax.set_ylim(all_flow|min, all_flow|max) %}
            {% set _ = ax.set_zlim(all_pa|min, all_pa|max) %}
            {% set _ = ax.view_init(elev=elev, azim=azim) %}
            {% set _ = ax.tick_params(labelsize=(size/3)*2) %}
        {% endfor %}

        # Turn off any unused subplots
        {% for i in range(n_plots, nrows * ncols) %}
            {% set _ = fig.delaxes(axes_flat[i]) %}
        {% endfor %}

        {% set _ = fig.tight_layout(pad=1.0) %}

        {% set buf = io.BytesIO() %}
        {% set _ = fig.savefig(buf, format='svg', transparent=True) %}
        {% set _ = plt.close(fig) %}
        {% set svg = buf.getvalue() %}
        {% set img = 'data:image/svg+xml;base64,' ~ b64.b64encode(svg).decode() %}

        {action_respond_info('<img style="background-color:rgb(34,34,34); max-width:100%;" src="' ~ img ~ '"/>')}
    {% endif %}





[gcode_macro PA_PLANE_SINGLE_PLOT]
gcode:
    {% set elev = params.AZIM|default(none)|int(15) %}
    {% set azim = params.ELEV|default(none)|int(75) %}
    {% set size = params.SIZE|default(none)|int(10) %}

    {% set vals %}
        0.04329 , 3.90 , 1000
        0.04229 , 5.63 , 1000
        0.04129 , 7.60 , 1000
        0.04094 , 9.00 , 1000
        0.03866 , 18.00 , 1000
        0.03800 , 20.00 , 1000
        0.03649 , 23.45 , 1000
        0.04143 , 3.90 , 3250
        0.04043 , 5.63 , 3250
        0.03943 , 7.60 , 3250
        0.03908 , 9.00 , 3250
        0.03680 , 18.00 , 3250
        0.03614 , 20.00 , 3250
        0.03463 , 23.45 , 3250
        0.04103 , 3.90 , 3500
        0.04003 , 5.63 , 3500
        0.03903 , 7.60 , 3500
        0.03868 , 9.00 , 3500
        0.03640 , 18.00 , 3500
        0.03574 , 20.00 , 3500
        0.03423 , 23.45 , 3500
        0.03963 , 3.90 , 4500
        0.03863 , 5.63 , 4500
        0.03763 , 7.60 , 4500
        0.03728 , 9.00 , 4500
        0.03500 , 18.00 , 4500
        0.03434 , 20.00 , 4500
        0.03283 , 23.45 , 4500
    {% endset %}

    # -----------------------------------------------------------------------
    {% set import = printer.printer.__class__.__init__.__globals__.importlib.import_module %}
    {% set io           = import('io') %}
    {% set b64          = import('base64') %}
    {% set np           = import('numpy') %}
    {% set _3d          = import('mpl_toolkits.mplot3d') %}
    {% set matplotlib   = import('matplotlib') %}
    {% set plt          = matplotlib.pyplot %}

    # -----------------------------------------------------------------------
    {% set d_pa, d_flow, d_accel = [], [], [] %}
    {% for line in vals.strip().split('\n') %}
        {% set items = line.strip().split(',') %}
        {% if items|length == 3 %}
            {% set _ = d_pa.append(items[0]|float) %}
            {% set _ = d_flow.append(items[1]|float) %}
            {% set _ = d_accel.append(items[2]|float) %}
        {% endif %}
    {% endfor %}

    # -----------------------------------------------------------------------
    {% set fig  = plt.figure(figsize=(size, size)) %}
    {% set ax   = fig.add_subplot(111, projection='3d') %}
    {% set surf = ax.plot_trisurf(
        d_accel, d_flow, d_pa,
        cmap=plt.cm.viridis,
        edgecolor='none',
        antialiased=True
    ) %}
    {% set _ = ax.scatter(d_accel, d_flow, d_pa, c='red', s=15, label='Points') %}
    # -----------------------------------------------------------------------
    {% set _ = ax.set_xlabel('Acceleration [mm/s²]') %}
    {% set _ = ax.set_ylabel('Volumetric flow [mm³/s]') %}
    {% set _ = ax.set_zlabel('PA [s]') %}
    {% set _ = ax.view_init(elev=elev, azim=azim) %}
    {% set _ = fig.tight_layout() %}
    {% set _ = ax.legend() %}

    # -----------------------------------------------------------------------
    {% set buf = io.BytesIO() %}
    {% set _   = fig.savefig(buf, format='svg') %}
    {% set _   = plt.close(fig) %}
    {% set svg = buf.getvalue() %}
    {% set img = 'data:image/svg+xml;base64,' ~ b64.b64encode(svg).decode() %}

    {action_respond_info('<img style="max-width:100%" src="' ~ img ~ '"/>')}

