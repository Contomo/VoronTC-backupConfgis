#   ini, twig, liquid, vento, smarty, salt, yaml, hcl, jinja2
#
#   ^Stats\s+\d+(\.\d+)?[^\r\n]*\r?\n?




    # ╭────────────────── helpers ──────────────────╮
    # ╰──────────────────────────────────────────────╯
# ↻


# DEBUG_OUTPUT STEPPER_NAMES="{% for s in printer.printer.lookup_object('toolhead').get_kinematics().get_steppers() %}{ action_respond_info(s.get_name())} {% endfor %}"

# {action_respond_info(printer.printer.lookup_object('toolhead').get_kinematics().get_steppers()[0]|attr('__dict__').keys()|string)}
# {action_respond_info(printer.printer.lookup_object('toolhead').get_kinematics().get_steppers()[0].keys()|string)}


# ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
[gcode_macro _REGISTER_MODULES_AT_START]
variable_val: {}
gcode:
    {% if not val %}
        {% set wanted = [ 'time','os','sys','math','random',
                          'itertools','functools','re',
                          'json','logging','numpy'] %}
        {% set env   = printer.printer.lookup_object('gcode_macro').env %}
        {% set gbl   = printer.printer.__class__.__init__.__globals__ %}
        {% set ilib  = gbl.importlib %}
        {% set ok, err = [], [] %}
        {% for m in wanted %}
            {% set spec = ilib.util.find_spec(m) %}
            {% set mod  = gbl.get(m) if m in gbl else (ilib.import_module(m) if spec else None) %}
            {% if mod is not none %}
                {% set _ = env.globals.update({m: mod}) %}
                {% set _ = ok.append(' - \'' ~ m ~ '\'') %}
            {% else %}
                {% set _ = err.append(' - \'' ~ m ~ '\'') %}
            {% endif %}
        {% endfor %}
        {% set va = {'ok': ok, 'err': err}|string|replace('"', '\\"') %}
        SET_GCODE_VARIABLE MACRO=_REGISTER_MODULES_AT_START VARIABLE=val VALUE="{va}"
        UPDATE_DELAYED_GCODE ID=_REGISTER_MODULES_AT_START DURATION=1
    {% else %}
         {% set html = "<details><summary>registered: " ~ val.ok|length ~ "</summary>"
                ~ val.ok|join("<br>") ~ "</details>"
                ~ (val.err and "<details><summary>failed: " ~ val.err|length ~ "</summary>"
                ~ val.err|join('<br>') ~ "</details>" or "") %}
        {action_respond_info(html)}
    {% endif %}

[delayed_gcode _REGISTER_MODULES_AT_START]
initial_duration: 0.01
gcode:
    _REGISTER_MODULES_AT_START




[gcode_macro TEST_XY]
gcode:
    {% set feeeed = params.FEED|default(10000)|int %}
    {%- macro cycle(cmd='G0', feed=10000) -%}
        {%- set s = '=' if cmd != 'G0' else '' -%}
        {%- set d = 'D=100' if s else '' -%}
        {cmd} X{s}50  Y{s}100 F{s}{feed} {d}
        {cmd} X{s}300 Y{s}100 F{s}{feed/2} {d}
        {cmd} X{s}300 Y{s}320 F{s}{feed/2} {d}
        {cmd} X{s}50  Y{s}320 F{s}{feed} {'D=0' if d else ''}
    {%- endmacro -%}
    MOVE_TO_CENTER Z=15
    {cycle(feed=feeeed)}
    {cycle(cmd='ROUNDED_G0', feed=feeeed)}

# [autotune_tmc stepper_x]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_y]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z1]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z2]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z3]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto






# --------------------------------------------------------------------------
[delayed_gcode _SVF_BACKUP]
initial_duration: 1
gcode:
    {% set sv = printer.printer.lookup_object('save_variables', None) %}
    {% if sv is not none %}
        {% set tm    = printer.printer.__class__.__init__.__globals__.time %}
        {% set today = tm.strftime('%Y%m%d', tm.localtime()) %}
        {% set last  = printer.save_variables.variables.get('_last_backup', '') %}
        {% if today != last %}
            {% set orig  = sv.filename %}
            {% set prts  = orig.rsplit('.', 1) %}
            {% set stamp = tm.strftime('%Y%m%d_%H%M%S', tm.localtime()) %}
            {% set bak   = prts[0] ~ '-backup_' ~ stamp ~ '.' ~ prts[1] if prts|length > 1 else orig ~ '-backup_' ~ stamp %}
            {% set _     = sv.__setattr__('filename', bak) %}
            SAVE_VARIABLE VARIABLE="__backup_marker" VALUE=0
            _SVF_RESTORE FILE="{orig}" DATE={today}
        {% endif %}
    {% endif %}

[gcode_macro _SVF_RESTORE]
gcode:
    {% set sv = printer.printer.lookup_object('save_variables') %}
    {% set _  = sv.__setattr__('filename', params.FILE) %}
    SAVE_VARIABLE VARIABLE=_last_backup VALUE={params.DATE}
