#   ini, twig, liquid, vento, smarty, salt, yaml, hcl, jinja2
#
#   ^Stats\s+\d+(\.\d+)?[^\r\n]*\r?\n?




    # ╭────────────────── helpers ──────────────────╮
    # ╰──────────────────────────────────────────────╯
# ↻

    
# DEBUG_OUTPUT STEPPER_NAMES="{% for s in printer.printer.lookup_object('toolhead').get_kinematics().get_steppers() %}{ action_respond_info(s.get_name())} {% endfor %}"

# {action_respond_info(printer.printer.lookup_object('toolhead').get_kinematics().get_steppers()[0]|attr('__dict__').keys()|string)}
# {action_respond_info(printer.printer.lookup_object('toolhead').get_kinematics().get_steppers()[0].keys()|string)}


# orca TODO handone here for colors!
# extruder_colour = #8000FF;#64FDF5;#000000;#FFFFFF;#FFFFFF;#00C1AE;#00FF7F;#F26722




[gcode_macro REACTOR_STATS]
gcode:
    {% set r = printer.printer.get_reactor() %}
    {% set gc = r.get_gc_stats() if r.get_gc_stats else (0,0,0) %}
    RESPOND MSG="reactor: gc_timestamps={gc}"


[gcode_macro RELOAD]
gcode:
    {% set _ = printer.printer.objects.__delitem__(params.MODULE) %}
    {% set cfg = printer.printer.objects['configfile'].read_main_config() %}
    {% set _ = printer.printer.load_object(config=cfg, section=params.MODULE) %}

    

[gcode_macro SHX]
gcode:
  {% set cmd = params.CMD|default('', true) %}
  {% if not cmd %}
    RESPOND TYPE=error MSG="SHX needs CMD=\"...\""
  {% else %}
    {% set sp = printer.printer.__class__.__init__.__globals__.importlib.import_module('subprocess') %}
    {% set cp = sp.run(['bash','-lc', cmd], capture_output=True, text=True) %}
    {% set out = cp.stdout %}
    {% set MAX = params.TRUNC|default(1200)|int %}
    {% if out|length > MAX %}
      {% set out = out[:MAX] ~ '\n…(truncated)' %}
    {% endif %}
    {action_respond_info("SHX[rc=" ~ cp.returncode ~ "]: " ~ out|e)}
  {% endif %}



[gcode_macro SHXB]
description: "Non-blocking host shell (START/PEEK/LIST/CLEAN). Use START with CMD="…" or PATH="/abs/file" [ARGS="…"]"
variable_jobs: {}
gcode:
    {% set A     = params.ACTION|default('HELP')|upper %}
    {% set CMD   = params.CMD|default('', true) %}
    {% set PATH  = params.PATH|default('', true) %}
    {% set ARGS  = params.ARGS|default('', true) %}
    {% set ID    = params.ID|default('', true) %}
    {% set TRUNC = params.TRUNC|default(1500)|int %}

    {% set gbl   = printer.printer.__class__.__init__.__globals__ %}
    {% set ilib  = gbl.importlib %}
    {% set sp    = ilib.import_module('subprocess') %}
    {% set bi    = ilib.import_module('builtins') %}
    {% set os    = ilib.import_module('os') %}
    {% set shlex = ilib.import_module('shlex') %}
    {% set time  = ilib.import_module('time') %}
    {% set sc    = bi.chr(59) %}

    {% if A == 'START' %}
        {% set job_id = (time.time_ns() // 1000000)|string %}
        {% set log    = '/tmp/shxb_' ~ job_id ~ '.log' %}
        {% set qlog   = "'" ~ log ~ "'" %}

        {% if CMD %}
            {% set cmdline = CMD %}
        {% elif PATH %}
            {% set argv = [] %}
            {% set _ = argv.append(PATH) %}
            {% for tok in shlex.split(ARGS) if ARGS %}
                {% set _ = argv.append(tok) %}
            {% endfor %}
            {% set cmdline = shlex.join(argv) %}
        {% else %}
            {action_respond_info("SHXB START needs CMD=\"...\" or PATH=/abs/file [ARGS=...]")}
        {% endif %}
        {% if CMD or PATH %}
            {% set wrapped = "( " ~ cmdline ~ " " ~ sc ~ " rc=$? " ~ sc ~ " printf '%s\\n' \"__SHXB_DONE__ rc=$rc\" >> " ~ qlog ~ " " ~ sc ~ " exit $rc ) > " ~ qlog ~ " 2>&1 & disown" %}
            {% set _ = sp.Popen(['bash','-lc', wrapped], start_new_session=True) %}
            {% set _ = jobs.update({ job_id: {'log': log} }) %}
            {action_respond_info(("SHXB START id=" ~ job_id ~ " log=" ~ log)|e)}
        {% endif %}

    {% elif A == 'PEEK' %}
        {% if not ID %}
            {action_respond_info("SHXB PEEK needs ID=<job_id>")}
        {% elif ID not in jobs %}
            {action_respond_info("SHXB unknown id=" ~ ID|e)}
        {% else %}
            {% set log = jobs[ID]['log'] %}
            {% set text = '' %}
            {% if os.path.exists(log) and bi.open %}
                {% set f = bi.open(log, 'r') %}
                {% set text = f.read() %}
                {% set _ = f.close() %}
            {% endif %}
            {% set done = "__SHXB_DONE__ rc=" in text %}
            {% if text|length > TRUNC %}
                {% set start = (text|length) - TRUNC %}
                {% if start < 0 %}{% set start = 0 %}{% endif %}
                {% set text = '…(truncated tail)\n' ~ text[start:] %}
            {% endif %}
            {action_respond_info("SHXB PEEK id=" ~ ID ~ " done=" ~ (done and 1 or 0) ~ "\n" ~ text)}
        {% endif %}

    {% elif A == 'LIST' %}
        {% set listing = jobs.keys()|list|join(', ') %}
        {action_respond_info(("SHXB LIST " ~ (jobs|length) ~ " job(s): " ~ listing)|e)}

    {% elif A == 'CLEAN' %}
        {% if ID and ID in jobs %}
            {% set log = jobs[ID]['log'] %}
            {% set _ = sp.run(['bash','-lc', "rm -f -- '" ~ log ~ "'"], capture_output=True, text=True) %}
            {% set _ = jobs.pop(ID) %}
            {action_respond_info("SHXB CLEAN id=" ~ ID ~ " ok")}
        {% elif not ID %}
            {% for jid, meta in jobs.items() %}
                {% set _ = sp.run(['bash','-lc', "rm -f -- '" ~ meta['log'] ~ "'"], capture_output=True, text=True) %}
            {% endfor %}
            {% set _ = jobs.clear() %}
            {action_respond_info("SHXB CLEAN all ok")}
        {% else %}
            {action_respond_info("SHXB CLEAN unknown id=" ~ ID)}
        {% endif %}

    {% else %}
        {% set s = "SHXB usage:\n" ~
                   "  SHXB ACTION=START CMD='uname -a" ~ sc ~ " sleep 1" ~ sc ~ " echo done'\n" ~
                   "  SHXB ACTION=START PATH='/usr/bin/printf' ARGS='%s\\nfrom file'\n" ~
                   "  SHXB ACTION=PEEK  ID=<job_id> [TRUNC=1500]\n" ~
                   "  SHXB ACTION=LIST\n" ~
                   "  SHXB ACTION=CLEAN [ID=<job_id>]\n" ~
                   "Notes: non-blocking; logs at /tmp/shxb_<id>.log" %}
        {action_respond_info(s)}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=SHXB VARIABLE=jobs VALUE="{jobs}"








# ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
[gcode_macro _REGISTER_MODULES_AT_START]
variable_val: {}
gcode:
    {% if not val %}
        {% set wanted = [ 'time','os','sys','math','random',
                          'itertools','functools','re',
                          'json','logging','numpy', 'ast', 'matplotlib'] %}
        {% set env   = printer.printer.lookup_object('gcode_macro').env %}
        {% set gbl   = printer.printer.__class__.__init__.__globals__ %}
        {% set ilib  = gbl.importlib %}
        {% set ok, err = [], [] %}
        {% for m in wanted %}
            {% set spec = ilib.util.find_spec(m) %}
            {% set mod  = gbl.get(m) if m in gbl else (ilib.import_module(m) if spec else None) %}
            {% if mod is not none %}
                {% set _ = env.globals.update({m: mod}) %}
                {% set _ = ok.append(' - \'' ~ m ~ '\'') %}
            {% else %}
                {% set _ = err.append(' - \'' ~ m ~ '\'') %}
            {% endif %}
        {% endfor %}
        {% set va = {'ok': ok, 'err': err}|string|replace('"', '\\"') %}
        SET_GCODE_VARIABLE MACRO=_REGISTER_MODULES_AT_START VARIABLE=val VALUE="{va}"
        UPDATE_DELAYED_GCODE ID=_REGISTER_MODULES_AT_START DURATION=1
    {% else %}
         {% set html = "<details><summary>registered: " ~ val.ok|length ~ "</summary>"
                ~ val.ok|join("<br>") ~ "</details>"
                ~ (val.err and "<details><summary>failed: " ~ val.err|length ~ "</summary>"
                ~ val.err|join('<br>') ~ "</details>" or "") %}
        {action_respond_info(html)}
    {% endif %}

[delayed_gcode _REGISTER_MODULES_AT_START]
initial_duration: 0.01
gcode:
    _REGISTER_MODULES_AT_START




[gcode_macro TEST_XY]
gcode:
    {% set feeeed = params.FEED|default(10000)|int %}
    {%- macro cycle(cmd='G0', feed=10000) -%}
        {%- set s = '=' if cmd != 'G0' else '' -%}
        {%- set d = 'D=100' if s else '' -%}
        {cmd} X{s}50  Y{s}100 F{s}{feed} {d}
        {cmd} X{s}300 Y{s}100 F{s}{feed/2} {d}
        {cmd} X{s}300 Y{s}320 F{s}{feed/2} {d}
        {cmd} X{s}50  Y{s}320 F{s}{feed} {'D=0' if d else ''}
    {%- endmacro -%}
    MOVE_TO_CENTER Z=15
    {cycle(feed=feeeed)}
    {cycle(cmd='ROUNDED_G0', feed=feeeed)}

# [autotune_tmc stepper_x]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_y]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z1]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z2]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
# 
# [autotune_tmc stepper_z3]
# motor: omc-17he19-2004s
# voltage: 48
# tuning_goal: auto
