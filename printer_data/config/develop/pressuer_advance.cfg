

# gcode macro to run/generate gcode for ellis/normal line PA tests.




[gcode_macro PA_TEST] 
variable_settings: {
        'flowrate':        0.96,
        # ---- Positioning ----
        'pos_x':           125.0,  # centre‑X of pattern sweep
        'pos_y':           125.0,  # centre‑Y of pattern sweep
        # ---- Pressure‑advance sweep ----
        'pa_start':        0.015,
        'pa_end':          0.045,
        'pa_step':         0.005, # <-- slicer default step size
        # ---- Speeds (mm/s) ----
        'slow_speed':      20.0,
        'fast_speed':      200.0,
        'travel_speed':    700.0,
        # ---- Misc. ----
        'z_hop_height':    0.5,
        'retract_dist':    0.5,
        'retract_speed':   50.0,
        #──────────────────────< pattern specific >────────────────────────
        # ---- Pattern geometry ----
        'side_length':     20.0,  # one leg of the "V" (mm)
        'walls':           3,    # perimeters for each pattern
        'layers':          4,
        'pattern_spacing': 4.0,  # gap between neighbouring patterns
        # --- Unlikely need change
        'line_length':     80.0,  # total length of one PA line
        'line_ratio':      1.0,   # 1:1 -> 20mm slow, 40mm fast, 20mm slow
        'line_spacing':    3.0,   # mm between lines

    }
variable_gcode_buffer: []
gcode:
    {% macro main() %}
        {% set m = params.get('MODE', '')|lower %}
        {% if   m in ['arrows', 'arrow'] %}
            M104 S180
            M190 S100
            M109 S250
            { pa_pattern(anchor=(S.pos_x, S.pos_y), side_length=S.side_length, spacing=S.pattern_spacing, layers=S.layers, walls=S.walls ) }
            M104 S0
        {% elif m in ['lines', 'line'] %}
            { pa_lines() }
        {% else %}
            { action_respond_info('Requires MODE=< arrows / lines > ') }
        {% endif %}
    {% endmacro %}

    #╭───────────────────────────────────────── Pressure Advance ARROWS  ─────────────────────────────────────────╮
    {%- macro pa_pattern(anchor, side_length=20, spacing=4, walls=1, layers=1, 
                        slow_speed=20, fast_speed=100, 
                        layer_height=None, line_width=None) -%}
        {% set lh = layer_height|float(S.layer_height) %}
        {% set steps = ((S.pa_end - S.pa_start) / S.pa_step)|round(0, 'ceil')|int + 1 %}

        # --- Geometry for a VERTICAL stack of arrows ---
        {% set arrow_width = side_length * 2 %}
        {% set arrow_height = side_length %}
        {% set total_h = arrow_height + ((steps - 1) * spacing) %}

        # --- Calculate starting corner of the entire pattern ---
        {% set x0 = anchor[0] - (arrow_width / 2.0) %}
        {% set y0 = anchor[1] - (total_h / 2.0) %}

        # --- Pre-flight checks and boundary drawing ---
        { boundary_check(x0, y0, arrow_width, total_h) }
        SAVE_GCODE_STATE NAME=_PA_PATTERN_MAIN
        { draw_rectangle(anchor=(x0, y0), width=arrow_width, height=total_h, walls=3, layer_height=1, line_width=line_width, speed=fast_speed) }
        
        # --- Main printing loop ---
        G90
        {% for lay in range(layers|int) %}
            {% set p_loop = loop %}
            {% set z_pos = lh * (lay + 1) %}
            {% for i in range(steps|int) %}
                {% set pa_val = S.pa_start + i * S.pa_step %}
                
                {% set y_off  = i * spacing %}
                {% set pt     = (x0, y0 + y_off, z_pos) %}

                { travel_to((x0, y0)) }

                SET_PRESSURE_ADVANCE ADVANCE={ pa_val }                
                { pa_arrows(anchor=pt, side_length=side_length, walls=walls, 
                            slow_speed=S.slow_speed, fast_speed=S.fast_speed, line_width=line_width) }
            {% endfor %}
        {% endfor %}
        RESTORE_GCODE_STATE NAME=_PA_PATTERN_MAIN
    {% endmacro %}

    #──────────< multiple v's) >────────────
    {%- macro pa_arrows(anchor, side_length=20, walls=1,
                        slow_speed=20, fast_speed=100, 
                        layer_height=None, line_width=None) -%}
    {% set lw = line_width  |float(S.line_width)   %}
    SAVE_GCODE_STATE NAME=_PA_ARROWS
    {% set x0, y0, z0 = anchor|map('default', 0.0) %}
    {% for wall in range(walls|int) %}
        {%- set offs = wall * lw %}
        {%- set x    = x0 %}
        {%- set y    = y0 + offs %}
        {%- set l    = side_length %}
        {%- set p1   = (x,       y,     z0) %}
        {%- set p2   = (x + l,   y + l, z0) %}
        {%- set p3   = (x + 2*l, y,     z0) %}

        { z_hop(hop=0) if not loop.first else '' }
        { draw_line_to(p1, p2, speed=fast_speed, **kwargs) }
        { draw_line_to(p2, p3, speed=slow_speed, **kwargs) }
        { z_hop(hop=1) if not loop.last else '' }
    {% endfor %}

    RESTORE_GCODE_STATE NAME=_PA_ARROWS MOVE=0
    {% endmacro %}
    #╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    #╭───────────────────────────────────────── Pressure Advance LINES  ─────────────────────────────────────────╮
    #──────────< multiple lines >─────────
    {% macro pa_lines() %}
        SAVE_GCODE_STATE NAME=_MAIN
        {% set n_lines  = ((S.pa_end - S.pa_start) / S.pa_step)|round(0, 'ceil')|int + 1 %}
        {% set half_w = S.line_length / 2.0 %}
        {% set half_h = (n_lines - 1) * S.line_spacing / 2.0 %}
        {% set x0 = S.pos_x - half_w %}
        {% set y0 = S.pos_y - half_h %}
        {% set z = S.layer_height %}
        # y0 
        {% set x_box0 = x0 - S.line_width * 0.8 %}
        {% set x_box1 = x0 + S.line_width * 0.8 + S.line_length %}
        {% set y_box0 = y0 %}
        {% set y_box1 = y0 + n_lines * S.line_spacing %}
        # prepare by drawing two lines to attatch
        G90
        G0 { fmt_params( {'F': S.travel_speed * 60.0} ) }
        G0 { fmt_params( (x_box0, y_box0, z + S.z_hop_height) ) }
        { z_hop(hop=0) }
        { draw_line_to( (x_box0, y_box0, z), (x_box0, y_box1, z), speed=20 ) }
        { z_hop(hop=1) }
        G0 { fmt_params( (x_box1, y_box1) ) }
        { z_hop(hop=0) }
        { draw_line_to( (x_box1, y_box1, z), (x_box1, y_box0, z), speed=20  ) }
        { z_hop(hop=1) }
        G0 { fmt_params( (x0, y0) ) }
         {z_hop(hop=0) }

        {% set pa_line = {} %}
        {% set _ = pa_line.update(kwargs) %}
        {% for i in range(n_lines) %}
            {% set _ = pa_line.update( { 'pa_value':   S.pa_start + i * S.pa_step,
                                          'dir_x': loop.cycle(1, -1),
                                          'dir_y': 0,
                                          'x' :    loop.cycle(x0, x0 + S.line_length),
                                          'y':     y0 + i * S.line_spacing, 
                            } ) %}
            { draw_pa_line(**pa_line) }
        {% endfor %}
        { z_hop(hop=1) }
        G0 { fmt_params( (th.position.x, th.position.y, th.position.z) ) }
        RESTORE_GCODE_STATE NAME=_MAIN MOVE=0
    {% endmacro %}

    #──────────< draw pressure advance calibration line >───
    {% macro draw_pa_line(x=0, y=0, dir_x=1, dir_y=0, pa_value=0) %}
        {% set slow_len = S.line_length / (2.0 + 2.0 * S.line_ratio) %}
        {% set fast_len = slow_len * 2.0 * S.line_ratio %}

        #-- build the lines, start with starting pos
        {% set start, lines = { 'x': x, 'y': y },  [] %}
        {% set segs = [ (slow_len, S.slow_speed), 
                         (fast_len, S.fast_speed), 
                         (slow_len, S.slow_speed) ] %} # segs omegalul
        {% for seg, spd in segs %}
            {% set p_prev = lines[-1][1] if lines else start %}
            {% set p_next = {'x': p_prev.x + seg*dir_x,
                            'y': p_prev.y + seg*dir_y } %}
            {% set _ = lines.append( (p_prev, p_next, spd) ) %}
        {% endfor %}
        SET_PRESSURE_ADVANCE ADVANCE={ pa_value }
        {% for l in lines %} { draw_line_to(*l) } {% endfor %}
    {% endmacro %}
    #╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    #──────────< be there or be rectangle >─────────────────────────────────────────────────────────────
    {% macro draw_rectangle(anchor, width, height, layer_height=None, line_width=None, walls=1, layers=1) %} 
        SAVE_GCODE_STATE NAME=_DRAW_RECT
        {% for layer in range(layers|int) %}
            {% set z = layer_height|float(S.layer_height) * (layer + 1) %}
            {% for wall in range(walls|int) %}
                {% set offs = wall * line_width|float(S.line_width) %}
                {% set x = anchor[0] + offs %}
                {% set y = anchor[1] + offs %}
                {% set w = width - 2 * offs %}
                {% set h = height - 2 * offs %}
                
                {% set p1 = (x,   y,   z) %}
                {% set p2 = (x+w, y,   z) %}
                {% set p3 = (x+w, y+h, z) %}
                {% set p4 = (x,   y+h, z) %}

                G90
                { _move(p1) }
                { draw_line_to(p1, p2, **kwargs) }
                { draw_line_to(p2, p3, **kwargs) }
                { draw_line_to(p3, p4, **kwargs) }
                { draw_line_to(p4, p1, **kwargs) }
            {% endfor %}
        {% endfor %}
        RESTORE_GCODE_STATE NAME=_DRAW_RECT MOVE=0
    {% endmacro %}

    #──────────< draw a regular line >────────────────────────────────────────────────────────────────────────────────
    {% macro draw_line_to(p1, p2, speed=100) %}
        {% set e_amnt = point_distance(p1, p2)|float * get_extrusion_multiplier(**kwargs)|float %}
        M83                                     # Set relative extrusion
        G90
        G0 {fmt_params(p1)}
        G1 {fmt_params(p2)}{fmt_params( {'E': e_amnt, 'F': speed * 60.0} )}
        M82                                     # Revert to absolute extrusion
    {% endmacro %}

    #──────────< Smart Travel Move >────────────────────────────────────────────────────────────────────────────────
    {% macro travel_to(point) %}
        { z_hop(hop=1) }
        G90
        G0 { fmt_params(point) } { fmt_params({'F':S.travel_speed*60}) } 
        { z_hop(hop=0) }
    {% endmacro %}

    #──────────< Z Hop/Retract Helper >───────────────────────────────────────────────────────────────────────────────
    {% macro z_hop(hop, z_lift, e_length, e_speed) %}
        G91                                     # Set relative positioning
        {% set z_dir = 1 if hop else -1 %}
        {% set z = z_lift or S.z_hop_height * z_dir %}
        {% set e = e_length or S.retract_dist * z_dir * -1 %}
        {% set f = e_speed or S.retract_speed * 60.0 %}
        G1 {fmt_params( {'z':z, 'e':e, 'f':f} )}
        G90                                     # Revert to absolute positioning
    {% endmacro %}

    {% macro _move(point) %}
        SAVE_GCODE_STATE NAME=_move
        G90 
        G0 {fmt_params(point)}
        RESTORE_GCODE_STATE NAME=_move MOVE=0
    {% endmacro %}

    #──────────< lookup helpers >─────────────────────────────────────────────────────────────────────────────────────
    {%- macro get_extrusion_multiplier(layer_height, line_width) -%}
        {%- set filament_diameter = cfg[get_extruder(**kwargs)].filament_diameter|float -%}
        {%- set extrusion_area = (layer_height or S.layer_height)|float * (line_width or S.line_width)|float -%}
        { (extrusion_area / (3.14159 *  (filament_diameter / 2.0)**2 )) * S.flowrate }
    {%- endmacro -%}

    {%- macro get_extruder(tn=tc.tool_number) -%}
        { printer[tc.tool_names[tn|int]].extruder }
    {%- endmacro -%}

    #──────────< calc/internal helpers >──────────────────────────────────────────────────────────────────────────────
    {%- macro point_distance(p1, p2) -%}
        {%- set sumsq = [0] -%}
        {%- for axis in ['x', 'y', 'z'] -%}
            {%- set a = p1[axis]|default(none) if p1 is mapping else p1[loop.index0]|default(none) -%}
            {%- set b = p2[axis]|default(none) if p2 is mapping else p2[loop.index0]|default(none) -%}
            {%- set _ = sumsq.append((a|float(none)  - b|float(none))**2) if a is not none and b is not none else none -%}
        {%- endfor -%}
        { (sumsq|sum)**0.5 }
    {%- endmacro -%}

    {%- macro fmt_params(point) -%}
        {%- set out = [] -%}
        {%- for p, r in [('X', 3), ('Y', 3), ('Z', 3), ('E', 5), ('F', 1)] -%}
            {%- set val = point[p|lower]|default(point[p]|default(none)) if point is mapping 
                     else point[loop.index0]|default(none)|float(none) -%}
            {%- set _ = out.append(p ~ val|round(r)) if val is not none -%}
        {%- endfor -%}
        { out|join(' ') }
    {%- endmacro -%}

    #──────────< Pre-flight Boundary Check >──────────────────────────────────────────────────────────────────
    {% macro boundary_check(x_start, y_start, width, height) %}
        {% set x_end = x_start + width %}
        {% set y_end = y_start + height %}
        
        {% set min_x = printer.toolhead.axis_minimum.x %}
        {% set max_x = printer.toolhead.axis_maximum.x %}
        {% set min_y = printer.toolhead.axis_minimum.y %}
        {% set max_y = printer.toolhead.axis_maximum.y %}

        {% if x_start < min_x or x_end > max_x or y_start < min_y or y_end > max_y %}
            { action_raise_error("Pattern out of bounds! \n" ~
                                 "X: " ~ x_start|round(1) ~ " to " ~ x_end|round(1) ~
                                 " (Bed: " ~ min_x ~ " to " ~ max_x ~ ")\n" ~
                                 "Y: " ~ y_start|round(1) ~ " to " ~ y_end|round(1) ~
                                 " (Bed: " ~ min_y ~ " to " ~ max_y ~ ")\n" ~
                                 "Action: Adjust POS_X/POS_Y or reduce pattern size (e.g., PA_END).") }
        {% endif %}
    {% endmacro %}

    #─────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    {% set tc, cfg, th = printer.toolchanger, printer.configfile.settings, printer.toolhead %}
    {% set nozzle = cfg[get_extruder()].nozzle_diameter|float(0.4) %}
    {% set _ = settings.update({ 'layer_height': params.pop('LAYER_HEIGHT', nozzle * 0.625) }) %}
    {% set _ = settings.update({ 'line_width':   params.pop('LINE_WIDTH',   nozzle * 1.250) }) %}
    # force all to float, allow overwrite from params.
    {% set S = settings %}
    {% for k, v in settings.items() %}{% set _ = S.update({k: params.get(k|upper, v)|float}) %}{% endfor %}

    { main() }
