[gcode_macro _TC_CHECK_WE_OK]
description: Verify tool-changer, homing and probe state before continuing
gcode:
  {% set cfg = printer.configfile.settings %}
  {% set tc  = printer.toolchanger %}
  {% set th  = printer.toolhead %}
  {% set tp  = printer.tool_probe_endstop %}
  {% set m   = '?tchecks for toolchange status and homing status?n(and esnures we are ok)?p' ~ params.MACRO|default('_TC_CHECK_WE_OK') ~ ' ' %}
  {% set message = m %}
  {% macro msg(s) -%}{% set message = message ~ s %}{%- endmacro %}
  {% if tc.status == "error" %}
    {msg('?t?s4?mToolchanger is in error state, aborting.')}
  {% elif tc.status == "uninitialized" %}
    {msg('?t?s3?mToolchanger is uninitialized, trying to initialize, please retry')}
    INITIALIZE_TOOLCHANGER
  #{% elif tc.status == "changing" %}
  #  RESPOND MSG="Waiting for ongoing tool-change to finishâ€¦"
  {% elif tp.active_tool_number == -1 %}
      {msg('?s2?t?mIt would appear that no tool is detected, trying to detect it.')}
      DETECT_ACTIVE_TOOL_PROBE
      _TC_CHECK_WE_OK_TRY_RECOVER ACTION="action_raise_error('nope, nothing there..') if printer.tooltool_probe_endstop.active_tool_number == -1 else ''"
  {% elif tp.active_tool_number != tc.tool_number %}
      {msg('?s4?t?mToolchanger seems to be desynced, please try again')}
      INITIALIZE_TOOLCHANGER
  {% endif %}
  {% if   th.homed_axes != "xyz" and cfg.toolchanger.on_axis_not_homed != 'home' %}
    {msg('?s4?twant to rather home instead? edit:?n[toolchanger]?n   on_axis_not_homed: home')}
    {msg('?mMust home axes first: ' ~ th.position[0]|round(3) ~ ' ' ~ th.position[1]|round(3) ~ ' ' ~ th.position[2]|round(3) ~ ' [' ~ th.position[3]|round(3) ~ ']')}
  {% elif th.homed_axes != "xyz" and cfg.toolchanger.on_axis_not_homed == 'home' and tc.status != "error" %}
    {msg('?s5?twant to rather not home instead? edit:?n[toolchanger]?n   on_axis_not_homed: abort')}
    {msg('?mHoming first...')}
  {% endif %}
  {action_raise_error() if ('?s3' in message) or ('?s4' in message) else ''}
  {('_UNIFIED_RESPOND MSG=' ~ message) if message != m else ''}


[gcode_macro NINJAGO]
gcode:
  {% set raw_msg = params.EVAL|default('') %}
  {% set segments = raw_msg.split('{') %}
  {% set ns = namespace(out = segments[0]) %}

  {% macro appnd(msg) -%}{% set ns.out = ns.out ~ msg %}{%- endmacro %}
  {% macro resolve(path) -%} 
    {%- set _ns = namespace(obj=printer, valid=['printer']) -%}
    {%- for part in path[8:].split('.') if part and (' not in ') not in _ns.obj  -%}
      {%- if part in _ns.obj or _ns.obj[part|int] is defined -%}
        {%- set _ns.valid = _ns.valid + [part] -%}
        {%- set _ns.obj = _ns.obj[part|int(part)] -%}
      {%- else -%} {%- set _ns.obj = "'" ~ part ~ "' not in '" ~ _ns.valid|join('.') ~ "'" -%} {%- endif -%}
    {%- endfor -%}
    {_ns.obj} 
  {%- endmacro %}
  {% for tail in segments[1:] if raw_msg %}
    {% if tail.split('}', 1)|length == 2 %}
      {% set placeholder, remainder = tail.split('}', 1) %}
      {% if not (placeholder|trim).startswith('printer.') %}
        {appnd('invalid (' ~ placeholder ~ ')')}
      {% else %} {appnd(resolve((placeholder|trim).replace('[', '.').replace(']', '')) ~ remainder)} {% endif %}   
    {% else %} {appnd('{' ~ tail)} {% endif %}
  {% endfor %}
  {action_respond_info(ns.out if 'EVAL' in params else 'missing param: EVAL')}

[gcode_macro _TC_CHECK_WE_OK_TRY_RECOVER]
gcode:
  {% set action = params.ACTION|default('') %}
  {action}








[quad_gantry_offsets]
tilt: 10
safe_z: 2

#     ^Stats\s+\d+(\.\d+)?[^\r\n]*\r?\n?


[gcode_macro TEST_AXIS]
gcode:
    {% macro move(axis, pos) -%}
        RESPOND MSG="moving to -> {axis}={pos}"
        QGO_SLOPED_G0 {axis}={pos}
        M400
        PRINT_Z
    {%- endmacro %}

    G0 X175 Y175 Z20
    QGO_TILT_GANTRY X=10
    G0 X175 Y175 Z20
    {move('X', 100)}
    {move('X', 250)}
    {move('X', 175)}
    {move('Y', 100)}
    {move('Y', 250)}
    {move('Y', 175)}
    QGO_TILT_GANTRY Y=10
    G0 X175 Y175 Z20
    {move('X', 100)}
    {move('X', 250)}
    {move('X', 175)}
    {move('Y', 100)}
    {move('Y', 250)}
    {move('Y', 175)}
    QGO_TILT_GANTRY
    G0 X175 Y175 Z20

[gcode_macro PRINT_Z]
gcode:
    {% set pos = printer.toolhead.position %}
    RESPOND MSG="z: {pos[2]}"