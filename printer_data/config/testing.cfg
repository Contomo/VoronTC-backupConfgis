[gcode_macro _TC_CHECK_WE_OK]
description: Verify tool-changer, homing and probe state before continuing
gcode:
  {% set cfg = printer.configfile.settings %}
  {% set tc  = printer.toolchanger %}
  {% set th  = printer.toolhead %}
  {% set tp  = printer.tool_probe_endstop %}
  {% set m   = '?tchecks for toolchange status and homing status?n(and esnures we are ok)?p' ~ params.MACRO|default('_TC_CHECK_WE_OK') ~ ' ' %}
  {% set message = m %}
  {% macro msg(s) -%}{% set message = message ~ s %}{%- endmacro %}
  {% if tc.status == "error" %}
    {msg('?t?s4?mToolchanger is in error state, aborting.')}
  {% elif tc.status == "uninitialized" %}
    {msg('?t?s3?mToolchanger is uninitialized, trying to initialize, please retry')}
    INITIALIZE_TOOLCHANGER
  #{% elif tc.status == "changing" %}
  #  RESPOND MSG="Waiting for ongoing tool-change to finish…"
  {% elif tp.active_tool_number == -1 %}
      {msg('?s2?t?mIt would appear that no tool is detected, trying to detect it.')}
      DETECT_ACTIVE_TOOL_PROBE
      _TC_CHECK_WE_OK_TRY_RECOVER ACTION="action_raise_error('nope, nothing there..') if printer.tooltool_probe_endstop.active_tool_number == -1 else ''"
  {% elif tp.active_tool_number != tc.tool_number %}
      {msg('?s4?t?mToolchanger seems to be desynced, please try again')}
      INITIALIZE_TOOLCHANGER
  {% endif %}
  {% if   th.homed_axes != "xyz" and cfg.toolchanger.on_axis_not_homed != 'home' %}
    {msg('?s4?twant to rather home instead? edit:?n[toolchanger]?n   on_axis_not_homed: home')}
    {msg('?mMust home axes first: ' ~ th.position[0]|round(3) ~ ' ' ~ th.position[1]|round(3) ~ ' ' ~ th.position[2]|round(3) ~ ' [' ~ th.position[3]|round(3) ~ ']')}
  {% elif th.homed_axes != "xyz" and cfg.toolchanger.on_axis_not_homed == 'home' and tc.status != "error" %}
    {msg('?s5?twant to rather not home instead? edit:?n[toolchanger]?n   on_axis_not_homed: abort')}
    {msg('?mHoming first...')}
  {% endif %}
  {action_raise_error() if ('?s3' in message) or ('?s4' in message) else ''}
  {('_UNIFIED_RESPOND MSG=' ~ message) if message != m else ''}


[gcode_macro NINJAGO]
gcode:
  {% set raw_msg = params.EVAL|default('') %}
  {% set segments = raw_msg.split('{') %}
  {% set ns = namespace(out = segments[0]) %}

  {% macro appnd(msg) -%}{% set ns.out = ns.out ~ msg %}{%- endmacro %}
  {% macro resolve(path) -%} 
    {%- set _ns = namespace(obj=printer, valid=['printer']) -%}
    {%- for part in path[8:].split('.') if part and (' not in ') not in _ns.obj  -%}
      {%- if part in _ns.obj or _ns.obj[part|int] is defined -%}
        {%- set _ns.valid = _ns.valid + [part] -%}
        {%- set _ns.obj = _ns.obj[part|int(part)] -%}
      {%- else -%} {%- set _ns.obj = "'" ~ part ~ "' not in '" ~ _ns.valid|join('.') ~ "'" -%} {%- endif -%}
    {%- endfor -%}
    {_ns.obj} 
  {%- endmacro %}
  {% for tail in segments[1:] if raw_msg %}
    {% if tail.split('}', 1)|length == 2 %}
      {% set placeholder, remainder = tail.split('}', 1) %}
      {% if not (placeholder|trim).startswith('printer.') %}
        {appnd('invalid (' ~ placeholder ~ ')')}
      {% else %} {appnd(resolve((placeholder|trim).replace('[', '.').replace(']', '')) ~ remainder)} {% endif %}   
    {% else %} {appnd('{' ~ tail)} {% endif %}
  {% endfor %}
  {action_respond_info(ns.out if 'EVAL' in params else 'missing param: EVAL')}

[gcode_macro _TC_CHECK_WE_OK_TRY_RECOVER]
gcode:
  {% set action = params.ACTION|default('') %}
  {action}

#mcu et0 {(dict)}
#mcu_version: v0.12.0-173-g0b329c5d (str)
#mcu_build_versions: gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40 (str)
#mcu_constants: {'ADC_MAX': 4095, 'BUS_PINS_i2c1_PA9_PA10': 'PA9,PA10', 'BUS_PINS_i2c1_PB6_PB7': 'PB6,PB7', 'BUS_PINS_i2c1_PB8_PB9': 'PB8,PB9', 'BUS_PINS_i2c2_PB10_PB11': 'PB10,PB11', 'BUS_PINS_i2c2_PB13_PB14': 'PB13,PB14', 'BUS_PINS_i2c3_PB3_PB4': 'PB3,PB4', 'BUS_PINS_i2c3_PC0_PC1': 'PC0,PC1', 'BUS_PINS_spi1': 'PA6,PA7,PA5', 'BUS_PINS_spi1a': 'PB4,PB5,PB3', 'BUS_PINS_spi2': 'PB14,PB15,PB13', 'BUS_PINS_spi2a': 'PC2,PC3,PB10', 'BUS_PINS_spi3': 'PB4,PB5,PB3', 'CANBUS_FREQUENCY': 1000000, 'CLOCK_FREQ': 64000000, 'MCU': 'stm32g0b1xx', 'PWM_MAX': 255, 'RECEIVE_WINDOW': 192, 'RESERVE_PINS_CAN': 'PB0,PB1', 'RESERVE_PINS_crystal': 'PF0,PF1', 'STATS_SUMSQ_BASE': 256, 'STEPPER_BOTH_EDGE': 1} (dict)
#last_stats: {'mcu_awake': 0.003, 'mcu_task_avg': 1.1e-05, 'mcu_task_stddev': 1e-05, 'bytes_write': 44881, 'bytes_read': 195648, 'bytes_retransmit': 0, 'bytes_invalid': 0, 'send_seq': 3941, 'receive_seq': 3941, 'retransmit_seq': 0, 'srtt': 0.0, 'rttvar': 0.0, 'rto': 0.025, 'ready_bytes': 0, 'upcoming_bytes': 0, 'freq': 63998897, 'adj': 63999389} (dict)
#
#canbus_stats et0 {(dict)}
#rx_error: None (NoneType)
#tx_error: None (NoneType)
#tx_retries: None (NoneType)
#bus_state: None (NoneType)



#     ^Stats\s+\d+(\.\d+)?[^\r\n]*\r?\n?




[gcode_macro DUMP_MCU_STATUS]
description: "Dumps the status dictionary of a target MCU. Usage: DUMP_MCU_STATUS MCU=et0"
gcode:
    {% set mcu_name = params.MCU|default('et0') %}
    {% set mcu_object = printer.printer.lookup_object('mcu ' ~ mcu_name, None) %}

    {% if mcu_object %}
        {% set print_time = printer.toolhead.estimated_print_time %}
        {% set status_dict = mcu_object.get_status(print_time) %}
        {action_respond_info("Status for MCU '%s':\n%s" % (mcu_name, status_dict))}
    {% else %}
        {action_respond_info("MCU '%s' not found." % mcu_name)}
    {% endif %}

[gcode_macro IS_TRIGGERED]
gcode:
  {% set toolhead = printer.printer.lookup_object('toolhead') %}
  {% set probe =    printer.printer.lookup_object('probe') %}
  {% set is_triggered   = probe.mcu_probe.query_endstop(toolhead.get_last_move_time()) %}
  RESPOND MSG="{is_triggered}"

[display_template logo_old]
param_tn: 'None'
text:
  {% set pp = printer.printer %}
  {% set probe = pp.lookup_object('probe') %}
  {% set th = pp.lookup_object('toolhead') %}
  {% set invert = probe.mcu_probe.query_endstop(th.get_last_move_time()) %}
  {invert}{invert}{invert}{invert}

[gcode_macro LOOKUP_OBJECT]
gcode:
  {% set msg = [] %}
  {% set obj = printer.printer.lookup_object(params.OBJECT|default(None), default=None) %}
  {% if obj %}
    {% for name in obj.__dir__()|sort if not name.startswith('_') %}
      {% set attr = obj|attr(name) %}
      {% if attr is callable %}
        {% set _ = msg.append(name ~ " (callable)") %}
      {% else %}
        {% set _ = msg.append(name ~ " (attribute)") %}
      {% endif %}
    {% endfor %}
    {% if params.CALL is defined %}
      RESPOND MSG="{obj|attr(params.CALL)()}"
    {% else %}
      RESPOND MSG="{msg|join('<br>')}"
    {% endif %}
  {% else %}
    RESPOND MSG="no object found named: {obj}"
  {% endif %}


[gcode_macro WAIT_HEAT_SOAK]
variable_duration: 5        # in minutes
variable_threshold_temp: 45 #in °C
gcode:
  {% if printer.heater_bed.temperature <= threshold_temp %}
    HEAT_SOAK_BED
    G4 P{duration * 60 * 1000}
  {% else %}
    RESPOND MSG="skipping heat soak... ({printer.heater_bed.temperature} > {threshold_temp}) "
  {% endif %}

[delayed_gcode _WAIT_HEAT_SOAK]
gcode:
  PRINT_START CONTINUE="True"


[gcode_macro BFS]
description: "A fast, flat, and reliable search for the Klipper object tree. Usage: BFS S=<search> E=<exclude>"
variable_path_color:      "rgb(200,200,200)"
variable_val_color:       "rgb(255,200,50)"
variable_type_color:      "rgb(150,150,150)"
variable_match_color:     "rgb(255,100,150)"
variable_long_limit:      150
variable_max_depth:       10
variable_delimiter:       "°"

gcode:
    {% set S = params.S|default("")|string %}
    {% if not S %}
        {action_respond_info("BFS Usage: S=<search>°<terms> [E=<exclude>]. Example: BFS S=toolhead°position")}
    {% else %}
        {% set E = params.E|default("")|string %}
        {% set nl = '\n' %}
        {% set search_terms = [] %}{%- for t in (S|lower).split(delimiter) -%}{%- if t -%}{%- set _ = search_terms.append(t) -%}{%- endif -%}{%- endfor -%}
        {% set exclude_terms = [] %}{%- for t in (E|lower).split(delimiter) -%}{%- if t -%}{%- set _ = exclude_terms.append(t) -%}{%- endif -%}{%- endfor -%}

        ; --------------------------------------------------------------------------
        ; STAGE 1: YOUR ORIGINAL, PROVEN SEARCH AND GROUPING LOGIC.
        ; This works. It is left untouched.
        ; --------------------------------------------------------------------------
        {% set queue = namespace(data=[(printer, 'printer')]) %}
        {% set visited = namespace(paths=[]) %}
        {% set results_grouped = namespace(data={}) %}
        {% set total_found = namespace(count=0) %}

        {% for _ in range(10000) %}
            {% if queue.data and total_found.count < 1500 %}
                {% set task = queue.data.pop(0) %}
                {% set current_obj, current_path = task %}

                {% if current_path not in visited.paths %}
                    {% set _ = visited.paths.append(current_path) %}
                    {% set items_to_process = namespace(data=[]) %}
                    {% if current_obj is mapping %}{% for key, value in current_obj.items() %}{% set _ = items_to_process.data.append((key, value)) %}{% endfor %}
                    {% elif current_obj|attr('__dict__') is defined %}{% for key, value in (current_obj|attr('__dict__')).items() %}{% set _ = items_to_process.data.append((key, value)) %}{% endfor %}
                    {% endif %}

                    {% for key, child_obj in items_to_process.data %}
                        {% if not (key|string).startswith('_') %}
                            {% set new_path = current_path ~ '.' ~ key|string %}
                            {% set typ_str = child_obj.__class__.__name__|string %}
                            {% set val_str = "method()" if child_obj is callable else (child_obj|string|e)|truncate(long_limit) %}
                            {% set haystack = (new_path ~ "=" ~ val_str)|lower %}
                            
                            {% set is_excluded = namespace(val=false) %}
                            {% for term in exclude_terms %}{% if term and term in haystack %}{% set is_excluded.val=true %}{% endif %}{% endfor %}
                            
                            {% if not is_excluded.val %}
                                {% set all_found = namespace(val=true) %}
                                {% for term in search_terms %}{% if term not in haystack %}{% set all_found.val=false %}{% endif %}{% endfor %}
                                
                                {% if all_found.val %}
                                    {% set total_found.count = total_found.count + 1 %}
                                    {% if current_path not in results_grouped.data %}{% set _ = results_grouped.data.update({current_path: []}) %}{% endif %}
                                    {% set leaf = {'name': key|string, 'val': val_str, 'typ': typ_str} %}
                                    {% set _ = results_grouped.data[current_path].append(leaf) %}
                                {% endif %}
                            {% endif %}

                            {% if (key != 'printer' and (child_obj is mapping or child_obj|attr('__dict__') is defined)) or loop.first %}
                                {% if (current_path.split('.')|length) < max_depth and new_path not in visited.paths %}
                                    {% set _ = queue.data.append((child_obj, new_path)) %}
                                {% endif %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {% endfor %}

        ; --------------------------------------------------------------------------
        ; STAGE 2: SIMPLE, FAST, FLAT, SORTED RENDERING.
        ; No recursion, no tree building. Just sorting and printing.
        ; --------------------------------------------------------------------------
        {%- macro highlight(text, terms, color) -%}
            {%- set ns = namespace(current_text=text) -%}
            {%- for term in terms -%}
                {%- if term and term|lower in (ns.current_text)|lower -%}
                    {%- set text_lc = (ns.current_text)|lower -%}
                    {%- set term_lc = term|lower -%}
                    {%- set start = text_lc.find(term_lc) -%}
                    {%- set L = term_lc|length -%}
                    {%- set old_text = ns.current_text -%}
                    {%- set ns.current_text = old_text[:start]~"<span style='background-color:rgba(255,100,150,0.2);color:"~color~";'>"~old_text[start:start+L]~"</span>"~old_text[start+L:] -%}
                {%- endif -%}
            {%- endfor -%}
            {ns.current_text}
        {%- endmacro -%}
        
        {% if total_found.count == 0 %}
            {action_respond_info("BFS: No results found for S='" ~ S ~ "' E='" ~ E ~ "'")}
        {% else %}
            {% set summary = "BFS: Found " ~ total_found.count ~ " results in " ~ (results_grouped.data|length) ~ " objects for S='" ~ S ~ "' E='" ~ E ~ "'" %}
            {% set html = namespace(data="") %}
            
            ; --- Iterate through the PARENT paths, sorted alphabetically to create a visual hierarchy. ---
            {% for path, leaves in results_grouped.data|dictsort %}
                {% set h_path = highlight(path, search_terms, path_color) %}
                
                {% set details_content = namespace(data='') %}
                {% for leaf in leaves|sort(attribute='name') %}
                    {% set h_leaf_name = highlight(leaf.name, search_terms, path_color) %}
                    {% set h_val = highlight(leaf.val, search_terms, val_color) %}
                    {% set leaf_html = "<div style='font-family:monospace;white-space:nowrap;padding-left:15px;'><span style='color:" ~ path_color ~ ";'>" ~ h_leaf_name ~ "</span>=<span style='color:" ~ val_color ~ ";'>" ~ h_val ~ "</span><span style='color:" ~ type_color ~ ";'>(" ~ leaf.typ ~ ")</span></div>" %}
                    {% set details_content.data = details_content.data ~ leaf_html %}
                {% endfor %}
                
                {% set group_html = "<details><summary style='cursor:pointer;'>" ~ h_path ~ " (" ~ (leaves|length) ~ " matches)</summary>" ~ details_content.data ~ "</details>" %}
                {% set html.data = html.data ~ group_html %}
            {% endfor %}

            {action_respond_info(summary ~ nl ~ html.data)}
        {% endif %}
    {% endif %}